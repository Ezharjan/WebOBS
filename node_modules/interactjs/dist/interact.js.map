{"version":3,"sources":["node_modules/browser-pack-flat/_prelude","packages/@interactjs/utils/isWindow.ts","packages/@interactjs/utils/window.ts","packages/@interactjs/utils/is.ts","packages/@interactjs/actions/drag/plugin.ts","packages/@interactjs/utils/domObjects.ts","packages/@interactjs/utils/browser.ts","packages/@interactjs/utils/domUtils.ts","packages/@interactjs/utils/extend.ts","packages/@interactjs/utils/rect.ts","packages/@interactjs/utils/getOriginXY.ts","packages/@interactjs/utils/normalizeListeners.ts","packages/@interactjs/utils/hypot.ts","packages/@interactjs/utils/pointerExtend.ts","packages/@interactjs/utils/pointerUtils.ts","packages/@interactjs/core/BaseEvent.ts","packages/@interactjs/utils/arr.ts","packages/@interactjs/actions/drop/DropEvent.ts","packages/@interactjs/actions/drop/plugin.ts","packages/@interactjs/actions/gesture/plugin.ts","packages/@interactjs/actions/resize/plugin.ts","packages/@interactjs/actions/plugin.ts","packages/@interactjs/arrange/plugin.ts","packages/@interactjs/utils/raf.ts","packages/@interactjs/auto-scroll/plugin.ts","packages/@interactjs/utils/misc.ts","packages/@interactjs/auto-start/InteractableMethods.ts","packages/@interactjs/auto-start/base.ts","packages/@interactjs/auto-start/dragAxis.ts","packages/@interactjs/auto-start/hold.ts","packages/@interactjs/auto-start/plugin.ts","packages/@interactjs/clone/plugin.ts","packages/@interactjs/core/interactablePreventDefault.ts","packages/@interactjs/dev-tools/plugin.ts","packages/@interactjs/utils/clone.ts","packages/@interactjs/modifiers/Modification.ts","packages/@interactjs/modifiers/base.ts","packages/@interactjs/core/defaultOptions.ts","packages/@interactjs/core/InteractEvent.ts","packages/@interactjs/core/PointerInfo.ts","packages/@interactjs/core/Interaction.ts","packages/@interactjs/offset/plugin.ts","packages/@interactjs/inertia/plugin.ts","packages/@interactjs/core/Eventable.ts","packages/@interactjs/core/isNonNativeEvent.ts","packages/@interactjs/core/Interactable.ts","packages/@interactjs/core/InteractableSet.ts","packages/@interactjs/core/events.ts","packages/@interactjs/core/interactStatic.ts","packages/@interactjs/core/interactionFinder.ts","packages/@interactjs/core/interactions.ts","packages/@interactjs/core/scope.ts","packages/@interactjs/interact/index.ts","packages/@interactjs/snappers/edgeTarget.ts","packages/@interactjs/snappers/elements.ts","packages/@interactjs/snappers/grid.ts","packages/@interactjs/snappers/all.ts","packages/@interactjs/snappers/plugin.ts","packages/@interactjs/modifiers/aspectRatio.ts","packages/@interactjs/modifiers/noop.ts","packages/@interactjs/modifiers/avoid.ts","packages/@interactjs/modifiers/restrict/pointer.ts","packages/@interactjs/modifiers/restrict/edges.ts","packages/@interactjs/modifiers/restrict/rect.ts","packages/@interactjs/modifiers/restrict/size.ts","packages/@interactjs/modifiers/rubberband.ts","packages/@interactjs/modifiers/snap/pointer.ts","packages/@interactjs/modifiers/snap/size.ts","packages/@interactjs/modifiers/snap/edges.ts","packages/@interactjs/modifiers/spring.ts","packages/@interactjs/modifiers/all.ts","packages/@interactjs/modifiers/plugin.ts","packages/@interactjs/pointer-events/PointerEvent.ts","packages/@interactjs/pointer-events/base.ts","packages/@interactjs/pointer-events/holdRepeat.ts","packages/@interactjs/pointer-events/interactableTargets.ts","packages/@interactjs/pointer-events/plugin.ts","packages/@interactjs/reflow/plugin.ts","packages/@interactjs/utils/displace.ts","packages/@interactjs/utils/exchange.ts","packages/@interactjs/interactjs/index.ts","packages/interactjs/index.ts","node_modules/browser-pack-flat/_postlude"],"names":[],"mappings":"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","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.interact = f()}})(function(){var define,module,exports;\n","export default (thing: any) => !!(thing && thing.Window) && (thing instanceof thing.Window)\n","import isWindow from './isWindow'\n\nconst win = {\n  realWindow: undefined as Window,\n  window: undefined as Window,\n  getWindow,\n  init,\n}\n\nexport function init (window: Window & { wrap?: (...args: any[]) => any }) {\n  // get wrapped window if using Shadow DOM polyfill\n\n  win.realWindow = window\n\n  // create a TextNode\n  const el = window.document.createTextNode('')\n\n  // check if it's wrapped by a polyfill\n  if (el.ownerDocument !== window.document &&\n      typeof window.wrap === 'function' &&\n    window.wrap(el) === el) {\n    // use wrapped window\n    window = window.wrap(window)\n  }\n\n  win.window = window\n}\n\nif (typeof window === 'undefined') {\n  win.window     = undefined\n  win.realWindow = undefined\n}\nelse {\n  init(window)\n}\n\nexport function getWindow (node: any) {\n  if (isWindow(node)) {\n    return node\n  }\n\n  const rootNode = (node.ownerDocument || node)\n\n  return rootNode.defaultView || win.window\n}\n\nwin.init = init\n\nexport default win\n","import * as Interact from '@interactjs/types/index'\n\nimport isWindow from './isWindow'\nimport win from './window'\n\nconst window = (thing: any): thing is Window =>\n  thing === win.window || isWindow(thing)\n\nconst docFrag = (thing: any): thing is DocumentFragment =>\n  object(thing) && thing.nodeType === 11\n\nconst object = (thing: any): thing is { [index: string]: any } =>\n  !!thing && (typeof thing === 'object')\n\nconst func = (thing: any): thing is (...args: any[]) => any =>\n  typeof thing === 'function'\n\nconst number = (thing: any): thing is number =>\n  typeof thing === 'number'\n\nconst bool = (thing: any): thing is boolean =>\n  typeof thing === 'boolean'\n\nconst string = (thing: any): thing is string =>\n  typeof thing === 'string'\n\nconst element = (thing: any): thing is Interact.Element => {\n  if (!thing || (typeof thing !== 'object')) { return false }\n\n  // eslint-disable-next-line import/no-named-as-default-member\n  const _window = win.getWindow(thing) || win.window\n\n  return (/object|function/.test(typeof _window.Element)\n    ? thing instanceof _window.Element // DOM2\n    : thing.nodeType === 1 && typeof thing.nodeName === 'string')\n}\n\nconst plainObject: typeof object = (thing: any): thing is { [index: string]: any } =>\n  object(thing) &&\n  !!thing.constructor &&\n  /function Object\\b/.test(thing.constructor.toString())\n\nconst array = <T extends unknown>(thing: any): thing is T[] =>\n  (object(thing) &&\n  (typeof thing.length !== 'undefined') &&\n  func(thing.splice))\n\nexport default {\n  window,\n  docFrag,\n  object,\n  func,\n  number,\n  bool,\n  string,\n  element,\n  plainObject,\n  array,\n}\n","import { Scope } from '@interactjs/core/scope'\nimport * as Interact from '@interactjs/types/index'\nimport is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    draggable: DraggableMethod\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    drag: Interact.DraggableOptions\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface ActionMap {\n    drag?: typeof drag\n  }\n}\n\nexport type DragEvent = Interact.InteractEvent<'drag'>\n\nexport type DraggableMethod = Interact.ActionMethod<Interact.DraggableOptions>\n\nfunction install (scope: Scope) {\n  const {\n    actions,\n    Interactable,\n    defaults,\n  } = scope\n\n  Interactable.prototype.draggable = drag.draggable\n\n  actions.map.drag = drag\n  actions.methodDict.drag = 'draggable'\n\n  defaults.actions.drag = drag.defaults\n}\n\nfunction beforeMove ({ interaction }) {\n  if (interaction.prepared.name !== 'drag') { return }\n\n  const axis = interaction.prepared.axis\n\n  if (axis === 'x') {\n    interaction.coords.cur.page.y   = interaction.coords.start.page.y\n    interaction.coords.cur.client.y = interaction.coords.start.client.y\n\n    interaction.coords.velocity.client.y = 0\n    interaction.coords.velocity.page.y   = 0\n  }\n  else if (axis === 'y') {\n    interaction.coords.cur.page.x   = interaction.coords.start.page.x\n    interaction.coords.cur.client.x = interaction.coords.start.client.x\n\n    interaction.coords.velocity.client.x = 0\n    interaction.coords.velocity.page.x   = 0\n  }\n}\n\nfunction move ({ iEvent, interaction }) {\n  if (interaction.prepared.name !== 'drag') { return }\n\n  const axis = interaction.prepared.axis\n\n  if (axis === 'x' || axis === 'y') {\n    const opposite = axis === 'x' ? 'y' : 'x'\n\n    iEvent.page[opposite]   = interaction.coords.start.page[opposite]\n    iEvent.client[opposite] = interaction.coords.start.client[opposite]\n    iEvent.delta[opposite] = 0\n  }\n}\n\n/**\n * ```js\n * interact(element).draggable({\n *     onstart: function (event) {},\n *     onmove : function (event) {},\n *     onend  : function (event) {},\n *\n *     // the axis in which the first movement must be\n *     // for the drag sequence to start\n *     // 'xy' by default - any direction\n *     startAxis: 'x' || 'y' || 'xy',\n *\n *     // 'xy' by default - don't restrict to one axis (move in any direction)\n *     // 'x' or 'y' to restrict movement to either axis\n *     // 'start' to restrict movement to the axis the drag started in\n *     lockAxis: 'x' || 'y' || 'xy' || 'start',\n *\n *     // max number of drags that can happen concurrently\n *     // with elements of this Interactable. Infinity by default\n *     max: Infinity,\n *\n *     // max number of drags that can target the same element+Interactable\n *     // 1 by default\n *     maxPerElement: 2\n * })\n *\n * var isDraggable = interact('element').draggable(); // true\n * ```\n *\n * Get or set whether drag actions can be performed on the target\n *\n * @alias Interactable.prototype.draggable\n *\n * @param {boolean | object} [options] true/false or An object with event\n * listeners to be fired on drag events (object makes the Interactable\n * draggable)\n * @return {boolean | Interactable} boolean indicating if this can be the\n * target of drag events, or this Interctable\n */\nconst draggable: DraggableMethod = function draggable (this: Interact.Interactable, options?: Interact.DraggableOptions | boolean): any {\n  if (is.object(options)) {\n    this.options.drag.enabled = options.enabled !== false\n    this.setPerAction('drag', options)\n    this.setOnEvents('drag', options)\n\n    if (/^(xy|x|y|start)$/.test(options.lockAxis)) {\n      this.options.drag.lockAxis = options.lockAxis\n    }\n    if (/^(xy|x|y)$/.test(options.startAxis)) {\n      this.options.drag.startAxis = options.startAxis\n    }\n\n    return this\n  }\n\n  if (is.bool(options)) {\n    this.options.drag.enabled = options\n\n    return this\n  }\n\n  return this.options.drag\n}\n\nconst drag: Interact.Plugin = {\n  id: 'actions/drag',\n  install,\n  listeners: {\n    'interactions:before-action-move': beforeMove,\n    'interactions:action-resume': beforeMove,\n\n    // dragmove\n    'interactions:action-move': move,\n    'auto-start:check': arg => {\n      const { interaction, interactable, buttons } = arg\n      const dragOptions = interactable.options.drag\n\n      if (\n        !(dragOptions && dragOptions.enabled) ||\n        // check mouseButton setting if the pointer is down\n        (interaction.pointerIsDown &&\n         /mouse|pointer/.test(interaction.pointerType) &&\n       (buttons & interactable.options.drag.mouseButtons) === 0)\n      ) {\n        return undefined\n      }\n\n      arg.action = {\n        name: 'drag',\n        axis: (dragOptions.lockAxis === 'start'\n          ? dragOptions.startAxis\n          : dragOptions.lockAxis),\n      }\n\n      return false\n    },\n  },\n  draggable,\n  beforeMove,\n  move,\n  defaults: {\n    startAxis : 'xy',\n    lockAxis  : 'xy',\n  } as Interact.DropzoneOptions,\n\n  getCursor () {\n    return 'move'\n  },\n}\n\nexport default drag\n","const domObjects: {\n  init: any\n  document: Document\n  DocumentFragment: typeof DocumentFragment\n  SVGElement: typeof SVGElement\n  SVGSVGElement: typeof SVGSVGElement\n  SVGElementInstance: any\n  Element: typeof Element\n  HTMLElement: typeof HTMLElement\n  Event: typeof Event\n  Touch: typeof Touch\n  PointerEvent: typeof PointerEvent\n} =\n{\n  init,\n  document: null,\n  DocumentFragment: null,\n  SVGElement: null,\n  SVGSVGElement: null,\n  SVGElementInstance: null,\n  Element: null,\n  HTMLElement: null,\n  Event: null,\n  Touch: null,\n  PointerEvent: null,\n}\n\nfunction blank () {}\n\nexport default domObjects\n\nfunction init (window: Window) {\n  const win = window as any\n\n  domObjects.document           = win.document\n  domObjects.DocumentFragment   = win.DocumentFragment   || blank\n  domObjects.SVGElement         = win.SVGElement         || blank\n  domObjects.SVGSVGElement      = win.SVGSVGElement      || blank\n  domObjects.SVGElementInstance = win.SVGElementInstance || blank\n  domObjects.Element            = win.Element            || blank\n  domObjects.HTMLElement        = win.HTMLElement        || domObjects.Element\n\n  domObjects.Event        = win.Event\n  domObjects.Touch        = win.Touch || blank\n  domObjects.PointerEvent = (win.PointerEvent || win.MSPointerEvent)\n}\n","import domObjects from './domObjects'\nimport is from './is'\nimport win from './window'\n\nconst browser = {\n  init,\n  supportsTouch: null as boolean,\n  supportsPointerEvent: null as boolean,\n  isIOS7: null as boolean,\n  isIOS: null as boolean,\n  isIe9: null as boolean,\n  isOperaMobile: null as boolean,\n  prefixedMatchesSelector: null as string,\n  pEventTypes: null as {\n    up: string\n    down: string\n    over: string\n    out: string\n    move: string\n    cancel: string\n  },\n  wheelEvent: null as string,\n}\n\nfunction init (window: any) {\n  const Element = domObjects.Element\n  const navigator  = win.window.navigator\n\n  // Does the browser support touch input?\n  browser.supportsTouch = ('ontouchstart' in window) ||\n    (is.func(window.DocumentTouch) && domObjects.document instanceof window.DocumentTouch)\n\n  // Does the browser support PointerEvents\n  browser.supportsPointerEvent = navigator.pointerEnabled !== false && !!domObjects.PointerEvent\n\n  browser.isIOS = (/iP(hone|od|ad)/.test(navigator.platform))\n\n  // scrolling doesn't change the result of getClientRects on iOS 7\n  browser.isIOS7 = (/iP(hone|od|ad)/.test(navigator.platform) &&\n           /OS 7[^\\d]/.test(navigator.appVersion))\n\n  browser.isIe9 = /MSIE 9/.test(navigator.userAgent)\n\n  // Opera Mobile must be handled differently\n  browser.isOperaMobile = (navigator.appName === 'Opera' &&\n    browser.supportsTouch &&\n    /Presto/.test(navigator.userAgent))\n\n  // prefix matchesSelector\n  browser.prefixedMatchesSelector = 'matches' in Element.prototype\n    ? 'matches'\n    : 'webkitMatchesSelector' in Element.prototype\n      ? 'webkitMatchesSelector'\n      : 'mozMatchesSelector' in Element.prototype\n        ? 'mozMatchesSelector'\n        : 'oMatchesSelector' in Element.prototype\n          ? 'oMatchesSelector'\n          : 'msMatchesSelector'\n\n  browser.pEventTypes = (browser.supportsPointerEvent\n    ? (domObjects.PointerEvent === window.MSPointerEvent\n      ? {\n        up:     'MSPointerUp',\n        down:   'MSPointerDown',\n        over:   'mouseover',\n        out:    'mouseout',\n        move:   'MSPointerMove',\n        cancel: 'MSPointerCancel',\n      }\n      : {\n        up:     'pointerup',\n        down:   'pointerdown',\n        over:   'pointerover',\n        out:    'pointerout',\n        move:   'pointermove',\n        cancel: 'pointercancel',\n      })\n    : null)\n\n  // because Webkit and Opera still use 'mousewheel' event type\n  browser.wheelEvent = 'onmousewheel' in domObjects.document ? 'mousewheel' : 'wheel'\n}\n\nexport default browser\n","import * as Interact from '@interactjs/types/index'\n\nimport browser from './browser'\nimport domObjects from './domObjects'\nimport is from './is'\nimport win, { getWindow } from './window'\n\nexport function nodeContains (parent: Node | Interact.EventTarget, child: Node | Interact.EventTarget) {\n  while (child) {\n    if (child === parent) {\n      return true\n    }\n\n    child = (child as Node).parentNode\n  }\n\n  return false\n}\n\nexport function closest (element: Node, selector: string) {\n  while (is.element(element)) {\n    if (matchesSelector(element, selector)) { return element }\n\n    element = parentNode(element)\n  }\n\n  return null\n}\n\nexport function parentNode (node: Node | Document) {\n  let parent = node.parentNode\n\n  if (is.docFrag(parent)) {\n    // skip past #shado-root fragments\n    // tslint:disable-next-line\n    while ((parent = (parent as any).host) && is.docFrag(parent)) {\n      continue\n    }\n\n    return parent\n  }\n\n  return parent\n}\n\nexport function matchesSelector (element: Interact.Element, selector: string) {\n  // remove /deep/ from selectors if shadowDOM polyfill is used\n  if (win.window !== win.realWindow) {\n    selector = selector.replace(/\\/deep\\//g, ' ')\n  }\n\n  return element[browser.prefixedMatchesSelector](selector)\n}\n\nconst getParent = (el: Node | Document | ShadowRoot) => el.parentNode || (el as ShadowRoot).host\n\n// Test for the element that's \"above\" all other qualifiers\nexport function indexOfDeepestElement (elements: Interact.Element[] | NodeListOf<Element>) {\n  let deepestNodeParents: Node[] = []\n  let deepestNodeIndex: number\n\n  for (let i = 0; i < elements.length; i++) {\n    const currentNode = elements[i]\n    const deepestNode: Node = elements[deepestNodeIndex]\n\n    // node may appear in elements array multiple times\n    if (!currentNode || i === deepestNodeIndex) {\n      continue\n    }\n\n    if (!deepestNode) {\n      deepestNodeIndex = i\n      continue\n    }\n\n    const currentNodeParent = getParent(currentNode)\n    const deepestNodeParent = getParent(deepestNode)\n\n    // check if the deepest or current are document.documentElement/rootElement\n    // - if the current node is, do nothing and continue\n    if (currentNodeParent === currentNode.ownerDocument) {\n      continue\n    }\n    // - if deepest is, update with the current node and continue to next\n    else if (deepestNodeParent === currentNode.ownerDocument) {\n      deepestNodeIndex = i\n      continue\n    }\n\n    // compare zIndex of siblings\n    if (currentNodeParent === deepestNodeParent) {\n      if (zIndexIsHigherThan(currentNode, deepestNode)) {\n        deepestNodeIndex = i\n      }\n\n      continue\n    }\n\n    // populate the ancestry array for the latest deepest node\n    deepestNodeParents = deepestNodeParents.length ? deepestNodeParents : getNodeParents(deepestNode)\n\n    let ancestryStart: Node\n\n    // if the deepest node is an HTMLElement and the current node is a non root svg element\n    if (deepestNode instanceof domObjects.HTMLElement &&\n      currentNode instanceof domObjects.SVGElement &&\n      !(currentNode instanceof domObjects.SVGSVGElement)\n    ) {\n      // TODO: is this check necessary? Was this for HTML elements embedded in SVG?\n      if (currentNode === deepestNodeParent) {\n        continue\n      }\n\n      ancestryStart = currentNode.ownerSVGElement\n    }\n    else {\n      ancestryStart = currentNode\n    }\n\n    const currentNodeParents = getNodeParents(ancestryStart, deepestNode.ownerDocument)\n    let commonIndex = 0\n\n    // get (position of closest common ancestor) + 1\n    while (currentNodeParents[commonIndex] && currentNodeParents[commonIndex] === deepestNodeParents[commonIndex]) {\n      commonIndex++\n    }\n\n    const parents = [\n      currentNodeParents[commonIndex - 1],\n      currentNodeParents[commonIndex],\n      deepestNodeParents[commonIndex],\n    ]\n\n    let child = parents[0].lastChild\n\n    while (child) {\n      if (child === parents[1]) {\n        deepestNodeIndex = i\n        deepestNodeParents = currentNodeParents\n\n        break\n      }\n      else if (child === parents[2]) {\n        break\n      }\n\n      child = child.previousSibling\n    }\n  }\n\n  return deepestNodeIndex\n}\n\nfunction getNodeParents (node: Node, limit?: Node) {\n  const parents: Node[] = []\n  let parent: Node = node\n  let parentParent: Node\n\n  while ((parentParent = getParent(parent)) && parent !== limit && parentParent !== parent.ownerDocument) {\n    parents.unshift(parent)\n    parent = parentParent\n  }\n\n  return parents\n}\n\nfunction zIndexIsHigherThan (higherNode: Node, lowerNode: Node) {\n  const higherIndex = parseInt(getWindow(higherNode).getComputedStyle(higherNode).zIndex, 10) || 0\n  const lowerIndex = parseInt(getWindow(lowerNode).getComputedStyle(lowerNode).zIndex, 10) || 0\n\n  return higherIndex >= lowerIndex\n}\n\nexport function matchesUpTo (element: Interact.Element, selector: string, limit: Node) {\n  while (is.element(element)) {\n    if (matchesSelector(element, selector)) {\n      return true\n    }\n\n    element = parentNode(element) as Interact.Element\n\n    if (element === limit) {\n      return matchesSelector(element, selector)\n    }\n  }\n\n  return false\n}\n\nexport function getActualElement (element: Interact.Element) {\n  return (element instanceof domObjects.SVGElementInstance\n    ? (element as SVGElement).correspondingUseElement\n    : element)\n}\n\nexport function getScrollXY (relevantWindow) {\n  relevantWindow = relevantWindow || win.window\n  return {\n    x: relevantWindow.scrollX || relevantWindow.document.documentElement.scrollLeft,\n    y: relevantWindow.scrollY || relevantWindow.document.documentElement.scrollTop,\n  }\n}\n\nexport function getElementClientRect (element: Interact.Element) {\n  const clientRect = (element instanceof domObjects.SVGElement\n    ? element.getBoundingClientRect()\n    : element.getClientRects()[0])\n\n  return clientRect && {\n    left  : clientRect.left,\n    right : clientRect.right,\n    top   : clientRect.top,\n    bottom: clientRect.bottom,\n    width : clientRect.width  || clientRect.right  - clientRect.left,\n    height: clientRect.height || clientRect.bottom - clientRect.top,\n  }\n}\n\nexport function getElementRect (element: Interact.Element) {\n  const clientRect = getElementClientRect(element)\n\n  if (!browser.isIOS7 && clientRect) {\n    const scroll = getScrollXY(win.getWindow(element))\n\n    clientRect.left   += scroll.x\n    clientRect.right  += scroll.x\n    clientRect.top    += scroll.y\n    clientRect.bottom += scroll.y\n  }\n\n  return clientRect\n}\n\nexport function getPath (node: Node | Document) {\n  const path = []\n\n  while (node) {\n    path.push(node)\n    node = parentNode(node)\n  }\n\n  return path\n}\n\nexport function trySelector (value: Interact.Target) {\n  if (!is.string(value)) { return false }\n\n  // an exception will be raised if it is invalid\n  domObjects.document.querySelector(value)\n  return true\n}\n","export default function extend<T, U extends object> (dest: U & Partial<T>, source: T): T & U {\n  for (const prop in source) {\n    (dest as unknown as T)[prop] = source[prop]\n  }\n\n  const ret = dest as T & U\n\n  return ret\n}\n","import * as Interact from '@interactjs/types/index'\n\nimport { closest, getElementRect, parentNode } from './domUtils'\nimport extend from './extend'\nimport is from './is'\n\nexport function getStringOptionResult (value: any, target: Interact.HasGetRect, element) {\n  if (value === 'parent') { return parentNode(element) }\n\n  if (value === 'self') { return target.getRect(element) }\n\n  return closest(element, value)\n}\n\nexport function resolveRectLike<T extends any[]> (\n  value: Interact.RectResolvable<T>,\n  target?: Interact.HasGetRect,\n  element?: Node,\n  functionArgs?: T,\n) {\n  let returnValue: any = value\n  if (is.string(returnValue)) {\n    returnValue = getStringOptionResult(returnValue, target, element)\n  }\n  else if (is.func(returnValue)) {\n    returnValue = returnValue(...functionArgs)\n  }\n\n  if (is.element(returnValue)) {\n    returnValue = getElementRect(returnValue)\n  }\n\n  return returnValue as Interact.Rect\n}\n\nexport function rectToXY (rect) {\n  return  rect && {\n    x: 'x' in rect ? rect.x : rect.left,\n    y: 'y' in rect ? rect.y : rect.top,\n  }\n}\n\nexport function xywhToTlbr (rect) {\n  if (rect && !('left' in rect && 'top' in rect)) {\n    rect = extend({}, rect)\n\n    rect.left   = rect.x || 0\n    rect.top    = rect.y || 0\n    rect.right  = rect.right   || (rect.left + rect.width)\n    rect.bottom = rect.bottom  || (rect.top + rect.height)\n  }\n\n  return rect\n}\n\nexport function tlbrToXywh (rect) {\n  if (rect && !('x' in rect && 'y' in rect)) {\n    rect = extend({}, rect)\n\n    rect.x      = rect.left || 0\n    rect.y      = rect.top  || 0\n    rect.width  = rect.width  || ((rect.right || 0)  - rect.x)\n    rect.height = rect.height || ((rect.bottom || 0) - rect.y)\n  }\n\n  return rect\n}\n\nexport function addEdges (edges: Interact.EdgeOptions, rect: Interact.Rect, delta: Interact.Point) {\n  if (edges.left)   { rect.left   += delta.x }\n  if (edges.right)  { rect.right  += delta.x }\n  if (edges.top)    { rect.top    += delta.y }\n  if (edges.bottom) { rect.bottom += delta.y }\n\n  rect.width = rect.right - rect.left\n  rect.height = rect.bottom - rect.top\n}\n","import * as Interact from '@interactjs/types/index'\n\nimport { rectToXY, resolveRectLike } from './rect'\n\nexport default function (\n  target: Interact.HasGetRect & { options: Interact.PerActionDefaults },\n  element: Node,\n  actionName?: Interact.ActionName,\n) {\n  const actionOptions = (target.options as any)[actionName]\n  const actionOrigin = actionOptions && actionOptions.origin\n  const origin = actionOrigin || target.options.origin\n\n  const originRect = resolveRectLike(origin, target, element, [target && element])\n\n  return rectToXY(originRect) || { x: 0, y: 0 }\n}\n","import * as Interact from '@interactjs/types/index'\n\nimport extend from './extend'\nimport is from './is'\n\nexport interface NormalizedListeners {\n  [type: string]: Interact.Listener[]\n}\n\nexport default function normalize (\n  type: Interact.EventTypes,\n  listeners?: Interact.ListenersArg | Interact.ListenersArg[],\n  result?: NormalizedListeners,\n): NormalizedListeners {\n  result = result || {}\n\n  if (is.string(type) && type.search(' ') !== -1) {\n    type = split(type)\n  }\n\n  if (is.array(type)) {\n    return type.reduce<NormalizedListeners>(\n      (acc, t) => extend(acc, normalize(t, listeners, result)),\n      result,\n    )\n  }\n\n  // ({ type: fn }) -> ('', { type: fn })\n  if (is.object(type)) {\n    listeners = type\n    type = ''\n  }\n\n  if (is.func(listeners)) {\n    result[type] = result[type] || []\n    result[type].push(listeners)\n  }\n  else if (is.array(listeners)) {\n    for (const l of listeners) {\n      normalize(type, l, result)\n    }\n  }\n  else if (is.object(listeners)) {\n    for (const prefix in listeners) {\n      const combinedTypes = split(prefix).map(p => `${type}${p}`)\n\n      normalize(combinedTypes, listeners[prefix], result)\n    }\n  }\n\n  return result as NormalizedListeners\n}\n\nfunction split (type: string) {\n  return type.trim().split(/ +/)\n}\n","export default (x: number, y: number) =>  Math.sqrt(x * x + y * y)\n","export interface PointerExtend {\n  webkit: RegExp\n  [prefix: string]: RegExp\n}\n\nfunction pointerExtend (dest, source) {\n  for (const prop in source) {\n    const prefixedPropREs = pointerExtend.prefixedPropREs\n    let deprecated = false\n\n    // skip deprecated prefixed properties\n    for (const vendor in prefixedPropREs) {\n      if (prop.indexOf(vendor) === 0 && prefixedPropREs[vendor].test(prop)) {\n        deprecated = true\n        break\n      }\n    }\n\n    if (!deprecated && typeof source[prop] !== 'function') {\n      dest[prop] = source[prop]\n    }\n  }\n  return dest\n}\n\npointerExtend.prefixedPropREs = {\n  webkit: /(Movement[XY]|Radius[XY]|RotationAngle|Force)$/,\n  moz: /(Pressure)$/,\n}\n\nexport default pointerExtend\n","import * as Interact from '@interactjs/types/index'\n\nimport browser from './browser'\nimport dom from './domObjects'\nimport * as domUtils from './domUtils'\nimport hypot from './hypot'\nimport is from './is'\nimport pointerExtend from './pointerExtend'\n\nexport function copyCoords (dest: Interact.CoordsSetMember, src: Interact.CoordsSetMember) {\n  dest.page = dest.page || {} as any\n  dest.page.x = src.page.x\n  dest.page.y = src.page.y\n\n  dest.client = dest.client || {} as any\n  dest.client.x = src.client.x\n  dest.client.y = src.client.y\n\n  dest.timeStamp = src.timeStamp\n}\n\nexport function setCoordDeltas (targetObj: Interact.CoordsSetMember, prev: Interact.CoordsSetMember, cur: Interact.CoordsSetMember) {\n  targetObj.page.x    = cur.page.x    - prev.page.x\n  targetObj.page.y    = cur.page.y    - prev.page.y\n  targetObj.client.x  = cur.client.x  - prev.client.x\n  targetObj.client.y  = cur.client.y  - prev.client.y\n  targetObj.timeStamp = cur.timeStamp - prev.timeStamp\n}\n\nexport function setCoordVelocity (targetObj: Interact.CoordsSetMember, delta: Interact.CoordsSetMember) {\n  const dt = Math.max(delta.timeStamp / 1000, 0.001)\n\n  targetObj.page.x   = delta.page.x / dt\n  targetObj.page.y   = delta.page.y / dt\n  targetObj.client.x = delta.client.x / dt\n  targetObj.client.y = delta.client.y / dt\n  targetObj.timeStamp = dt\n}\n\nexport function setZeroCoords (targetObj: Interact.CoordsSetMember) {\n  targetObj.page.x = 0\n  targetObj.page.y = 0\n  targetObj.client.x = 0\n  targetObj.client.y = 0\n}\n\nexport function isNativePointer  (pointer: any) {\n  return (pointer instanceof dom.Event || pointer instanceof dom.Touch)\n}\n\n// Get specified X/Y coords for mouse or event.touches[0]\nexport function getXY (type, pointer, xy) {\n  xy = xy || {}\n  type = type || 'page'\n\n  xy.x = pointer[type + 'X']\n  xy.y = pointer[type + 'Y']\n\n  return xy\n}\n\nexport function getPageXY (pointer: Interact.PointerType | Interact.InteractEvent, page?: Interact.Point) {\n  page = page || { x: 0, y: 0 }\n\n  // Opera Mobile handles the viewport and scrolling oddly\n  if (browser.isOperaMobile && isNativePointer(pointer)) {\n    getXY('screen', pointer, page)\n\n    page.x += window.scrollX\n    page.y += window.scrollY\n  }\n  else {\n    getXY('page', pointer, page)\n  }\n\n  return page\n}\n\nexport function getClientXY (pointer, client) {\n  client = client || {}\n\n  if (browser.isOperaMobile && isNativePointer(pointer)) {\n    // Opera Mobile handles the viewport and scrolling oddly\n    getXY('screen', pointer, client)\n  }\n  else {\n    getXY('client', pointer, client)\n  }\n\n  return client\n}\n\nexport function getPointerId (pointer) {\n  return is.number(pointer.pointerId) ? pointer.pointerId : pointer.identifier\n}\n\nexport function setCoords (targetObj, pointers: any[], timeStamp: number) {\n  const pointer = (pointers.length > 1\n    ? pointerAverage(pointers)\n    : pointers[0])\n\n  const tmpXY = {} as { x: number, y: number }\n\n  getPageXY(pointer, tmpXY)\n  targetObj.page.x = tmpXY.x\n  targetObj.page.y = tmpXY.y\n\n  getClientXY(pointer, tmpXY)\n  targetObj.client.x = tmpXY.x\n  targetObj.client.y = tmpXY.y\n\n  targetObj.timeStamp = timeStamp\n}\n\nexport function getTouchPair (event) {\n  const touches = []\n\n  // array of touches is supplied\n  if (is.array(event)) {\n    touches[0] = event[0]\n    touches[1] = event[1]\n  }\n  // an event\n  else {\n    if (event.type === 'touchend') {\n      if (event.touches.length === 1) {\n        touches[0] = event.touches[0]\n        touches[1] = event.changedTouches[0]\n      }\n      else if (event.touches.length === 0) {\n        touches[0] = event.changedTouches[0]\n        touches[1] = event.changedTouches[1]\n      }\n    }\n    else {\n      touches[0] = event.touches[0]\n      touches[1] = event.touches[1]\n    }\n  }\n\n  return touches\n}\n\nexport function pointerAverage (pointers: PointerEvent[] | Event[]) {\n  const average = {\n    pageX  : 0,\n    pageY  : 0,\n    clientX: 0,\n    clientY: 0,\n    screenX: 0,\n    screenY: 0,\n  }\n\n  for (const pointer of pointers) {\n    for (const prop in average) {\n      average[prop] += pointer[prop]\n    }\n  }\n  for (const prop in average) {\n    average[prop] /= pointers.length\n  }\n\n  return average\n}\n\nexport function touchBBox (event: Event | Array<(Interact.PointerType) | TouchEvent>) {\n  if (!(event as any).length &&\n      !((event as TouchEvent).touches &&\n        (event as TouchEvent).touches.length > 1)) {\n    return null\n  }\n\n  const touches = getTouchPair(event)\n  const minX = Math.min(touches[0].pageX, touches[1].pageX)\n  const minY = Math.min(touches[0].pageY, touches[1].pageY)\n  const maxX = Math.max(touches[0].pageX, touches[1].pageX)\n  const maxY = Math.max(touches[0].pageY, touches[1].pageY)\n\n  return {\n    x: minX,\n    y: minY,\n    left: minX,\n    top: minY,\n    right: maxX,\n    bottom: maxY,\n    width: maxX - minX,\n    height: maxY - minY,\n  }\n}\n\nexport function touchDistance (event, deltaSource) {\n  const sourceX = deltaSource + 'X'\n  const sourceY = deltaSource + 'Y'\n  const touches = getTouchPair(event)\n\n  const dx = touches[0][sourceX] - touches[1][sourceX]\n  const dy = touches[0][sourceY] - touches[1][sourceY]\n\n  return hypot(dx, dy)\n}\n\nexport function touchAngle (event, deltaSource) {\n  const sourceX = deltaSource + 'X'\n  const sourceY = deltaSource + 'Y'\n  const touches = getTouchPair(event)\n  const dx = touches[1][sourceX] - touches[0][sourceX]\n  const dy = touches[1][sourceY] - touches[0][sourceY]\n  const angle = 180 * Math.atan2(dy, dx) / Math.PI\n\n  return  angle\n}\n\nexport function getPointerType (pointer) {\n  return is.string(pointer.pointerType)\n    ? pointer.pointerType\n    : is.number(pointer.pointerType)\n      ? [undefined, undefined, 'touch', 'pen', 'mouse'][pointer.pointerType]\n      // if the PointerEvent API isn't available, then the \"pointer\" must\n      // be either a MouseEvent, TouchEvent, or Touch object\n      : /touch/.test(pointer.type) || pointer instanceof dom.Touch\n        ? 'touch'\n        : 'mouse'\n}\n\n// [ event.target, event.currentTarget ]\nexport function getEventTargets (event) {\n  const path = is.func(event.composedPath) ? event.composedPath() : event.path\n\n  return [\n    domUtils.getActualElement(path ? path[0] : event.target),\n    domUtils.getActualElement(event.currentTarget),\n  ]\n}\n\nexport function newCoords (): Interact.CoordsSetMember {\n  return {\n    page     : { x: 0, y: 0 },\n    client   : { x: 0, y: 0 },\n    timeStamp: 0,\n  }\n}\n\nexport function coordsToEvent (coords: MockCoords) {\n  const event = {\n    coords,\n    get page () { return this.coords.page },\n    get client () { return this.coords.client },\n    get timeStamp () { return this.coords.timeStamp },\n    get pageX () { return this.coords.page.x },\n    get pageY () { return this.coords.page.y },\n    get clientX () { return this.coords.client.x },\n    get clientY () { return this.coords.client.y },\n    get pointerId () { return this.coords.pointerId },\n    get target () { return this.coords.target },\n    get type () { return this.coords.type },\n    get pointerType () { return this.coords.pointerType },\n    get buttons () { return this.coords.buttons },\n    preventDefault () {},\n  }\n\n  return event as typeof event & Interact.PointerType & Interact.PointerEventType\n}\n\nexport interface MockCoords {\n  page: Interact.Point\n  client: Interact.Point\n  timeStamp?: number\n  pointerId?: any\n  target?: any\n  type?: string\n  pointerType?: string\n  buttons?: number\n}\n\nexport { pointerExtend }\n","import * as Interact from '@interactjs/types/index'\n\nexport class BaseEvent<T extends Interact.ActionName = any> {\n  type: string\n  target: EventTarget\n  currentTarget: EventTarget\n  interactable: Interact.Interactable\n  _interaction: Interact.Interaction<T>\n  timeStamp: any\n  immediatePropagationStopped = false\n  propagationStopped = false\n\n  constructor (interaction: Interact.Interaction) {\n    this._interaction = interaction\n  }\n\n  preventDefault () {}\n\n  /**\n   * Don't call any other listeners (even on the current target)\n   */\n  stopPropagation () {\n    this.propagationStopped = true\n  }\n\n  /**\n   * Don't call listeners on the remaining targets\n   */\n  stopImmediatePropagation () {\n    this.immediatePropagationStopped = this.propagationStopped = true\n  }\n}\n\n// defined outside of class definition to avoid assignment of undefined during\n// construction\nexport interface BaseEvent<T extends Interact.ActionName = any> {\n  interaction: Interact.InteractionProxy<T>\n}\n\n// getters and setters defined here to support typescript 3.6 and below which\n// don't support getter and setters in .d.ts files\nObject.defineProperty(BaseEvent.prototype, 'interaction', {\n  get (this: BaseEvent) { return this._interaction._proxy },\n  set (this: BaseEvent) {},\n})\n\nexport default BaseEvent\n","type Filter<T> = (element: T, index: number, array: T[]) => boolean\n\nexport const contains = <T>(array: T[], target: T) => array.indexOf(target) !== -1\n\nexport const remove = <T>(array: T[], target: T) => array.splice(array.indexOf(target), 1)\n\nexport const merge = <T, U>(target: Array<T | U>, source: U[]) => {\n  for (const item of source) {\n    target.push(item)\n  }\n\n  return target\n}\n\nexport const from = <T = any>(source: ArrayLike<T>) => merge([] as T[], source as T[])\n\nexport const findIndex = <T>(array: T[], func: Filter<T>) => {\n  for (let i = 0; i < array.length; i++) {\n    if (func(array[i], i, array)) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport const find = <T = any>(array: T[], func: Filter<T>) => array[findIndex(array, func)]\n","import { BaseEvent } from '@interactjs/core/BaseEvent'\nimport { InteractEvent } from '@interactjs/core/InteractEvent'\nimport { Interactable } from '@interactjs/core/Interactable'\nimport * as Interact from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\n\nexport class DropEvent extends BaseEvent {\n  target: Interact.Element\n  dropzone: Interactable\n  dragEvent: InteractEvent<'drag'>\n  relatedTarget: Interact.Element\n  draggable: Interactable\n  timeStamp: number\n  propagationStopped = false\n  immediatePropagationStopped = false\n\n  /**\n   * Class of events fired on dropzones during drags with acceptable targets.\n   */\n  constructor (dropState: import('./plugin').DropState, dragEvent: InteractEvent<'drag'>, type: string) {\n    super(dragEvent._interaction)\n\n    const { element, dropzone } = type === 'dragleave'\n      ? dropState.prev\n      : dropState.cur\n\n    this.type          = type\n    this.target        = element\n    this.currentTarget = element\n    this.dropzone      = dropzone\n    this.dragEvent     = dragEvent\n    this.relatedTarget = dragEvent.target\n    this.draggable     = dragEvent.interactable\n    this.timeStamp     = dragEvent.timeStamp\n  }\n\n  /**\n   * If this is a `dropactivate` event, the dropzone element will be\n   * deactivated.\n   *\n   * If this is a `dragmove` or `dragenter`, a `dragleave` will be fired on the\n   * dropzone element and more.\n   */\n  reject () {\n    const { dropState } = this._interaction\n\n    if (\n      (this.type !== 'dropactivate') && (\n        !this.dropzone ||\n        dropState.cur.dropzone !== this.dropzone ||\n        dropState.cur.element !== this.target)) {\n      return\n    }\n\n    dropState.prev.dropzone = this.dropzone\n    dropState.prev.element = this.target\n\n    dropState.rejected = true\n    dropState.events.enter = null\n\n    this.stopImmediatePropagation()\n\n    if (this.type === 'dropactivate') {\n      const activeDrops = dropState.activeDrops\n      const index = arr.findIndex(activeDrops, ({ dropzone, element }) =>\n        dropzone === this.dropzone && element === this.target)\n\n      dropState.activeDrops.splice(index, 1)\n\n      const deactivateEvent = new DropEvent(dropState, this.dragEvent, 'dropdeactivate')\n\n      deactivateEvent.dropzone = this.dropzone\n      deactivateEvent.target = this.target\n\n      this.dropzone.fire(deactivateEvent)\n    }\n    else {\n      this.dropzone.fire(new DropEvent(dropState, this.dragEvent, 'dragleave'))\n    }\n  }\n\n  preventDefault () {}\n\n  stopPropagation () {\n    this.propagationStopped = true\n  }\n\n  stopImmediatePropagation () {\n    this.immediatePropagationStopped = this.propagationStopped = true\n  }\n}\n","import { InteractEvent } from '@interactjs/core/InteractEvent'\nimport { Interactable } from '@interactjs/core/Interactable'\nimport { Scope } from '@interactjs/core/scope'\nimport * as Interact from '@interactjs/types/index'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport getOriginXY from '@interactjs/utils/getOriginXY'\nimport is from '@interactjs/utils/is'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport drag from '../drag/plugin'\n\nimport { DropEvent } from './DropEvent'\n\nexport interface DropzoneMethod {\n  (options: Interact.DropzoneOptions | boolean): Interact.Interactable\n  (): Interact.DropzoneOptions\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    dropzone: DropzoneMethod\n    dropCheck: (\n      dragEvent: InteractEvent,\n      event: Interact.PointerEventType,\n      draggable: Interactable,\n      draggableElement: Interact.Element,\n      dropElemen: Interact.Element,\n      rect: any\n    ) => boolean\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    dropState?: DropState\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    drop: Interact.DropzoneOptions\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface ActionMap {\n    drop?: typeof drop\n  }\n\n  interface Scope {\n    dynamicDrop?: boolean\n  }\n\n  interface SignalArgs {\n    'actions/drop:start': DropSignalArg\n    'actions/drop:move': DropSignalArg\n    'actions/drop:end': DropSignalArg\n  }\n}\n\ndeclare module '@interactjs/core/interactStatic' {\n  export interface InteractStatic {\n    dynamicDrop: (this: Interact.InteractStatic, newValue?: boolean) => boolean | this\n  }\n}\n\ninterface DropSignalArg {\n  interaction: Interact.Interaction\n  dragEvent: Interact.DragEvent\n}\n\nexport interface ActiveDrop {\n  dropzone: Interactable\n  element: Interact.Element\n  rect: Interact.Rect\n}\n\nexport interface DropState {\n  cur: {\n    dropzone: Interactable    // the dropzone a drag target might be dropped into\n    element: Interact.Element // the element at the time of checking\n  }\n  prev: {\n    dropzone: Interactable    // the dropzone that was recently dragged away from\n    element: Interact.Element // the element at the time of checking\n  }\n  rejected: boolean           // wheather the potential drop was rejected from a listener\n  events: any                 // the drop events related to the current drag event\n  activeDrops: ActiveDrop[]\n}\n\nfunction install (scope: Scope) {\n  const {\n    actions,\n    /** @lends module:interact */\n    interactStatic: interact,\n    /** @lends Interactable */\n    Interactable, // eslint-disable-line no-shadow\n    defaults,\n  } = scope\n\n  scope.usePlugin(drag)\n\n  /**\n   *\n   * ```js\n   * interact('.drop').dropzone({\n   *   accept: '.can-drop' || document.getElementById('single-drop'),\n   *   overlap: 'pointer' || 'center' || zeroToOne\n   * }\n   * ```\n   *\n   * Returns or sets whether draggables can be dropped onto this target to\n   * trigger drop events\n   *\n   * Dropzones can receive the following events:\n   *  - `dropactivate` and `dropdeactivate` when an acceptable drag starts and ends\n   *  - `dragenter` and `dragleave` when a draggable enters and leaves the dropzone\n   *  - `dragmove` when a draggable that has entered the dropzone is moved\n   *  - `drop` when a draggable is dropped into this dropzone\n   *\n   * Use the `accept` option to allow only elements that match the given CSS\n   * selector or element. The value can be:\n   *\n   *  - **an Element** - only that element can be dropped into this dropzone.\n   *  - **a string**, - the element being dragged must match it as a CSS selector.\n   *  - **`null`** - accept options is cleared - it accepts any element.\n   *\n   * Use the `overlap` option to set how drops are checked for. The allowed\n   * values are:\n   *\n   *   - `'pointer'`, the pointer must be over the dropzone (default)\n   *   - `'center'`, the draggable element's center must be over the dropzone\n   *   - a number from 0-1 which is the `(intersection area) / (draggable area)`.\n   *   e.g. `0.5` for drop to happen when half of the area of the draggable is\n   *   over the dropzone\n   *\n   * Use the `checker` option to specify a function to check if a dragged element\n   * is over this Interactable.\n   *\n   * @param {boolean | object | null} [options] The new options to be set.\n   * @return {boolean | Interactable} The current setting or this Interactable\n   */\n  Interactable.prototype.dropzone = function (this: Interact.Interactable, options?: Interact.DropzoneOptions | boolean) {\n    return dropzoneMethod(this, options)\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   * .dropChecker(function(dragEvent,         // related dragmove or dragend event\n   *                       event,             // TouchEvent/PointerEvent/MouseEvent\n   *                       dropped,           // bool result of the default checker\n   *                       dropzone,          // dropzone Interactable\n   *                       dropElement,       // dropzone elemnt\n   *                       draggable,         // draggable Interactable\n   *                       draggableElement) {// draggable element\n   *\n   *   return dropped && event.target.hasAttribute('allow-drop')\n   * }\n   * ```\n   */\n  Interactable.prototype.dropCheck = function (this: Interact.Interactable, dragEvent, event, draggable, draggableElement, dropElement, rect) {\n    return dropCheckMethod(this, dragEvent, event, draggable, draggableElement, dropElement, rect)\n  }\n\n  /**\n   * Returns or sets whether the dimensions of dropzone elements are calculated\n   * on every dragmove or only on dragstart for the default dropChecker\n   *\n   * @param {boolean} [newValue] True to check on each move. False to check only\n   * before start\n   * @return {boolean | interact} The current setting or interact\n   */\n  interact.dynamicDrop = function (newValue?: boolean) {\n    if (is.bool(newValue)) {\n      // if (dragging && scope.dynamicDrop !== newValue && !newValue) {\n      //  calcRects(dropzones)\n      // }\n\n      scope.dynamicDrop = newValue\n\n      return interact\n    }\n    return scope.dynamicDrop\n  }\n\n  extend(actions.phaselessTypes, {\n    dragenter: true,\n    dragleave: true,\n    dropactivate: true,\n    dropdeactivate: true,\n    dropmove: true,\n    drop: true,\n  })\n  actions.methodDict.drop = 'dropzone'\n\n  scope.dynamicDrop = false\n\n  defaults.actions.drop = drop.defaults\n}\n\nfunction collectDrops ({ interactables }, draggableElement) {\n  const drops = []\n\n  // collect all dropzones and their elements which qualify for a drop\n  for (const dropzone of interactables.list) {\n    if (!dropzone.options.drop.enabled) { continue }\n\n    const accept = dropzone.options.drop.accept\n\n    // test the draggable draggableElement against the dropzone's accept setting\n    if ((is.element(accept) && accept !== draggableElement) ||\n        (is.string(accept) &&\n        !domUtils.matchesSelector(draggableElement, accept)) ||\n        (is.func(accept) && !accept({ dropzone, draggableElement }))) {\n      continue\n    }\n\n    // query for new elements if necessary\n    const dropElements = is.string(dropzone.target)\n      ? dropzone._context.querySelectorAll(dropzone.target)\n      : is.array(dropzone.target) ? dropzone.target : [dropzone.target]\n\n    for (const dropzoneElement of dropElements) {\n      if (dropzoneElement !== draggableElement) {\n        drops.push({\n          dropzone,\n          element: dropzoneElement,\n        })\n      }\n    }\n  }\n\n  return drops\n}\n\nfunction fireActivationEvents (activeDrops, event) {\n  // loop through all active dropzones and trigger event\n  for (const { dropzone, element } of activeDrops.slice()) {\n    event.dropzone = dropzone\n\n    // set current element as event target\n    event.target = element\n    dropzone.fire(event)\n    event.propagationStopped = event.immediatePropagationStopped = false\n  }\n}\n\n// return a new array of possible drops. getActiveDrops should always be\n// called when a drag has just started or a drag event happens while\n// dynamicDrop is true\nfunction getActiveDrops (scope: Scope, dragElement: Interact.Element) {\n  // get dropzones and their elements that could receive the draggable\n  const activeDrops = collectDrops(scope, dragElement)\n\n  for (const activeDrop of activeDrops) {\n    activeDrop.rect = activeDrop.dropzone.getRect(activeDrop.element)\n  }\n\n  return activeDrops\n}\n\nfunction getDrop ({ dropState, interactable: draggable, element: dragElement }: Partial<Interact.Interaction>, dragEvent, pointerEvent) {\n  const validDrops = []\n\n  // collect all dropzones and their elements which qualify for a drop\n  for (const { dropzone, element: dropzoneElement, rect } of dropState.activeDrops) {\n    validDrops.push(dropzone.dropCheck(dragEvent, pointerEvent, draggable, dragElement, dropzoneElement, rect)\n      ? dropzoneElement\n      : null)\n  }\n\n  // get the most appropriate dropzone based on DOM depth and order\n  const dropIndex = domUtils.indexOfDeepestElement(validDrops)\n\n  return dropState.activeDrops[dropIndex] || null\n}\n\nfunction getDropEvents (interaction: Interact.Interaction, _pointerEvent, dragEvent) {\n  const { dropState } = interaction\n  const dropEvents = {\n    enter     : null,\n    leave     : null,\n    activate  : null,\n    deactivate: null,\n    move      : null,\n    drop      : null,\n  }\n\n  if (dragEvent.type === 'dragstart') {\n    dropEvents.activate = new DropEvent(dropState, dragEvent, 'dropactivate')\n\n    dropEvents.activate.target   = null\n    dropEvents.activate.dropzone = null\n  }\n  if (dragEvent.type === 'dragend') {\n    dropEvents.deactivate = new DropEvent(dropState, dragEvent, 'dropdeactivate')\n\n    dropEvents.deactivate.target   = null\n    dropEvents.deactivate.dropzone = null\n  }\n\n  if (dropState.rejected) {\n    return dropEvents\n  }\n\n  if (dropState.cur.element !== dropState.prev.element) {\n    // if there was a previous dropzone, create a dragleave event\n    if (dropState.prev.dropzone) {\n      dropEvents.leave = new DropEvent(dropState, dragEvent, 'dragleave')\n\n      dragEvent.dragLeave    = dropEvents.leave.target   = dropState.prev.element\n      dragEvent.prevDropzone = dropEvents.leave.dropzone = dropState.prev.dropzone\n    }\n    // if dropzone is not null, create a dragenter event\n    if (dropState.cur.dropzone) {\n      dropEvents.enter = new DropEvent(dropState, dragEvent, 'dragenter')\n\n      dragEvent.dragEnter = dropState.cur.element\n      dragEvent.dropzone = dropState.cur.dropzone\n    }\n  }\n\n  if (dragEvent.type === 'dragend' && dropState.cur.dropzone) {\n    dropEvents.drop = new DropEvent(dropState, dragEvent, 'drop')\n\n    dragEvent.dropzone = dropState.cur.dropzone\n    dragEvent.relatedTarget = dropState.cur.element\n  }\n  if (dragEvent.type === 'dragmove' && dropState.cur.dropzone) {\n    dropEvents.move = new DropEvent(dropState, dragEvent, 'dropmove')\n\n    dropEvents.move.dragmove = dragEvent\n    dragEvent.dropzone = dropState.cur.dropzone\n  }\n\n  return dropEvents\n}\n\nfunction fireDropEvents (interaction: Interact.Interaction, events) {\n  const { dropState } = interaction\n  const {\n    activeDrops,\n    cur,\n    prev,\n  } = dropState\n\n  if (events.leave) { prev.dropzone.fire(events.leave) }\n  if (events.move) { cur.dropzone.fire(events.move) }\n  if (events.enter) { cur.dropzone.fire(events.enter) }\n  if (events.drop) { cur.dropzone.fire(events.drop) }\n\n  if (events.deactivate) {\n    fireActivationEvents(activeDrops, events.deactivate)\n  }\n\n  dropState.prev.dropzone  = cur.dropzone\n  dropState.prev.element = cur.element\n}\n\nfunction onEventCreated ({ interaction, iEvent, event }: Interact.DoPhaseArg<'drag', Interact.EventPhase>, scope) {\n  if (iEvent.type !== 'dragmove' && iEvent.type !== 'dragend') { return }\n\n  const { dropState } = interaction\n\n  if (scope.dynamicDrop) {\n    dropState.activeDrops = getActiveDrops(scope, interaction.element)\n  }\n\n  const dragEvent = iEvent\n  const dropResult = getDrop(interaction, dragEvent, event)\n\n  // update rejected status\n  dropState.rejected = dropState.rejected &&\n    !!dropResult &&\n    dropResult.dropzone === dropState.cur.dropzone &&\n    dropResult.element === dropState.cur.element\n\n  dropState.cur.dropzone  = dropResult && dropResult.dropzone\n  dropState.cur.element = dropResult && dropResult.element\n\n  dropState.events = getDropEvents(interaction, event, dragEvent)\n}\n\nfunction dropzoneMethod (interactable: Interact.Interactable): Interact.DropzoneOptions\nfunction dropzoneMethod (interactable: Interact.Interactable, options: Interact.DropzoneOptions | boolean)\nfunction dropzoneMethod (interactable: Interact.Interactable, options?: Interact.DropzoneOptions | boolean) {\n  if (is.object(options)) {\n    interactable.options.drop.enabled = options.enabled !== false\n\n    if (options.listeners) {\n      const normalized = normalizeListeners(options.listeners)\n      // rename 'drop' to '' as it will be prefixed with 'drop'\n      const corrected = Object.keys(normalized).reduce((acc, type) => {\n        const correctedType = /^(enter|leave)/.test(type)\n          ? `drag${type}`\n          : /^(activate|deactivate|move)/.test(type)\n            ? `drop${type}`\n            : type\n\n        acc[correctedType] = normalized[type]\n\n        return acc\n      }, {})\n\n      interactable.off(interactable.options.drop.listeners)\n      interactable.on(corrected)\n      interactable.options.drop.listeners = corrected\n    }\n\n    if (is.func(options.ondrop)) { interactable.on('drop', options.ondrop) }\n    if (is.func(options.ondropactivate)) { interactable.on('dropactivate', options.ondropactivate) }\n    if (is.func(options.ondropdeactivate)) { interactable.on('dropdeactivate', options.ondropdeactivate) }\n    if (is.func(options.ondragenter)) { interactable.on('dragenter', options.ondragenter) }\n    if (is.func(options.ondragleave)) { interactable.on('dragleave', options.ondragleave) }\n    if (is.func(options.ondropmove)) { interactable.on('dropmove', options.ondropmove) }\n\n    if (/^(pointer|center)$/.test(options.overlap as string)) {\n      interactable.options.drop.overlap = options.overlap\n    }\n    else if (is.number(options.overlap)) {\n      interactable.options.drop.overlap = Math.max(Math.min(1, options.overlap), 0)\n    }\n    if ('accept' in options) {\n      interactable.options.drop.accept = options.accept\n    }\n    if ('checker' in options) {\n      interactable.options.drop.checker = options.checker\n    }\n\n    return interactable\n  }\n\n  if (is.bool(options)) {\n    interactable.options.drop.enabled = options\n\n    return interactable\n  }\n\n  return interactable.options.drop\n}\n\nfunction dropCheckMethod (\n  interactable: Interact.Interactable,\n  dragEvent: InteractEvent,\n  event: Interact.PointerEventType,\n  draggable: Interact.Interactable,\n  draggableElement: Interact.Element,\n  dropElement: Interact.Element,\n  rect: any,\n) {\n  let dropped = false\n\n  // if the dropzone has no rect (eg. display: none)\n  // call the custom dropChecker or just return false\n  if (!(rect = rect || interactable.getRect(dropElement))) {\n    return (interactable.options.drop.checker\n      ? interactable.options.drop.checker(dragEvent, event, dropped, interactable, dropElement, draggable, draggableElement)\n      : false)\n  }\n\n  const dropOverlap = interactable.options.drop.overlap\n\n  if (dropOverlap === 'pointer') {\n    const origin = getOriginXY(draggable, draggableElement, 'drag')\n    const page = pointerUtils.getPageXY(dragEvent)\n\n    page.x += origin.x\n    page.y += origin.y\n\n    const horizontal = (page.x > rect.left) && (page.x < rect.right)\n    const vertical   = (page.y > rect.top) && (page.y < rect.bottom)\n\n    dropped = horizontal && vertical\n  }\n\n  const dragRect = draggable.getRect(draggableElement)\n\n  if (dragRect && dropOverlap === 'center') {\n    const cx = dragRect.left + dragRect.width  / 2\n    const cy = dragRect.top  + dragRect.height / 2\n\n    dropped = cx >= rect.left && cx <= rect.right && cy >= rect.top && cy <= rect.bottom\n  }\n\n  if (dragRect && is.number(dropOverlap)) {\n    const overlapArea  = (Math.max(0, Math.min(rect.right, dragRect.right) - Math.max(rect.left, dragRect.left)) *\n                          Math.max(0, Math.min(rect.bottom, dragRect.bottom) - Math.max(rect.top, dragRect.top)))\n\n    const overlapRatio = overlapArea / (dragRect.width * dragRect.height)\n\n    dropped = overlapRatio >= dropOverlap\n  }\n\n  if (interactable.options.drop.checker) {\n    dropped = interactable.options.drop.checker(dragEvent, event, dropped, interactable, dropElement, draggable, draggableElement)\n  }\n\n  return dropped\n}\n\nconst drop: Interact.Plugin = {\n  id: 'actions/drop',\n  install,\n  listeners: {\n    'interactions:before-action-start': ({ interaction }) => {\n      if (interaction.prepared.name !== 'drag') { return }\n\n      interaction.dropState = {\n        cur: {\n          dropzone: null,\n          element: null,\n        },\n        prev: {\n          dropzone: null,\n          element: null,\n        },\n        rejected: null,\n        events: null,\n        activeDrops: [],\n      }\n    },\n\n    'interactions:after-action-start': ({ interaction, event, iEvent: dragEvent }: Interact.DoPhaseArg<'drag', Interact.EventPhase>, scope) => {\n      if (interaction.prepared.name !== 'drag') { return }\n\n      const { dropState } = interaction\n\n      // reset active dropzones\n      dropState.activeDrops = null\n      dropState.events = null\n      dropState.activeDrops = getActiveDrops(scope, interaction.element)\n      dropState.events = getDropEvents(interaction, event, dragEvent)\n\n      if (dropState.events.activate) {\n        fireActivationEvents(dropState.activeDrops, dropState.events.activate)\n        scope.fire('actions/drop:start', { interaction, dragEvent })\n      }\n    },\n\n    // FIXME proper signal types\n    'interactions:action-move': onEventCreated,\n    'interactions:action-end': onEventCreated,\n\n    'interactions:after-action-move': function fireDropAfterMove ({ interaction, iEvent: dragEvent }: Interact.DoPhaseArg<'drag', Interact.EventPhase>, scope) {\n      if (interaction.prepared.name !== 'drag') { return }\n\n      fireDropEvents(interaction, interaction.dropState.events)\n\n      scope.fire('actions/drop:move', { interaction, dragEvent })\n      interaction.dropState.events = {}\n    },\n\n    'interactions:after-action-end': ({ interaction, iEvent: dragEvent }: Interact.DoPhaseArg<'drag', Interact.EventPhase>, scope) => {\n      if (interaction.prepared.name !== 'drag') { return }\n\n      fireDropEvents(interaction, interaction.dropState.events)\n      scope.fire('actions/drop:end', { interaction, dragEvent })\n    },\n\n    'interactions:stop': ({ interaction }) => {\n      if (interaction.prepared.name !== 'drag') { return }\n\n      const { dropState } = interaction\n\n      if (dropState) {\n        dropState.activeDrops = null\n        dropState.events = null\n        dropState.cur.dropzone = null\n        dropState.cur.element = null\n        dropState.prev.dropzone = null\n        dropState.prev.element = null\n        dropState.rejected = false\n      }\n    },\n  },\n  getActiveDrops,\n  getDrop,\n  getDropEvents,\n  fireDropEvents,\n  defaults: {\n    enabled: false,\n    accept : null,\n    overlap: 'pointer',\n  } as Interact.DropzoneOptions,\n}\n\nexport default drop\n","import * as Interact from '@interactjs/types/index'\nimport is from '@interactjs/utils/is'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nexport type GesturableMethod = Interact.ActionMethod<Interact.GesturableOptions>\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    gesture?: {\n      angle: number           // angle from first to second touch\n      distance: number\n      scale: number           // gesture.distance / gesture.startDistance\n      startAngle: number      // angle of line joining two touches\n      startDistance: number   // distance between two touches of touchStart\n    }\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    gesturable: GesturableMethod\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    gesture: Interact.GesturableOptions\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface ActionMap {\n    gesture?: typeof gesture\n  }\n}\n\nexport interface GestureEvent extends Interact.InteractEvent<'gesture'> {\n  distance: number\n  angle: number\n  da: number // angle change\n  scale: number // ratio of distance start to current event\n  ds: number // scale change\n  box: Interact.Rect // enclosing box of all points\n  touches: Interact.PointerType[]\n}\n\nexport interface GestureSignalArg extends Interact.DoPhaseArg<'gesture', Interact.EventPhase> {\n  iEvent: GestureEvent\n  interaction: Interact.Interaction<'gesture'>\n}\n\nfunction install (scope: Interact.Scope) {\n  const {\n    actions,\n    Interactable,\n    defaults,\n  } = scope\n\n  /**\n   * ```js\n   * interact(element).gesturable({\n   *     onstart: function (event) {},\n   *     onmove : function (event) {},\n   *     onend  : function (event) {},\n   *\n   *     // limit multiple gestures.\n   *     // See the explanation in {@link Interactable.draggable} example\n   *     max: Infinity,\n   *     maxPerElement: 1,\n   * })\n   *\n   * var isGestureable = interact(element).gesturable()\n   * ```\n   *\n   * Gets or sets whether multitouch gestures can be performed on the target\n   *\n   * @param {boolean | object} [options] true/false or An object with event\n   * listeners to be fired on gesture events (makes the Interactable gesturable)\n   * @return {boolean | Interactable} A boolean indicating if this can be the\n   * target of gesture events, or this Interactable\n   */\n  Interactable.prototype.gesturable = function (this: Interact.Interactable, options: Interact.GesturableOptions | boolean) {\n    if (is.object(options)) {\n      this.options.gesture.enabled = options.enabled !== false\n      this.setPerAction('gesture', options)\n      this.setOnEvents('gesture', options)\n\n      return this\n    }\n\n    if (is.bool(options)) {\n      this.options.gesture.enabled = options\n\n      return this\n    }\n\n    return this.options.gesture as Interact.Options\n  } as GesturableMethod\n\n  actions.map.gesture = gesture\n  actions.methodDict.gesture = 'gesturable'\n\n  defaults.actions.gesture = gesture.defaults\n}\n\nfunction updateGestureProps ({ interaction, iEvent, phase }: GestureSignalArg) {\n  if (interaction.prepared.name !== 'gesture') { return }\n\n  const pointers = interaction.pointers.map(p => p.pointer)\n  const starting = phase === 'start'\n  const ending = phase === 'end'\n  const deltaSource = interaction.interactable.options.deltaSource\n\n  iEvent.touches = [pointers[0], pointers[1]]\n\n  if (starting) {\n    iEvent.distance = pointerUtils.touchDistance(pointers, deltaSource)\n    iEvent.box      = pointerUtils.touchBBox(pointers)\n    iEvent.scale    = 1\n    iEvent.ds       = 0\n    iEvent.angle    = pointerUtils.touchAngle(pointers, deltaSource)\n    iEvent.da       = 0\n\n    interaction.gesture.startDistance = iEvent.distance\n    interaction.gesture.startAngle = iEvent.angle\n  }\n  else if (ending) {\n    const prevEvent = interaction.prevEvent as GestureEvent\n\n    iEvent.distance = prevEvent.distance\n    iEvent.box      = prevEvent.box\n    iEvent.scale    = prevEvent.scale\n    iEvent.ds       = 0\n    iEvent.angle    = prevEvent.angle\n    iEvent.da       = 0\n  }\n  else {\n    iEvent.distance = pointerUtils.touchDistance(pointers, deltaSource)\n    iEvent.box      = pointerUtils.touchBBox(pointers)\n    iEvent.scale    = iEvent.distance / interaction.gesture.startDistance\n    iEvent.angle    = pointerUtils.touchAngle(pointers, deltaSource)\n\n    iEvent.ds = iEvent.scale - interaction.gesture.scale\n    iEvent.da = iEvent.angle - interaction.gesture.angle\n  }\n\n  interaction.gesture.distance = iEvent.distance\n  interaction.gesture.angle = iEvent.angle\n\n  if (is.number(iEvent.scale) &&\n      iEvent.scale !== Infinity &&\n      !isNaN(iEvent.scale)) {\n    interaction.gesture.scale = iEvent.scale\n  }\n}\n\nconst gesture: Interact.Plugin = {\n  id: 'actions/gesture',\n  before: ['actions/drag', 'actions/resize'],\n  install,\n  listeners: {\n    'interactions:action-start': updateGestureProps,\n    'interactions:action-move': updateGestureProps,\n    'interactions:action-end': updateGestureProps,\n\n    'interactions:new': ({ interaction }) => {\n      interaction.gesture = {\n        angle: 0,\n        distance: 0,\n        scale: 1,\n        startAngle: 0,\n        startDistance: 0,\n      }\n    },\n\n    'auto-start:check': arg => {\n      if (arg.interaction.pointers.length < 2) {\n        return undefined\n      }\n\n      const gestureOptions = arg.interactable.options.gesture\n\n      if (!(gestureOptions && gestureOptions.enabled)) {\n        return undefined\n      }\n\n      arg.action = { name: 'gesture' }\n\n      return false\n    },\n  },\n\n  defaults: {\n  },\n\n  getCursor () {\n    return ''\n  },\n}\n\nexport default gesture\n","import { Interaction } from '@interactjs/core/Interaction'\nimport { Scope } from '@interactjs/core/scope'\nimport * as Interact from '@interactjs/types/index'\nimport * as dom from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\nexport type EdgeName = 'top' | 'left' | 'bottom' | 'right'\n\nexport type ResizableMethod = Interact.ActionMethod<Interact.ResizableOptions>\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    resizable: ResizableMethod\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    resizeAxes: 'x' | 'y' | 'xy'\n    resizeStartAspectRatio: number\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    resize: Interact.ResizableOptions\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface ActionMap {\n    resize?: typeof resize\n  }\n}\n\nexport interface ResizeEvent<P extends Interact.EventPhase = Interact.EventPhase> extends Interact.InteractEvent<'resize', P> {\n  deltaRect?: Interact.FullRect\n  edges?: Interact.ActionProps['edges']\n}\n\nfunction install (scope: Scope) {\n  const {\n    actions,\n    browser,\n    /** @lends Interactable */\n    Interactable, // tslint:disable-line no-shadowed-variable\n    defaults,\n  } = scope\n\n  // Less Precision with touch input\n\n  resize.cursors = initCursors(browser)\n  resize.defaultMargin = browser.supportsTouch || browser.supportsPointerEvent ? 20 : 10\n\n  /**\n   * ```js\n   * interact(element).resizable({\n   *   onstart: function (event) {},\n   *   onmove : function (event) {},\n   *   onend  : function (event) {},\n   *\n   *   edges: {\n   *     top   : true,       // Use pointer coords to check for resize.\n   *     left  : false,      // Disable resizing from left edge.\n   *     bottom: '.resize-s',// Resize if pointer target matches selector\n   *     right : handleEl    // Resize if pointer target is the given Element\n   *   },\n   *\n   *     // Width and height can be adjusted independently. When `true`, width and\n   *     // height are adjusted at a 1:1 ratio.\n   *     square: false,\n   *\n   *     // Width and height can be adjusted independently. When `true`, width and\n   *     // height maintain the aspect ratio they had when resizing started.\n   *     preserveAspectRatio: false,\n   *\n   *   // a value of 'none' will limit the resize rect to a minimum of 0x0\n   *   // 'negate' will allow the rect to have negative width/height\n   *   // 'reposition' will keep the width/height positive by swapping\n   *   // the top and bottom edges and/or swapping the left and right edges\n   *   invert: 'none' || 'negate' || 'reposition'\n   *\n   *   // limit multiple resizes.\n   *   // See the explanation in the {@link Interactable.draggable} example\n   *   max: Infinity,\n   *   maxPerElement: 1,\n   * })\n   *\n   * var isResizeable = interact(element).resizable()\n   * ```\n   *\n   * Gets or sets whether resize actions can be performed on the target\n   *\n   * @param {boolean | object} [options] true/false or An object with event\n   * listeners to be fired on resize events (object makes the Interactable\n   * resizable)\n   * @return {boolean | Interactable} A boolean indicating if this can be the\n   * target of resize elements, or this Interactable\n   */\n  Interactable.prototype.resizable = function (this: Interact.Interactable, options: Interact.ResizableOptions | boolean) {\n    return resizable(this, options, scope)\n  } as ResizableMethod\n\n  actions.map.resize = resize\n  actions.methodDict.resize = 'resizable'\n\n  defaults.actions.resize = resize.defaults\n}\n\nfunction resizeChecker (arg) {\n  const { interaction, interactable, element, rect, buttons } = arg\n\n  if (!rect) { return undefined }\n\n  const page = extend({}, interaction.coords.cur.page)\n  const resizeOptions = interactable.options.resize\n\n  if (\n    !(resizeOptions && resizeOptions.enabled) ||\n    // check mouseButton setting if the pointer is down\n    (interaction.pointerIsDown &&\n     /mouse|pointer/.test(interaction.pointerType) &&\n   (buttons & resizeOptions.mouseButtons) === 0)\n  ) {\n    return undefined\n  }\n\n  // if using resize.edges\n  if (is.object(resizeOptions.edges)) {\n    const resizeEdges = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false,\n    }\n\n    for (const edge in resizeEdges) {\n      resizeEdges[edge] = checkResizeEdge(edge,\n        resizeOptions.edges[edge],\n        page,\n        interaction._latestPointer.eventTarget,\n        element,\n        rect,\n        resizeOptions.margin || resize.defaultMargin)\n    }\n\n    resizeEdges.left = resizeEdges.left && !resizeEdges.right\n    resizeEdges.top  = resizeEdges.top  && !resizeEdges.bottom\n\n    if (resizeEdges.left || resizeEdges.right || resizeEdges.top || resizeEdges.bottom) {\n      arg.action = {\n        name: 'resize',\n        edges: resizeEdges,\n      }\n    }\n  }\n  else {\n    const right  = resizeOptions.axis !== 'y' && page.x > (rect.right  - resize.defaultMargin)\n    const bottom = resizeOptions.axis !== 'x' && page.y > (rect.bottom - resize.defaultMargin)\n\n    if (right || bottom) {\n      arg.action = {\n        name: 'resize',\n        axes: (right ? 'x' : '') + (bottom ? 'y' : ''),\n      }\n    }\n  }\n\n  return arg.action ? false : undefined\n}\n\nfunction resizable (interactable: Interact.Interactable, options: Interact.OrBoolean<Interact.ResizableOptions> | boolean, scope: Scope) {\n  if (is.object(options)) {\n    interactable.options.resize.enabled = options.enabled !== false\n    interactable.setPerAction('resize', options)\n    interactable.setOnEvents('resize', options)\n\n    if (is.string(options.axis) && /^x$|^y$|^xy$/.test(options.axis)) {\n      interactable.options.resize.axis = options.axis\n    }\n    else if (options.axis === null) {\n      interactable.options.resize.axis = scope.defaults.actions.resize.axis\n    }\n\n    if (is.bool(options.preserveAspectRatio)) {\n      interactable.options.resize.preserveAspectRatio = options.preserveAspectRatio\n    }\n    else if (is.bool(options.square)) {\n      interactable.options.resize.square = options.square\n    }\n\n    return interactable\n  }\n  if (is.bool(options)) {\n    interactable.options.resize.enabled = options\n\n    return interactable\n  }\n  return interactable.options.resize\n}\n\nfunction checkResizeEdge (\n  name: string,\n  value: any,\n  page: Interact.Point,\n  element: Node,\n  interactableElement: Interact.Element,\n  rect: Interact.Rect,\n  margin: number,\n) {\n  // false, '', undefined, null\n  if (!value) { return false }\n\n  // true value, use pointer coords and element rect\n  if (value === true) {\n    // if dimensions are negative, \"switch\" edges\n    const width  = is.number(rect.width) ? rect.width  : rect.right  - rect.left\n    const height = is.number(rect.height) ? rect.height : rect.bottom - rect.top\n\n    // don't use margin greater than half the relevent dimension\n    margin = Math.min(margin, Math.abs((name === 'left' || name === 'right' ? width : height) / 2))\n\n    if (width < 0) {\n      if      (name === 'left')  { name = 'right' }\n      else if (name === 'right') { name = 'left'  }\n    }\n    if (height < 0) {\n      if      (name === 'top')    { name = 'bottom' }\n      else if (name === 'bottom') { name = 'top'    }\n    }\n\n    if (name === 'left') { return page.x < ((width  >= 0 ? rect.left : rect.right) + margin) }\n    if (name === 'top') { return page.y < ((height >= 0 ? rect.top : rect.bottom) + margin) }\n\n    if (name === 'right') { return page.x > ((width  >= 0 ? rect.right : rect.left) - margin) }\n    if (name === 'bottom') { return page.y > ((height >= 0 ? rect.bottom : rect.top) - margin) }\n  }\n\n  // the remaining checks require an element\n  if (!is.element(element)) { return false }\n\n  return is.element(value)\n  // the value is an element to use as a resize handle\n    ? value === element\n    // otherwise check if element matches value as selector\n    : dom.matchesUpTo(element, value, interactableElement)\n}\n\nfunction initCursors (browser: typeof import ('@interactjs/utils/browser').default) {\n  return (browser.isIe9 ? {\n    x : 'e-resize',\n    y : 's-resize',\n    xy: 'se-resize',\n\n    top        : 'n-resize',\n    left       : 'w-resize',\n    bottom     : 's-resize',\n    right      : 'e-resize',\n    topleft    : 'se-resize',\n    bottomright: 'se-resize',\n    topright   : 'ne-resize',\n    bottomleft : 'ne-resize',\n  } : {\n    x : 'ew-resize',\n    y : 'ns-resize',\n    xy: 'nwse-resize',\n\n    top        : 'ns-resize',\n    left       : 'ew-resize',\n    bottom     : 'ns-resize',\n    right      : 'ew-resize',\n    topleft    : 'nwse-resize',\n    bottomright: 'nwse-resize',\n    topright   : 'nesw-resize',\n    bottomleft : 'nesw-resize',\n  })\n}\n\nfunction start ({ iEvent, interaction }: { iEvent: Interact.InteractEvent<any, any>, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) {\n    return\n  }\n\n  const resizeEvent = iEvent as ResizeEvent\n  const rect = interaction.rect\n\n  interaction._rects = {\n    start: extend({}, rect),\n    corrected: extend({}, rect),\n    previous: extend({}, rect),\n    delta: {\n      left: 0,\n      right : 0,\n      width : 0,\n      top : 0,\n      bottom: 0,\n      height: 0,\n    },\n  }\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = interaction._rects.corrected\n  resizeEvent.deltaRect = interaction._rects.delta\n}\n\nfunction move ({ iEvent, interaction }: { iEvent: Interact.InteractEvent<any, any>, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) { return }\n\n  const resizeEvent = iEvent as ResizeEvent\n  const resizeOptions = interaction.interactable.options.resize\n  const invert = resizeOptions.invert\n  const invertible = invert === 'reposition' || invert === 'negate'\n\n  // eslint-disable-next-line no-shadow\n  const current = interaction.rect\n  const { start: startRect, corrected, delta: deltaRect, previous } = interaction._rects\n\n  extend(previous, corrected)\n\n  if (invertible) {\n    // if invertible, copy the current rect\n    extend(corrected, current)\n\n    if (invert === 'reposition') {\n      // swap edge values if necessary to keep width/height positive\n      if (corrected.top > corrected.bottom) {\n        const swap = corrected.top\n\n        corrected.top = corrected.bottom\n        corrected.bottom = swap\n      }\n      if (corrected.left > corrected.right) {\n        const swap = corrected.left\n\n        corrected.left = corrected.right\n        corrected.right = swap\n      }\n    }\n  }\n  else {\n    // if not invertible, restrict to minimum of 0x0 rect\n    corrected.top    = Math.min(current.top, startRect.bottom)\n    corrected.bottom = Math.max(current.bottom, startRect.top)\n    corrected.left   = Math.min(current.left, startRect.right)\n    corrected.right  = Math.max(current.right, startRect.left)\n  }\n\n  corrected.width  = corrected.right  - corrected.left\n  corrected.height = corrected.bottom - corrected.top\n\n  for (const edge in corrected) {\n    deltaRect[edge] = corrected[edge] - previous[edge]\n  }\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = corrected\n  resizeEvent.deltaRect = deltaRect\n}\n\nfunction end ({ iEvent, interaction }: { iEvent: Interact.InteractEvent<any, any>, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) { return }\n\n  const resizeEvent = iEvent as ResizeEvent\n\n  resizeEvent.edges = interaction.prepared.edges\n  resizeEvent.rect = interaction._rects.corrected\n  resizeEvent.deltaRect = interaction._rects.delta\n}\n\nfunction updateEventAxes ({ iEvent, interaction }: { iEvent: Interact.InteractEvent<any, any>, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.resizeAxes) { return }\n\n  const options = interaction.interactable.options\n  const resizeEvent = iEvent as ResizeEvent\n\n  if (options.resize.square) {\n    if (interaction.resizeAxes === 'y') {\n      resizeEvent.delta.x = resizeEvent.delta.y\n    }\n    else {\n      resizeEvent.delta.y = resizeEvent.delta.x\n    }\n    resizeEvent.axes = 'xy'\n  }\n  else {\n    resizeEvent.axes = interaction.resizeAxes\n\n    if (interaction.resizeAxes === 'x') {\n      resizeEvent.delta.y = 0\n    }\n    else if (interaction.resizeAxes === 'y') {\n      resizeEvent.delta.x = 0\n    }\n  }\n}\n\nconst resize: Interact.Plugin = {\n  id: 'actions/resize',\n  before: ['actions/drag'],\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.resizeAxes = 'xy'\n    },\n\n    'interactions:action-start': arg => {\n      start(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-move': arg => {\n      move(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-end': end,\n    'auto-start:check': resizeChecker,\n  },\n\n  defaults: {\n    square: false,\n    preserveAspectRatio: false,\n    axis: 'xy',\n\n    // use default margin\n    margin: NaN,\n\n    // object with props left, right, top, bottom which are\n    // true/false values to resize when the pointer is over that edge,\n    // CSS selectors to match the handles for each direction\n    // or the Elements for each handle\n    edges: null,\n\n    // a value of 'none' will limit the resize rect to a minimum of 0x0\n    // 'negate' will alow the rect to have negative width/height\n    // 'reposition' will keep the width/height positive by swapping\n    // the top and bottom edges and/or swapping the left and right edges\n    invert: 'none',\n  } as Interact.ResizableOptions,\n\n  cursors: null as ReturnType<typeof initCursors>,\n\n  getCursor ({ edges, axis, name }: Interact.ActionProps) {\n    const cursors = resize.cursors\n    let result: string = null\n\n    if (axis) {\n      result = cursors[name + axis]\n    }\n    else if (edges) {\n      let cursorKey = ''\n\n      for (const edge of ['top', 'bottom', 'left', 'right']) {\n        if (edges[edge]) {\n          cursorKey += edge\n        }\n      }\n\n      result = cursors[cursorKey]\n    }\n\n    return result\n  },\n\n  defaultMargin: null as number,\n}\n\nexport default resize\n","import * as Interact from '@interactjs/types/index'\n\nimport drag from './drag/plugin'\nimport drop from './drop/plugin'\nimport gesture from './gesture/plugin'\nimport resize from './resize/plugin'\n\nexport default {\n  id: 'actions',\n  install (scope: Interact.Scope) {\n    scope.usePlugin(gesture)\n    scope.usePlugin(resize)\n    scope.usePlugin(drag)\n    scope.usePlugin(drop)\n  },\n}\n","export type ArrangeEvent = {}\nexport type ArrangeMode = {}\n\nexport default {}\n","let lastTime = 0\nlet request\nlet cancel\n\nfunction init (window) {\n  request = window.requestAnimationFrame\n  cancel = window.cancelAnimationFrame\n\n  if (!request) {\n    const vendors = ['ms', 'moz', 'webkit', 'o']\n\n    for (const vendor of vendors) {\n      request = window[`${vendor}RequestAnimationFrame`]\n      cancel = window[`${vendor}CancelAnimationFrame`] || window[`${vendor}CancelRequestAnimationFrame`]\n    }\n  }\n\n  if (!request) {\n    request = callback => {\n      const currTime = Date.now()\n      const timeToCall = Math.max(0, 16 - (currTime - lastTime))\n      // eslint-disable-next-line standard/no-callback-literal\n      const token = setTimeout(() => { callback(currTime + timeToCall) },\n        timeToCall)\n\n      lastTime = currTime + timeToCall\n      return token\n    }\n\n    cancel = token => clearTimeout(token)\n  }\n}\n\nexport default {\n  request: callback => request(callback),\n  cancel: token => cancel(token),\n  init,\n}\n","import * as Interact from '@interactjs/types/index'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport raf from '@interactjs/utils/raf'\nimport { getStringOptionResult } from '@interactjs/utils/rect'\nimport { getWindow } from '@interactjs/utils/window'\n\ntype Scope = import ('@interactjs/core/scope').Scope\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    autoScroll: typeof autoScroll\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    autoScroll?: typeof autoScroll\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface PerActionDefaults {\n    autoScroll?: AutoScrollOptions\n  }\n}\n\nexport interface AutoScrollOptions {\n  container?: Window | HTMLElement\n  margin?: number\n  distance?: number\n  interval?: number\n  speed?: number\n  enabled?: boolean\n}\n\nfunction install (scope: Scope) {\n  const {\n    defaults,\n    actions,\n  } = scope\n\n  scope.autoScroll = autoScroll\n  autoScroll.now = () => scope.now()\n\n  actions.phaselessTypes.autoscroll = true\n  defaults.perAction.autoScroll = autoScroll.defaults\n}\n\nconst autoScroll = {\n  defaults: {\n    enabled  : false,\n    margin   : 60,\n\n    // the item that is scrolled (Window or HTMLElement)\n    container: null as AutoScrollOptions['container'],\n\n    // the scroll speed in pixels per second\n    speed    : 300,\n  } as AutoScrollOptions,\n\n  now: Date.now,\n\n  interaction: null as Interact.Interaction,\n  i: 0, // the handle returned by window.setInterval\n\n  // Direction each pulse is to scroll in\n  x: 0,\n  y: 0,\n\n  isScrolling: false,\n  prevTime: 0,\n  margin: 0,\n  speed: 0,\n\n  start (interaction: Interact.Interaction) {\n    autoScroll.isScrolling = true\n    raf.cancel(autoScroll.i)\n\n    interaction.autoScroll = autoScroll\n    autoScroll.interaction = interaction\n    autoScroll.prevTime = autoScroll.now()\n    autoScroll.i = raf.request(autoScroll.scroll)\n  },\n\n  stop () {\n    autoScroll.isScrolling = false\n    if (autoScroll.interaction) {\n      autoScroll.interaction.autoScroll = null\n    }\n    raf.cancel(autoScroll.i)\n  },\n\n  // scroll the window by the values in scroll.x/y\n  scroll () {\n    const { interaction } = autoScroll\n    const { interactable, element } = interaction\n    const actionName = interaction.prepared.name\n    const options = interactable.options[actionName].autoScroll\n    const container = getContainer(options.container, interactable, element)\n    const now = autoScroll.now()\n    // change in time in seconds\n    const dt = (now - autoScroll.prevTime) / 1000\n    // displacement\n    const s = options.speed * dt\n\n    if (s >= 1) {\n      const scrollBy = {\n        x: autoScroll.x * s,\n        y: autoScroll.y * s,\n      }\n\n      if (scrollBy.x || scrollBy.y) {\n        const prevScroll = getScroll(container)\n\n        if (is.window(container)) {\n          container.scrollBy(scrollBy.x, scrollBy.y)\n        }\n        else if (container) {\n          container.scrollLeft += scrollBy.x\n          container.scrollTop  += scrollBy.y\n        }\n\n        const curScroll = getScroll(container)\n        const delta = {\n          x: curScroll.x - prevScroll.x,\n          y: curScroll.y - prevScroll.y,\n        }\n\n        if (delta.x || delta.y) {\n          interactable.fire({\n            type: 'autoscroll',\n            target: element,\n            interactable,\n            delta,\n            interaction,\n            container,\n          })\n        }\n      }\n\n      autoScroll.prevTime = now\n    }\n\n    if (autoScroll.isScrolling) {\n      raf.cancel(autoScroll.i)\n      autoScroll.i = raf.request(autoScroll.scroll)\n    }\n  },\n  check (interactable: Interact.Interactable, actionName: Interact.ActionName) {\n    const options = interactable.options\n\n    return options[actionName].autoScroll && options[actionName].autoScroll.enabled\n  },\n  onInteractionMove<T extends Interact.ActionName> ({ interaction, pointer }: { interaction: Interact.Interaction<T>, pointer: Interact.PointerType }) {\n    if (!(interaction.interacting() &&\n          autoScroll.check(interaction.interactable, interaction.prepared.name))) {\n      return\n    }\n\n    if (interaction.simulation) {\n      autoScroll.x = autoScroll.y = 0\n      return\n    }\n\n    let top\n    let right\n    let bottom\n    let left\n\n    const { interactable, element } = interaction\n    const actionName = interaction.prepared.name\n    const options = interactable.options[actionName].autoScroll\n    const container = getContainer(options.container, interactable, element)\n\n    if (is.window(container)) {\n      left   = pointer.clientX < autoScroll.margin\n      top    = pointer.clientY < autoScroll.margin\n      right  = pointer.clientX > container.innerWidth  - autoScroll.margin\n      bottom = pointer.clientY > container.innerHeight - autoScroll.margin\n    }\n    else {\n      const rect = domUtils.getElementClientRect(container)\n\n      left   = pointer.clientX < rect.left   + autoScroll.margin\n      top    = pointer.clientY < rect.top    + autoScroll.margin\n      right  = pointer.clientX > rect.right  - autoScroll.margin\n      bottom = pointer.clientY > rect.bottom - autoScroll.margin\n    }\n\n    autoScroll.x = (right ? 1 : left ? -1 : 0)\n    autoScroll.y = (bottom ? 1 :  top ? -1 : 0)\n\n    if (!autoScroll.isScrolling) {\n      // set the autoScroll properties to those of the target\n      autoScroll.margin = options.margin\n      autoScroll.speed  = options.speed\n\n      autoScroll.start(interaction)\n    }\n  },\n}\n\nexport function getContainer (value: any, interactable: Interact.Interactable, element: Interact.Element) {\n  return (is.string(value) ? getStringOptionResult(value, interactable, element) : value) || getWindow(element)\n}\n\nexport function getScroll (container: any) {\n  if (is.window(container)) { container = window.document.body }\n\n  return { x: container.scrollLeft, y: container.scrollTop }\n}\n\nexport function getScrollSize (container: any) {\n  if (is.window(container)) { container = window.document.body }\n\n  return { x: container.scrollWidth, y: container.scrollHeight }\n}\n\nexport function getScrollSizeDelta<T extends Interact.ActionName> ({ interaction, element }: {\n  interaction: Partial<Interact.Interaction<T>>\n  element: Interact.Element\n}, func: any) {\n  const scrollOptions = interaction && interaction.interactable.options[interaction.prepared.name].autoScroll\n\n  if (!scrollOptions || !scrollOptions.enabled) {\n    func()\n    return { x: 0, y: 0 }\n  }\n\n  const scrollContainer = getContainer(\n    scrollOptions.container,\n    interaction.interactable,\n    element,\n  )\n\n  const prevSize = getScroll(scrollContainer)\n  func()\n  const curSize = getScroll(scrollContainer)\n\n  return {\n    x: curSize.x - prevSize.x,\n    y: curSize.y - prevSize.y,\n  }\n}\n\nconst autoScrollPlugin: Interact.Plugin = {\n  id: 'auto-scroll',\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.autoScroll = null\n    },\n\n    'interactions:destroy': ({ interaction }) => {\n      interaction.autoScroll = null\n      autoScroll.stop()\n      if (autoScroll.interaction) {\n        autoScroll.interaction = null\n      }\n    },\n\n    'interactions:stop': autoScroll.stop,\n\n    'interactions:action-move': (arg: any) => autoScroll.onInteractionMove(arg),\n  },\n}\n\nexport default autoScrollPlugin\n","import * as Interact from '@interactjs/types/index'\n\nimport win from './window'\n\nexport function warnOnce<T> (this: T, method: (...args: any[]) => any, message: string) {\n  let warned = false\n\n  return function (this: T) {\n    if (!warned) {\n      (win.window as any).console.warn(message)\n      warned = true\n    }\n\n    return method.apply(this, arguments)\n  }\n}\n\nexport function copyAction (dest: Interact.ActionProps, src: Interact.ActionProps) {\n  dest.name  = src.name\n  dest.axis  = src.axis\n  dest.edges = src.edges\n\n  return dest\n}\n","import * as Interact from '@interactjs/types/index'\nimport is from '@interactjs/utils/is'\nimport { warnOnce } from '@interactjs/utils/misc'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    getAction: (\n      this: Interact.Interactable,\n      pointer: Interact.PointerType,\n      event: Interact.PointerEventType,\n      interaction: Interact.Interaction,\n      element: Interact.Element,\n    ) => Interact.ActionProps | null\n    styleCursor: typeof styleCursor\n    actionChecker: typeof actionChecker\n    ignoreFrom: {\n      (...args: any[]): Interactable\n      (): boolean\n    }\n    allowFrom: {\n      (...args: any[]): Interactable\n      (): boolean\n    }\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  const {\n    /** @lends Interactable */\n    Interactable, // tslint:disable-line no-shadowed-variable\n  } = scope\n\n  Interactable.prototype.getAction = function getAction (\n    this: Interact.Interactable,\n    pointer: Interact.PointerType,\n    event: Interact.PointerEventType,\n    interaction: Interact.Interaction,\n    element: Interact.Element,\n  ): Interact.ActionProps {\n    const action = defaultActionChecker(this, event, interaction, element, scope)\n\n    if (this.options.actionChecker) {\n      return this.options.actionChecker(pointer, event, action, this, element, interaction)\n    }\n\n    return action\n  }\n\n  /**\n   * ```js\n   * interact(element, { ignoreFrom: document.getElementById('no-action') })\n   * // or\n   * interact(element).ignoreFrom('input, textarea, a')\n   * ```\n   * @deprecated\n   * If the target of the `mousedown`, `pointerdown` or `touchstart` event or any\n   * of it's parents match the given CSS selector or Element, no\n   * drag/resize/gesture is started.\n   *\n   * Don't use this method. Instead set the `ignoreFrom` option for each action\n   * or for `pointerEvents`\n   *\n   * @example\n   * interact(targett)\n   *   .draggable({\n   *     ignoreFrom: 'input, textarea, a[href]'',\n   *   })\n   *   .pointerEvents({\n   *     ignoreFrom: '[no-pointer]',\n   *   })\n   *\n   * @param {string | Element | null} [newValue] a CSS selector string, an\n   * Element or `null` to not ignore any elements\n   * @return {string | Element | object} The current ignoreFrom value or this\n   * Interactable\n   */\n  Interactable.prototype.ignoreFrom = warnOnce(function (this: Interact.Interactable, newValue) {\n    return this._backCompatOption('ignoreFrom', newValue)\n  }, 'Interactable.ignoreFrom() has been deprecated. Use Interactble.draggable({ignoreFrom: newValue}).')\n\n  /**\n   * @deprecated\n   *\n   * A drag/resize/gesture is started only If the target of the `mousedown`,\n   * `pointerdown` or `touchstart` event or any of it's parents match the given\n   * CSS selector or Element.\n   *\n   * Don't use this method. Instead set the `allowFrom` option for each action\n   * or for `pointerEvents`\n   *\n   * @example\n   * interact(targett)\n   *   .resizable({\n   *     allowFrom: '.resize-handle',\n   *   .pointerEvents({\n   *     allowFrom: '.handle',,\n   *   })\n   *\n   * @param {string | Element | null} [newValue] a CSS selector string, an\n   * Element or `null` to allow from any element\n   * @return {string | Element | object} The current allowFrom value or this\n   * Interactable\n   */\n  Interactable.prototype.allowFrom = warnOnce(function (this: Interact.Interactable, newValue) {\n    return this._backCompatOption('allowFrom', newValue)\n  }, 'Interactable.allowFrom() has been deprecated. Use Interactble.draggable({allowFrom: newValue}).')\n\n  /**\n   * ```js\n   * interact('.resize-drag')\n   *   .resizable(true)\n   *   .draggable(true)\n   *   .actionChecker(function (pointer, event, action, interactable, element, interaction) {\n   *\n   *   if (interact.matchesSelector(event.target, '.drag-handle')) {\n   *     // force drag with handle target\n   *     action.name = drag\n   *   }\n   *   else {\n   *     // resize from the top and right edges\n   *     action.name  = 'resize'\n   *     action.edges = { top: true, right: true }\n   *   }\n   *\n   *   return action\n   * })\n   * ```\n   *\n   * Returns or sets the function used to check action to be performed on\n   * pointerDown\n   *\n   * @param {function | null} [checker] A function which takes a pointer event,\n   * defaultAction string, interactable, element and interaction as parameters\n   * and returns an object with name property 'drag' 'resize' or 'gesture' and\n   * optionally an `edges` object with boolean 'top', 'left', 'bottom' and right\n   * props.\n   * @return {Function | Interactable} The checker function or this Interactable\n   */\n  Interactable.prototype.actionChecker = actionChecker\n\n  /**\n   * Returns or sets whether the the cursor should be changed depending on the\n   * action that would be performed if the mouse were pressed and dragged.\n   *\n   * @param {boolean} [newValue]\n   * @return {boolean | Interactable} The current setting or this Interactable\n   */\n  Interactable.prototype.styleCursor = styleCursor\n}\n\nfunction defaultActionChecker (\n  interactable: Interact.Interactable,\n  event: Interact.PointerEventType,\n  interaction: Interact.Interaction,\n  element: Interact.Element,\n  scope: Interact.Scope,\n) {\n  const rect = interactable.getRect(element)\n  const buttons = (event as MouseEvent).buttons || ({\n    0: 1,\n    1: 4,\n    3: 8,\n    4: 16,\n  })[(event as MouseEvent).button as 0 | 1 | 3 | 4]\n  const arg = {\n    action: null,\n    interactable,\n    interaction,\n    element,\n    rect,\n    buttons,\n  }\n\n  scope.fire('auto-start:check', arg)\n\n  return arg.action\n}\n\nfunction styleCursor (this: Interact.Interactable): boolean\nfunction styleCursor (this: Interact.Interactable, newValue: boolean): typeof this\nfunction styleCursor (this: Interact.Interactable, newValue?: boolean) {\n  if (is.bool(newValue)) {\n    this.options.styleCursor = newValue\n\n    return this\n  }\n\n  if (newValue === null) {\n    delete this.options.styleCursor\n\n    return this\n  }\n\n  return this.options.styleCursor\n}\n\nfunction actionChecker (this: Interact.Interactable, checker: any) {\n  if (is.func(checker)) {\n    this.options.actionChecker = checker\n\n    return this\n  }\n\n  if (checker === null) {\n    delete this.options.actionChecker\n\n    return this\n  }\n\n  return this.options.actionChecker\n}\n\nexport default {\n  id: 'auto-start/interactableMethods',\n  install,\n}\n","import * as Interact from '@interactjs/types/index'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport { copyAction } from '@interactjs/utils/misc'\n\nimport InteractableMethods from './InteractableMethods'\n\ndeclare module '@interactjs/core/interactStatic' {\n  export interface InteractStatic {\n    maxInteractions: (newValue: any) => any\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    autoStart: AutoStart\n  }\n\n  interface SignalArgs {\n    'autoStart:before-start': Interact.SignalArgs['interactions:move']\n    'autoStart:prepared': { interaction: Interact.Interaction }\n    'auto-start:check': CheckSignalArg\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface BaseDefaults {\n    actionChecker?: any\n    cursorChecker?: any\n    styleCursor?: any\n  }\n\n  interface PerActionDefaults {\n    manualStart?: boolean\n    max?: number\n    maxPerElement?: number\n    allowFrom?: string | Interact.Element\n    ignoreFrom?: string | Interact.Element\n    cursorChecker?: Interact.CursorChecker\n\n    // only allow left button by default\n    // see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#Return_value\n    mouseButtons?: 0 | 1 | 2 | 4 | 16\n  }\n}\n\ninterface CheckSignalArg {\n  interactable: Interact.Interactable\n  interaction: Interact.Interaction\n  element: Interact.Element\n  action: Interact.ActionProps\n  buttons: number\n}\n\nexport interface AutoStart {\n  // Allow this many interactions to happen simultaneously\n  maxInteractions: number\n  withinInteractionLimit: typeof withinInteractionLimit\n  cursorElement: Interact.Element\n}\n\nfunction install (scope: Interact.Scope) {\n  const {\n    interactStatic: interact,\n    defaults,\n  } = scope\n\n  scope.usePlugin(InteractableMethods)\n\n  defaults.base.actionChecker = null\n  defaults.base.styleCursor = true\n\n  extend(defaults.perAction, {\n    manualStart: false,\n    max: Infinity,\n    maxPerElement: 1,\n    allowFrom:  null,\n    ignoreFrom: null,\n\n    // only allow left button by default\n    // see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#Return_value\n    mouseButtons: 1,\n  })\n\n  /**\n   * Returns or sets the maximum number of concurrent interactions allowed.  By\n   * default only 1 interaction is allowed at a time (for backwards\n   * compatibility). To allow multiple interactions on the same Interactables and\n   * elements, you need to enable it in the draggable, resizable and gesturable\n   * `'max'` and `'maxPerElement'` options.\n   *\n   * @alias module:interact.maxInteractions\n   *\n   * @param {number} [newValue] Any number. newValue <= 0 means no interactions.\n   */\n  interact.maxInteractions = (newValue: number) => maxInteractions(newValue, scope)\n\n  scope.autoStart = {\n    // Allow this many interactions to happen simultaneously\n    maxInteractions: Infinity,\n    withinInteractionLimit,\n    cursorElement: null,\n  }\n}\n\nfunction prepareOnDown ({ interaction, pointer, event, eventTarget }: Interact.SignalArgs['interactions:down'], scope: Interact.Scope) {\n  if (interaction.interacting()) { return }\n\n  const actionInfo = getActionInfo(interaction, pointer, event, eventTarget, scope)\n  prepare(interaction, actionInfo, scope)\n}\n\nfunction prepareOnMove ({ interaction, pointer, event, eventTarget }: Interact.SignalArgs['interactions:move'], scope: Interact.Scope) {\n  if (interaction.pointerType !== 'mouse' ||\n      interaction.pointerIsDown ||\n      interaction.interacting()) { return }\n\n  const actionInfo = getActionInfo(interaction, pointer, event, eventTarget as Interact.Element, scope)\n  prepare(interaction, actionInfo, scope)\n}\n\nfunction startOnMove (arg: Interact.SignalArgs['interactions:move'], scope: Interact.Scope) {\n  const { interaction } = arg\n\n  if (!interaction.pointerIsDown ||\n      interaction.interacting() ||\n      !interaction.pointerWasMoved ||\n      !interaction.prepared.name) {\n    return\n  }\n\n  scope.fire('autoStart:before-start', arg)\n\n  const { interactable } = interaction\n  const actionName = interaction.prepared.name\n\n  if (actionName && interactable) {\n    // check manualStart and interaction limit\n    if (interactable.options[actionName].manualStart ||\n        !withinInteractionLimit(interactable, interaction.element, interaction.prepared, scope)) {\n      interaction.stop()\n    }\n    else {\n      interaction.start(interaction.prepared, interactable, interaction.element)\n      setInteractionCursor(interaction, scope)\n    }\n  }\n}\n\nfunction clearCursorOnStop ({ interaction }: { interaction: Interact.Interaction }, scope: Interact.Scope) {\n  const { interactable } = interaction\n\n  if (interactable && interactable.options.styleCursor) {\n    setCursor(interaction.element, '', scope)\n  }\n}\n\n// Check if the current interactable supports the action.\n// If so, return the validated action. Otherwise, return null\nfunction validateAction<T extends Interact.ActionName> (\n  action: Interact.ActionProps<T>,\n  interactable: Interact.Interactable,\n  element: Interact.Element,\n  eventTarget: Interact.EventTarget,\n  scope: Interact.Scope,\n) {\n  if (interactable.testIgnoreAllow(interactable.options[action.name], element, eventTarget) &&\n      interactable.options[action.name].enabled &&\n      withinInteractionLimit(interactable, element, action, scope)) {\n    return action\n  }\n\n  return null\n}\n\nfunction validateMatches (\n  interaction: Interact.Interaction,\n  pointer: Interact.PointerType,\n  event: Interact.PointerEventType,\n  matches: Interact.Interactable[],\n  matchElements: Interact.Element[],\n  eventTarget: Interact.EventTarget,\n  scope: Interact.Scope,\n) {\n  for (let i = 0, len = matches.length; i < len; i++) {\n    const match = matches[i]\n    const matchElement = matchElements[i]\n    const matchAction = match.getAction(pointer, event, interaction, matchElement)\n\n    if (!matchAction) { continue }\n\n    const action = validateAction(\n      matchAction,\n      match,\n      matchElement,\n      eventTarget,\n      scope)\n\n    if (action) {\n      return {\n        action,\n        interactable: match,\n        element: matchElement,\n      }\n    }\n  }\n\n  return { action: null, interactable: null, element: null }\n}\n\nfunction getActionInfo (\n  interaction: Interact.Interaction,\n  pointer: Interact.PointerType,\n  event: Interact.PointerEventType,\n  eventTarget: Interact.EventTarget,\n  scope: Interact.Scope,\n) {\n  let matches: Interact.Interactable[] = []\n  let matchElements: Interact.Element[] = []\n\n  let element = eventTarget as Interact.Element\n\n  function pushMatches (interactable: Interact.Interactable) {\n    matches.push(interactable)\n    matchElements.push(element)\n  }\n\n  while (is.element(element)) {\n    matches = []\n    matchElements = []\n\n    scope.interactables.forEachMatch(element, pushMatches)\n\n    const actionInfo = validateMatches(interaction, pointer, event, matches, matchElements, eventTarget, scope)\n\n    if (actionInfo.action &&\n      !actionInfo.interactable.options[actionInfo.action.name].manualStart) {\n      return actionInfo\n    }\n\n    element = domUtils.parentNode(element) as Interact.Element\n  }\n\n  return { action: null, interactable: null, element: null }\n}\n\nfunction prepare (\n  interaction: Interact.Interaction,\n  { action, interactable, element }: {\n    action: Interact.ActionProps\n    interactable: Interact.Interactable\n    element: Interact.Element\n  },\n  scope: Interact.Scope,\n) {\n  action = action || { name: null }\n\n  interaction.interactable = interactable\n  interaction.element = element\n  copyAction(interaction.prepared, action)\n\n  interaction.rect = interactable && action.name\n    ? interactable.getRect(element)\n    : null\n\n  setInteractionCursor(interaction, scope)\n\n  scope.fire('autoStart:prepared', { interaction })\n}\n\nfunction withinInteractionLimit<T extends Interact.ActionName> (\n  interactable: Interact.Interactable,\n  element: Interact.Element,\n  action: Interact.ActionProps<T>,\n  scope: Interact.Scope,\n) {\n  const options = interactable.options\n  const maxActions = options[action.name].max\n  const maxPerElement = options[action.name].maxPerElement\n  const autoStartMax = scope.autoStart.maxInteractions\n  let activeInteractions = 0\n  let interactableCount = 0\n  let elementCount = 0\n\n  // no actions if any of these values == 0\n  if (!(maxActions && maxPerElement && autoStartMax)) { return false }\n\n  for (const interaction of scope.interactions.list) {\n    const otherAction = interaction.prepared.name\n\n    if (!interaction.interacting()) { continue }\n\n    activeInteractions++\n\n    if (activeInteractions >= autoStartMax) {\n      return false\n    }\n\n    if (interaction.interactable !== interactable) { continue }\n\n    interactableCount += otherAction === action.name ? 1 : 0\n\n    if (interactableCount >= maxActions) {\n      return false\n    }\n\n    if (interaction.element === element) {\n      elementCount++\n\n      if (otherAction === action.name && elementCount >= maxPerElement) {\n        return false\n      }\n    }\n  }\n\n  return autoStartMax > 0\n}\n\nfunction maxInteractions (newValue: any, scope: Interact.Scope) {\n  if (is.number(newValue)) {\n    scope.autoStart.maxInteractions = newValue\n\n    return this\n  }\n\n  return scope.autoStart.maxInteractions\n}\n\nfunction setCursor (element: Interact.Element, cursor: string, scope: Interact.Scope) {\n  const { cursorElement: prevCursorElement } = scope.autoStart\n\n  if (prevCursorElement && prevCursorElement !== element) {\n    prevCursorElement.style.cursor = ''\n  }\n\n  element.ownerDocument.documentElement.style.cursor = cursor\n  element.style.cursor = cursor\n  scope.autoStart.cursorElement = cursor ? element : null\n}\n\nfunction setInteractionCursor<T extends Interact.ActionName> (interaction: Interact.Interaction<T>, scope: Interact.Scope) {\n  const { interactable, element, prepared } = interaction\n\n  if (!(interaction.pointerType === 'mouse' && interactable && interactable.options.styleCursor)) {\n    // clear previous target element cursor\n    if (scope.autoStart.cursorElement) {\n      setCursor(scope.autoStart.cursorElement, '', scope)\n    }\n\n    return\n  }\n\n  let cursor = ''\n\n  if (prepared.name) {\n    const cursorChecker: Interact.CursorChecker = interactable.options[prepared.name].cursorChecker\n\n    if (is.func(cursorChecker)) {\n      cursor = cursorChecker(prepared, interactable, element, interaction._interacting)\n    }\n    else {\n      cursor = scope.actions.map[prepared.name].getCursor(prepared)\n    }\n  }\n\n  setCursor(interaction.element, cursor || '', scope)\n}\n\nconst autoStart: Interact.Plugin = {\n  id: 'auto-start/base',\n  before: ['actions'],\n  install,\n  listeners: {\n    'interactions:down': prepareOnDown,\n    'interactions:move': (arg, scope) => {\n      prepareOnMove(arg, scope)\n      startOnMove(arg, scope)\n    },\n    'interactions:stop': clearCursorOnStop,\n  },\n  maxInteractions,\n  withinInteractionLimit,\n  validateAction,\n} as Interact.Plugin\n\nexport default autoStart\n","import * as Interact from '@interactjs/types/index'\nimport { parentNode } from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\n\nimport autoStart from './base'\n\nfunction beforeStart ({ interaction, eventTarget, dx, dy }: Interact.SignalArgs['interactions:move'], scope: Interact.Scope) {\n  if (interaction.prepared.name !== 'drag') { return }\n\n  // check if a drag is in the correct axis\n  const absX = Math.abs(dx)\n  const absY = Math.abs(dy)\n  const targetOptions = interaction.interactable.options.drag\n  const startAxis = targetOptions.startAxis\n  const currentAxis = (absX > absY ? 'x' : absX < absY ? 'y' : 'xy')\n\n  interaction.prepared.axis = targetOptions.lockAxis === 'start'\n    ? currentAxis[0]  as 'x' | 'y' // always lock to one axis even if currentAxis === 'xy'\n    : targetOptions.lockAxis\n\n  // if the movement isn't in the startAxis of the interactable\n  if (currentAxis !== 'xy' && startAxis !== 'xy' && startAxis !== currentAxis) {\n    // cancel the prepared action\n    interaction.prepared.name = null\n\n    // then try to get a drag from another ineractable\n    let element = eventTarget as Interact.Element\n\n    const getDraggable = function (interactable: Interact.Interactable): Interact.Interactable | void {\n      if (interactable === interaction.interactable) { return }\n\n      const options = interaction.interactable.options.drag\n\n      if (!options.manualStart &&\n          interactable.testIgnoreAllow(options, element, eventTarget)) {\n        const action = interactable.getAction(\n          interaction.downPointer, interaction.downEvent, interaction, element)\n\n        if (action &&\n            action.name === 'drag' &&\n            checkStartAxis(currentAxis, interactable) &&\n            autoStart.validateAction(action, interactable, element, eventTarget, scope)) {\n          return interactable\n        }\n      }\n    }\n\n    // check all interactables\n    while (is.element(element)) {\n      const interactable = scope.interactables.forEachMatch(element, getDraggable)\n\n      if (interactable) {\n        interaction.prepared.name = 'drag'\n        interaction.interactable = interactable\n        interaction.element = element\n        break\n      }\n\n      element = parentNode(element) as Interact.Element\n    }\n  }\n}\n\nfunction checkStartAxis (startAxis: string, interactable: Interact.Interactable) {\n  if (!interactable) { return false }\n\n  const thisAxis = interactable.options.drag.startAxis\n\n  return (startAxis === 'xy' || thisAxis === 'xy' || thisAxis === startAxis)\n}\n\nexport default {\n  id: 'auto-start/dragAxis',\n  listeners: { 'autoStart:before-start': beforeStart },\n}\n","import * as Interact from '@interactjs/types/index'\n\nimport basePlugin from './base'\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface PerActionDefaults {\n    hold?: number\n    delay?: number\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    autoStartHoldTimer?: any\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  const {\n    defaults,\n  } = scope\n\n  scope.usePlugin(basePlugin)\n\n  defaults.perAction.hold = 0\n  defaults.perAction.delay = 0\n}\n\nfunction getHoldDuration (interaction) {\n  const actionName = interaction.prepared && interaction.prepared.name\n\n  if (!actionName) { return null }\n\n  const options = interaction.interactable.options\n\n  return options[actionName].hold || options[actionName].delay\n}\n\nexport default {\n  id: 'auto-start/hold',\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.autoStartHoldTimer = null\n    },\n\n    'autoStart:prepared': ({ interaction }) => {\n      const hold = getHoldDuration(interaction)\n\n      if (hold > 0) {\n        interaction.autoStartHoldTimer = setTimeout(() => {\n          interaction.start(interaction.prepared, interaction.interactable, interaction.element)\n        }, hold)\n      }\n    },\n\n    'interactions:move': ({ interaction, duplicate }) => {\n      if (interaction.pointerWasMoved && !duplicate) {\n        clearTimeout(interaction.autoStartHoldTimer)\n      }\n    },\n\n    // prevent regular down->move autoStart\n    'autoStart:before-start': ({ interaction }) => {\n      const hold = getHoldDuration(interaction)\n\n      if (hold > 0) {\n        interaction.prepared.name = null\n      }\n    },\n  },\n  getHoldDuration,\n}\n","import * as Interact from '@interactjs/types/index'\n\nimport autoStart from './base'\nimport dragAxis from './dragAxis'\nimport hold from './hold'\n\nexport default {\n  id: 'auto-start',\n  install (scope: Interact.Scope) {\n    scope.usePlugin(autoStart)\n    scope.usePlugin(hold)\n    scope.usePlugin(dragAxis)\n  },\n}\n","export default {}\n","import * as Interact from '@interactjs/types/index'\nimport { matchesSelector, nodeContains } from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport { getWindow } from '@interactjs/utils/window'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    preventDefault: typeof preventDefault\n    checkAndPreventDefault: (event: Event) => void\n  }\n}\n\ntype PreventDefaultValue = 'always' | 'never' | 'auto'\nfunction preventDefault (this: Interact.Interactable): PreventDefaultValue\nfunction preventDefault (this: Interact.Interactable, newValue: PreventDefaultValue): typeof this\nfunction preventDefault (this: Interact.Interactable, newValue?: PreventDefaultValue) {\n  if (/^(always|never|auto)$/.test(newValue)) {\n    this.options.preventDefault = newValue\n    return this\n  }\n\n  if (is.bool(newValue)) {\n    this.options.preventDefault = newValue ? 'always' : 'never'\n    return this\n  }\n\n  return this.options.preventDefault\n}\n\nfunction checkAndPreventDefault (interactable: Interact.Interactable, scope: Interact.Scope, event: Event) {\n  const setting = interactable.options.preventDefault\n\n  if (setting === 'never') { return }\n\n  if (setting === 'always') {\n    event.preventDefault()\n    return\n  }\n\n  // setting === 'auto'\n\n  // if the browser supports passive event listeners and isn't running on iOS,\n  // don't preventDefault of touch{start,move} events. CSS touch-action and\n  // user-select should be used instead of calling event.preventDefault().\n  if (scope.events.supportsPassive && /^touch(start|move)$/.test(event.type)) {\n    const doc = getWindow(event.target).document\n    const docOptions = scope.getDocOptions(doc)\n\n    if (!(docOptions && docOptions.events) || docOptions.events.passive !== false) {\n      return\n    }\n  }\n\n  // don't preventDefault of pointerdown events\n  if (/^(mouse|pointer|touch)*(down|start)/i.test(event.type)) {\n    return\n  }\n\n  // don't preventDefault on editable elements\n  if (is.element(event.target) &&\n      matchesSelector(event.target, 'input,select,textarea,[contenteditable=true],[contenteditable=true] *')) {\n    return\n  }\n\n  event.preventDefault()\n}\n\nfunction onInteractionEvent ({ interaction, event }: { interaction: Interact.Interaction, event: Interact.PointerEventType }) {\n  if (interaction.interactable) {\n    interaction.interactable.checkAndPreventDefault(event as Event)\n  }\n}\n\nexport function install (scope: Interact.Scope) {\n  /** @lends Interactable */\n  const { Interactable } = scope\n\n  /**\n   * Returns or sets whether to prevent the browser's default behaviour in\n   * response to pointer events. Can be set to:\n   *  - `'always'` to always prevent\n   *  - `'never'` to never prevent\n   *  - `'auto'` to let interact.js try to determine what would be best\n   *\n   * @param {string} [newValue] `'always'`, `'never'` or `'auto'`\n   * @return {string | Interactable} The current setting or this Interactable\n   */\n  Interactable.prototype.preventDefault = preventDefault\n\n  Interactable.prototype.checkAndPreventDefault = function (event) {\n    return checkAndPreventDefault(this, scope, event)\n  }\n\n  // prevent native HTML5 drag on interact.js target elements\n  scope.interactions.docEvents.push({\n    type: 'dragstart',\n    listener (event) {\n      for (const interaction of scope.interactions.list) {\n        if (interaction.element &&\n          (interaction.element === event.target ||\n           nodeContains(interaction.element, event.target))) {\n          interaction.interactable.checkAndPreventDefault(event)\n          return\n        }\n      }\n    },\n  })\n}\n\nexport default {\n  id: 'core/interactablePreventDefault',\n  install,\n  listeners: ['down', 'move', 'up', 'cancel'].reduce((acc, eventType) => {\n    acc[`interactions:${eventType}`] = onInteractionEvent\n    return acc\n  }, {} as any),\n}\n","/* eslint-disable no-console */\nimport * as Interact from '@interactjs/types/index'\nimport domObjects from '@interactjs/utils/domObjects'\nimport { parentNode } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport win from '@interactjs/utils/window'\n\nimport visualizer from './visualizer/plugin'\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    logger: Logger\n  }\n}\n\ndeclare module '@interactjs/core/interactStatic' {\n  export interface InteractStatic {\n    visializer: typeof visualizer\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface BaseDefaults {\n    devTools?: DevToolsOptions\n  }\n}\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    devTools: Interact.OptionMethod<DevToolsOptions>\n  }\n}\n\nexport interface DevToolsOptions {\n  ignore: { [P in keyof typeof CheckName]?: boolean }\n}\n\nexport interface Logger {\n  warn: (...args: any[]) => void\n  error: (...args: any[]) => void\n  log: (...args: any[]) => void\n}\n\nexport interface Check {\n  name: CheckName\n  text: string\n  perform: (interaction: Interact.Interaction) => boolean\n  getInfo: (interaction: Interact.Interaction) => any[]\n}\n\nenum CheckName {\n  touchAction = 'touchAction',\n  boxSizing = 'boxSizing',\n  noListeners = 'noListeners',\n}\n\nconst prefix  = '[interact.js] '\nconst links = {\n  touchAction: 'https://developer.mozilla.org/en-US/docs/Web/CSS/touch-action',\n  boxSizing: 'https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing',\n}\n\n// eslint-disable-next-line no-undef\nconst isProduction = process.env.NODE_ENV === 'production'\n\n// eslint-disable-next-line no-restricted-syntax\nfunction install (scope: Interact.Scope, { logger }: { logger?: Logger } = {}) {\n  const {\n    Interactable,\n    defaults,\n  } = scope\n\n  scope.logger = logger || console\n\n  defaults.base.devTools = {\n    ignore: {},\n  }\n\n  Interactable.prototype.devTools = function (options?: object) {\n    if (options) {\n      extend(this.options.devTools, options)\n      return this\n    }\n\n    return this.options.devTools\n  }\n}\n\nconst checks: Check[] = [\n  {\n    name: CheckName.touchAction,\n    perform ({ element }) {\n      return !parentHasStyle(element, 'touchAction', /pan-|pinch|none/)\n    },\n    getInfo ({ element }) {\n      return [\n        element,\n        links.touchAction,\n      ]\n    },\n    text: 'Consider adding CSS \"touch-action: none\" to this element\\n',\n  },\n\n  {\n    name: CheckName.boxSizing,\n    perform (interaction) {\n      const { element } = interaction\n\n      return interaction.prepared.name === 'resize' &&\n        element instanceof domObjects.HTMLElement &&\n        !hasStyle(element, 'boxSizing', /border-box/)\n    },\n    text: 'Consider adding CSS \"box-sizing: border-box\" to this resizable element',\n    getInfo ({ element }) {\n      return [\n        element,\n        links.boxSizing,\n      ]\n    },\n  },\n\n  {\n    name: CheckName.noListeners,\n    perform (interaction) {\n      const actionName = interaction.prepared.name\n      const moveListeners = interaction.interactable.events.types[`${actionName}move`] || []\n\n      return !moveListeners.length\n    },\n    getInfo (interaction) {\n      return [\n        interaction.prepared.name,\n        interaction.interactable,\n      ]\n    },\n    text: 'There are no listeners set for this action',\n  },\n]\n\nfunction hasStyle (element: HTMLElement, prop: keyof CSSStyleDeclaration, styleRe: RegExp) {\n  const value = element.style[prop] || win.window.getComputedStyle(element)[prop]\n  return styleRe.test((value || '').toString())\n}\n\nfunction parentHasStyle (element: Interact.Element, prop: keyof CSSStyleDeclaration, styleRe: RegExp) {\n  let parent = element as HTMLElement\n\n  while (is.element(parent)) {\n    if (hasStyle(parent, prop, styleRe)) {\n      return true\n    }\n\n    parent = parentNode(parent) as HTMLElement\n  }\n\n  return false\n}\n\nconst id = 'dev-tools'\nconst defaultExport: Interact.Plugin = isProduction\n  ? { id, install: () => {} }\n  : {\n    id,\n    install,\n    listeners: {\n      'interactions:action-start': ({ interaction }, scope) => {\n        for (const check of checks) {\n          const options = interaction.interactable && interaction.interactable.options\n\n          if (\n            !(options && options.devTools && options.devTools.ignore[check.name]) &&\n            check.perform(interaction)\n          ) {\n            scope.logger.warn(prefix + check.text, ...check.getInfo(interaction))\n          }\n        }\n      },\n    },\n    checks,\n    CheckName,\n    links,\n    prefix,\n  }\n\nexport default defaultExport\n","import * as arr from './arr'\nimport is from './is'\n\n// tslint:disable-next-line ban-types\nexport default function clone<T extends Object> (source: T): Partial<T> {\n  const dest = {} as Partial<T>\n\n  for (const prop in source) {\n    const value = source[prop]\n\n    if (is.plainObject(value)) {\n      dest[prop] = clone(value) as any\n    }\n    else if (is.array(value)) {\n      dest[prop] = arr.from(value) as typeof value\n    }\n    else {\n      dest[prop] = value\n    }\n  }\n\n  return dest\n}\n","import * as Interact from '@interactjs/types/index'\nimport clone from '@interactjs/utils/clone'\nimport extend from '@interactjs/utils/extend'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport { Modifier, ModifierArg, ModifierState } from './base'\n\nexport interface ModificationResult {\n  delta: Interact.Point\n  rectDelta: Interact.Rect\n  coords: Interact.Point\n  rect: Interact.FullRect\n  eventProps: any[]\n  changed: boolean\n}\n\ninterface MethodArg {\n  phase: Interact.EventPhase\n  pageCoords?: Interact.Point\n  rect?: Interact.FullRect\n  coords?: Interact.Point\n  preEnd?: boolean\n  skipModifiers?: number\n}\n\nexport default class Modification {\n  states: ModifierState[] = []\n  startOffset: Interact.Rect = { left: 0, right: 0, top: 0, bottom: 0 }\n  startDelta: Interact.Point = null\n  result?: ModificationResult = null\n  endResult?: Interact.Point = null\n  edges: Interact.EdgeOptions\n  readonly interaction: Readonly<Interact.Interaction>\n\n  constructor (interaction: Interact.Interaction) {\n    this.interaction = interaction\n    this.result = createResult()\n  }\n\n  start (\n    { phase }: MethodArg,\n    pageCoords: Interact.Point,\n  ) {\n    const { interaction } = this\n    const modifierList = getModifierList(interaction)\n    this.prepareStates(modifierList)\n\n    this.edges = extend({}, interaction.edges)\n    this.startOffset = getRectOffset(interaction.rect, pageCoords)\n    this.startDelta = { x: 0, y: 0 }\n\n    const arg: MethodArg = {\n      phase,\n      pageCoords,\n      preEnd: false,\n    }\n\n    this.result = createResult()\n    this.startAll(arg)\n\n    const result = this.result = this.setAll(arg)\n\n    return result\n  }\n\n  fillArg (arg: Partial<ModifierArg>) {\n    const { interaction } = this\n\n    arg.interaction = interaction\n    arg.interactable = interaction.interactable\n    arg.element = interaction.element\n    arg.rect = arg.rect || interaction.rect\n    arg.edges = this.edges\n    arg.startOffset = this.startOffset\n  }\n\n  startAll (arg: MethodArg & Partial<ModifierArg>) {\n    this.fillArg(arg)\n\n    for (const state of this.states) {\n      if (state.methods.start) {\n        arg.state = state\n        state.methods.start(arg as ModifierArg)\n      }\n    }\n  }\n\n  setAll (arg: MethodArg & Partial<ModifierArg>): ModificationResult {\n    this.fillArg(arg)\n\n    const {\n      phase,\n      preEnd,\n      skipModifiers,\n      rect: unmodifiedRect,\n    } = arg\n\n    arg.coords = extend({}, arg.pageCoords)\n    arg.rect = extend({}, unmodifiedRect)\n\n    const states = skipModifiers\n      ? this.states.slice(skipModifiers)\n      : this.states\n\n    const newResult = createResult(arg.coords, arg.rect)\n\n    for (const state of states) {\n      const { options } = state\n      const lastModifierCoords = extend({}, arg.coords)\n      let returnValue = null\n\n      if (state.methods.set && this.shouldDo(options, preEnd, phase)) {\n        arg.state = state\n        returnValue = state.methods.set(arg as ModifierArg)\n\n        rectUtils.addEdges(this.interaction.edges, arg.rect, { x: arg.coords.x - lastModifierCoords.x, y: arg.coords.y - lastModifierCoords.y })\n      }\n\n      newResult.eventProps.push(returnValue)\n    }\n\n    newResult.delta.x = arg.coords.x - arg.pageCoords.x\n    newResult.delta.y = arg.coords.y - arg.pageCoords.y\n\n    newResult.rectDelta.left   = arg.rect.left - unmodifiedRect.left\n    newResult.rectDelta.right  = arg.rect.right - unmodifiedRect.right\n    newResult.rectDelta.top    = arg.rect.top - unmodifiedRect.top\n    newResult.rectDelta.bottom = arg.rect.bottom - unmodifiedRect.bottom\n\n    const prevCoords = this.result.coords\n    const prevRect = this.result.rect\n\n    if (prevCoords && prevRect) {\n      const rectChanged = newResult.rect.left !== prevRect.left ||\n        newResult.rect.right !== prevRect.right ||\n        newResult.rect.top !== prevRect.top ||\n        newResult.rect.bottom !== prevRect.bottom\n\n      newResult.changed = rectChanged ||\n        prevCoords.x !== newResult.coords.x ||\n        prevCoords.y !== newResult.coords.y\n    }\n\n    return newResult\n  }\n\n  applyToInteraction (arg: { phase: Interact.EventPhase, rect?: Interact.Rect }) {\n    const { interaction } = this\n    const { phase } = arg\n    const curCoords = interaction.coords.cur\n    const startCoords = interaction.coords.start\n    const { result, startDelta } = this\n    const curDelta = result.delta\n\n    if (phase === 'start') {\n      extend(this.startDelta, result.delta)\n    }\n\n    for (const [coordsSet, delta] of [[startCoords, startDelta], [curCoords, curDelta]] as const) {\n      coordsSet.page.x   += delta.x\n      coordsSet.page.y   += delta.y\n      coordsSet.client.x += delta.x\n      coordsSet.client.y += delta.y\n    }\n\n    const { rectDelta } = this.result\n    const rect = arg.rect || interaction.rect\n\n    rect.left   += rectDelta.left\n    rect.right  += rectDelta.right\n    rect.top    += rectDelta.top\n    rect.bottom += rectDelta.bottom\n\n    rect.width = rect.right - rect.left\n    rect.height = rect.bottom - rect.top\n  }\n\n  setAndApply (arg: Partial<Interact.DoAnyPhaseArg> & {\n    phase: Interact.EventPhase\n    preEnd?: boolean\n    skipModifiers?: number\n    modifiedCoords?: Interact.Point\n  }): void | false {\n    const { interaction } = this\n    const { phase, preEnd, skipModifiers } = arg\n\n    const result = this.setAll({\n      preEnd,\n      phase,\n      pageCoords: arg.modifiedCoords || interaction.coords.cur.page,\n    })\n\n    this.result = result\n\n    // don't fire an action move if a modifier would keep the event in the same\n    // cordinates as before\n    if (!result.changed && (!skipModifiers || skipModifiers < this.states.length) && interaction.interacting()) {\n      return false\n    }\n\n    if (arg.modifiedCoords) {\n      const { page } = interaction.coords.cur\n      const adjustment = {\n        x: arg.modifiedCoords.x - page.x,\n        y: arg.modifiedCoords.y - page.y,\n      }\n\n      result.coords.x += adjustment.x\n      result.coords.y += adjustment.y\n      result.delta.x += adjustment.x\n      result.delta.y += adjustment.y\n    }\n\n    this.applyToInteraction(arg)\n  }\n\n  beforeEnd (arg: Omit<Interact.DoAnyPhaseArg, 'iEvent'> & { state?: ModifierState }): void | false {\n    const { interaction, event } = arg\n    const states = this.states\n\n    if (!states || !states.length) {\n      return\n    }\n\n    let doPreend = false\n\n    for (const state of states) {\n      arg.state = state\n      const { options, methods } = state\n\n      const endPosition = methods.beforeEnd && methods.beforeEnd(arg as unknown as ModifierArg)\n\n      if (endPosition) {\n        this.endResult = endPosition\n        return false\n      }\n\n      doPreend = doPreend || (!doPreend && this.shouldDo(options, true, arg.phase, true))\n    }\n\n    if (doPreend) {\n      // trigger a final modified move before ending\n      interaction.move({ event, preEnd: true })\n    }\n  }\n\n  stop (arg: { interaction: Interact.Interaction }) {\n    const { interaction } = arg\n\n    if (!this.states || !this.states.length) {\n      return\n    }\n\n    const modifierArg: Partial<ModifierArg> = extend({\n      states: this.states,\n      interactable: interaction.interactable,\n      element: interaction.element,\n      rect: null,\n    }, arg)\n\n    this.fillArg(modifierArg)\n\n    for (const state of this.states) {\n      modifierArg.state = state\n\n      if (state.methods.stop) { state.methods.stop(modifierArg as ModifierArg) }\n    }\n\n    this.states = null\n    this.endResult = null\n  }\n\n  prepareStates (modifierList: Modifier[]) {\n    this.states = []\n\n    for (let index = 0; index < modifierList.length; index++) {\n      const { options, methods, name } = modifierList[index]\n\n      this.states.push({\n        options,\n        methods,\n        index,\n        name,\n      })\n    }\n\n    return this.states\n  }\n\n  restoreInteractionCoords ({ interaction: { coords, rect, modification } }: { interaction: Interact.Interaction }) {\n    if (!modification.result) { return }\n\n    const { startDelta } = modification\n    const { delta: curDelta, rectDelta } = modification.result\n\n    const coordsAndDeltas = [\n      [coords.start, startDelta],\n      [coords.cur, curDelta],\n    ]\n\n    for (const [coordsSet, delta] of coordsAndDeltas as any) {\n      coordsSet.page.x -= delta.x\n      coordsSet.page.y -= delta.y\n      coordsSet.client.x -= delta.x\n      coordsSet.client.y -= delta.y\n    }\n\n    rect.left -= rectDelta.left\n    rect.right -= rectDelta.right\n    rect.top -= rectDelta.top\n    rect.bottom -= rectDelta.bottom\n  }\n\n  shouldDo (options, preEnd?: boolean, phase?: string, requireEndOnly?: boolean) {\n    if (\n      // ignore disabled modifiers\n      (!options || options.enabled === false) ||\n      // check if we require endOnly option to fire move before end\n      (requireEndOnly && !options.endOnly) ||\n      // don't apply endOnly modifiers when not ending\n      (options.endOnly && !preEnd) ||\n      // check if modifier should run be applied on start\n      (phase === 'start' && !options.setStart)\n    ) {\n      return false\n    }\n\n    return true\n  }\n\n  copyFrom (other: Modification) {\n    this.startOffset = other.startOffset\n    this.startDelta = other.startDelta\n    this.edges = other.edges\n    this.states = other.states.map(s => clone(s) as ModifierState)\n    this.result = createResult(extend({}, other.result.coords), extend({}, other.result.rect))\n  }\n\n  destroy () {\n    for (const prop in this) {\n      this[prop] = null\n    }\n  }\n}\n\nfunction createResult (coords?: Interact.Point, rect?: Interact.FullRect): ModificationResult {\n  return {\n    rect,\n    coords,\n    delta: { x: 0, y: 0 },\n    rectDelta: {\n      left  : 0,\n      right : 0,\n      top   : 0,\n      bottom: 0,\n    },\n    eventProps: [],\n    changed: true,\n  }\n}\n\nfunction getModifierList (interaction) {\n  const actionOptions = interaction.interactable.options[interaction.prepared.name]\n  const actionModifiers = actionOptions.modifiers\n\n  if (actionModifiers && actionModifiers.length) {\n    return actionModifiers\n  }\n\n  return ['snap', 'snapSize', 'snapEdges', 'restrict', 'restrictEdges', 'restrictSize']\n    .map(type => {\n      const options = actionOptions[type]\n\n      return options && options.enabled && {\n        options,\n        methods: options._methods,\n      }\n    })\n    .filter(m => !!m)\n}\n\nexport function getRectOffset (rect, coords) {\n  return rect\n    ? {\n      left  : coords.x - rect.left,\n      top   : coords.y - rect.top,\n      right : rect.right  - coords.x,\n      bottom: rect.bottom - coords.y,\n    }\n    : {\n      left  : 0,\n      top   : 0,\n      right : 0,\n      bottom: 0,\n    }\n}\n","import * as Interact from '@interactjs/types/index'\n\nimport Modification from './Modification'\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    modification?: Modification\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface InteractEvent {\n    modifiers?: Array<{\n      name: string\n      [key: string]: any\n    }>\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface PerActionDefaults {\n    modifiers?: Modifier[]\n  }\n}\n\nexport interface Modifier<\n  Defaults = any,\n  State extends ModifierState = any,\n  Name extends string = any\n> {\n  options?: Defaults\n  methods: {\n    start?: (arg: ModifierArg<State>) => void\n    set: (arg: ModifierArg<State>) => void\n    beforeEnd?: (arg: ModifierArg<State>) => Interact.Point | void\n    stop?: (arg: ModifierArg<State>) => void\n  }\n  name?: Name\n  enable: () => Modifier<Defaults, State, Name>\n  disable: () => Modifier<Defaults, State, Name>\n}\n\nexport type ModifierState<\n  Defaults = {},\n  StateProps extends { [prop: string]: any } = {},\n  Name extends string = any\n> = {\n  options: Defaults\n  methods?: Modifier<Defaults>['methods']\n  index?: number\n  name?: Name\n} & StateProps\n\nexport interface ModifierArg<State extends ModifierState = ModifierState> {\n  interaction: Interact.Interaction\n  interactable: Interact.Interactable\n  phase: Interact.EventPhase\n  rect: Interact.FullRect\n  edges: Interact.EdgeOptions\n  state?: State\n  element: Interact.Element\n  pageCoords?: Interact.Point\n  prevCoords?: Interact.Point\n  prevRect?: Interact.FullRect\n  coords?: Interact.Point\n  startOffset?: Interact.Rect\n  preEnd?: boolean\n}\n\nexport interface ModifierModule<\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n> {\n  defaults?: Defaults\n  start? (arg: ModifierArg<State>): void\n  set? (arg: ModifierArg<State>): any\n  beforeEnd? (arg: ModifierArg<State>): Interact.Point | void\n  stop? (arg: ModifierArg<State>): void\n}\n\nexport interface ModifierFunction <\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n  Name extends string,\n> {\n  (_options?: Partial<Defaults>): Modifier<Defaults, State, Name>\n  _defaults: Defaults\n  _methods: ModifierModule<Defaults, State>\n}\n\nexport function makeModifier<\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n  Name extends string\n> (\n  module: ModifierModule<Defaults, State>,\n  name?: Name,\n) {\n  const { defaults } = module\n  const methods = {\n    start: module.start,\n    set: module.set,\n    beforeEnd: module.beforeEnd,\n    stop: module.stop,\n  }\n\n  const modifier = (_options?: Partial<Defaults>) => {\n    const options: Defaults = (_options || {}) as Defaults\n\n    options.enabled = options.enabled !== false\n\n    // add missing defaults to options\n    for (const prop in defaults) {\n      if (!(prop in options)) {\n        options[prop] = defaults[prop]\n      }\n    }\n\n    const m: Modifier<Defaults, State, Name> = {\n      options,\n      methods,\n      name,\n      enable: () => {\n        options.enabled = true\n        return m\n      },\n      disable: () => {\n        options.enabled = false\n        return m\n      },\n    }\n\n    return m\n  }\n\n  if (name && typeof name === 'string') {\n    // for backwrads compatibility\n    modifier._defaults = defaults\n    modifier._methods = methods\n  }\n\n  return modifier\n}\n\nexport function addEventModifiers ({ iEvent, interaction: { modification: { result } } }: {\n  iEvent: Interact.InteractEvent<Interact.ActionName, Interact.EventPhase>\n  interaction: Interact.Interaction\n}) {\n  if (result) {\n    iEvent.modifiers = result.eventProps\n  }\n}\n\nconst modifiersBase: Interact.Plugin = {\n  id: 'modifiers/base',\n  install: scope => {\n    scope.defaults.perAction.modifiers = []\n  },\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.modification = new Modification(interaction)\n    },\n\n    'interactions:before-action-start': arg => {\n      const { modification } = arg.interaction\n\n      modification.start(arg, arg.interaction.coords.start.page)\n      arg.interaction.edges = modification.edges\n      modification.applyToInteraction(arg)\n    },\n\n    'interactions:before-action-move': arg => arg.interaction.modification.setAndApply(arg),\n\n    'interactions:before-action-end': arg => arg.interaction.modification.beforeEnd(arg),\n\n    'interactions:action-start': addEventModifiers,\n    'interactions:action-move': addEventModifiers,\n    'interactions:action-end': addEventModifiers,\n\n    'interactions:after-action-start': arg => arg.interaction.modification.restoreInteractionCoords(arg),\n    'interactions:after-action-move': arg => arg.interaction.modification.restoreInteractionCoords(arg),\n\n    'interactions:stop': arg => arg.interaction.modification.stop(arg),\n  },\n  before: ['actions'],\n}\n\nexport default modifiersBase\n","import * as Interact from '@interactjs/types/index'\n\nexport interface Defaults {\n  base: BaseDefaults\n  perAction: PerActionDefaults\n  actions: ActionDefaults\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ActionDefaults {\n}\n\nexport interface BaseDefaults {\n  preventDefault?: 'auto' | 'never' | string\n  deltaSource?: 'page' | 'client'\n  context?: Node\n}\n\nexport interface PerActionDefaults {\n  enabled?: boolean\n  origin?: Interact.Point | string | Interact.Element\n  listeners?: Interact.Listeners\n  allowFrom?: string | Interact.Element\n  ignoreFrom?: string | Interact.Element\n}\n\nexport type Options = Partial<BaseDefaults> & Partial<PerActionDefaults> & {\n  [P in keyof ActionDefaults]?: Partial<ActionDefaults[P]>\n}\n\n// export interface Options extends BaseDefaults, PerActionDefaults {}\n\nexport interface OptionsArg extends BaseDefaults, Interact.OrBoolean<Partial<ActionDefaults>> {}\n\nexport const defaults: Defaults = {\n  base: {\n    preventDefault: 'auto',\n    deltaSource: 'page',\n  },\n\n  perAction: {\n    enabled: false,\n    origin: { x: 0, y: 0 },\n  },\n\n  actions: {} as ActionDefaults,\n}\n","import * as Interact from '@interactjs/types/index'\nimport extend from '@interactjs/utils/extend'\nimport getOriginXY from '@interactjs/utils/getOriginXY'\nimport hypot from '@interactjs/utils/hypot'\n\nimport { BaseEvent } from './BaseEvent'\nimport { Interaction } from './Interaction'\nimport { defaults } from './defaultOptions'\n\nexport type EventPhase = keyof PhaseMap\n\nexport interface PhaseMap {\n  start: true\n  move: true\n  end: true\n}\n\n// defined outside of class definition to avoid assignment of undefined during\n// construction\nexport interface InteractEvent {\n  pageX: number\n  pageY: number\n\n  clientX: number\n  clientY: number\n\n  dx: number\n  dy: number\n\n  velocityX: number\n  velocityY: number\n}\n\nexport class InteractEvent<\n  T extends Interact.ActionName = never,\n  P extends EventPhase = EventPhase,\n> extends BaseEvent<T> {\n  target: Interact.Element\n  currentTarget: Interact.Element\n  relatedTarget: null = null\n  screenX?: number\n  screenY?: number\n  button: number\n  buttons: number\n  ctrlKey: boolean\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  page: Interact.Point\n  client: Interact.Point\n  delta: Interact.Point\n  rect: Interact.FullRect\n  x0: number\n  y0: number\n  t0: number\n  dt: number\n  duration: number\n  clientX0: number\n  clientY0: number\n  velocity: Interact.Point\n  speed: number\n  swipe: ReturnType<InteractEvent<T>['getSwipe']>\n  timeStamp: any\n  // drag\n  dragEnter?: Interact.Element\n  dragLeave?: Interact.Element\n  // resize\n  axes?: 'x' | 'y' | 'xy'\n  preEnd?: boolean\n\n  /** */\n  constructor (\n    interaction: Interaction,\n    event: Interact.PointerEventType,\n    actionName: T,\n    phase: P,\n    element: Interact.Element,\n    preEnd?: boolean,\n    type?: string,\n  ) {\n    super(interaction)\n\n    element = element || interaction.element\n\n    const target      = interaction.interactable\n    const deltaSource = (((target && target.options) || defaults) as any).deltaSource as 'page' | 'client'\n    const origin      = getOriginXY(target, element, actionName)\n    const starting    = phase === 'start'\n    const ending      = phase === 'end'\n    const prevEvent   = starting ? this : interaction.prevEvent\n    const coords      = starting\n      ? interaction.coords.start\n      : ending\n        ? { page: prevEvent.page, client: prevEvent.client, timeStamp: interaction.coords.cur.timeStamp }\n        : interaction.coords.cur\n\n    this.page      = extend({}, coords.page)\n    this.client    = extend({}, coords.client)\n    this.rect      = extend({}, interaction.rect)\n    this.timeStamp = coords.timeStamp\n\n    if (!ending) {\n      this.page.x -= origin.x\n      this.page.y -= origin.y\n\n      this.client.x -= origin.x\n      this.client.y -= origin.y\n    }\n\n    this.ctrlKey       = event.ctrlKey\n    this.altKey        = event.altKey\n    this.shiftKey      = event.shiftKey\n    this.metaKey       = event.metaKey\n    this.button        = (event as MouseEvent).button\n    this.buttons       = (event as MouseEvent).buttons\n    this.target        = element\n    this.currentTarget = element\n    this.preEnd        = preEnd\n    this.type          = type || (actionName + (phase || ''))\n    this.interactable  = target\n\n    this.t0 = starting\n      ? interaction.pointers[interaction.pointers.length - 1].downTime\n      : prevEvent.t0\n\n    this.x0       = interaction.coords.start.page.x - origin.x\n    this.y0       = interaction.coords.start.page.y - origin.y\n    this.clientX0 = interaction.coords.start.client.x - origin.x\n    this.clientY0 = interaction.coords.start.client.y - origin.y\n\n    if (starting || ending) {\n      this.delta = { x: 0, y: 0 }\n    }\n    else {\n      this.delta = {\n        x: this[deltaSource].x - prevEvent[deltaSource].x,\n        y: this[deltaSource].y - prevEvent[deltaSource].y,\n      }\n    }\n\n    this.dt        = interaction.coords.delta.timeStamp\n    this.duration  = this.timeStamp - this.t0\n\n    // velocity and speed in pixels per second\n    this.velocity = extend({}, interaction.coords.velocity[deltaSource])\n    this.speed = hypot(this.velocity.x, this.velocity.y)\n\n    this.swipe = (ending || phase === 'inertiastart') ? this.getSwipe() : null\n  }\n\n  getSwipe () {\n    const interaction = this._interaction\n\n    if (interaction.prevEvent.speed < 600 ||\n        this.timeStamp - interaction.prevEvent.timeStamp > 150) {\n      return null\n    }\n\n    let angle = 180 * Math.atan2(interaction.prevEvent.velocityY, interaction.prevEvent.velocityX) / Math.PI\n    const overlap = 22.5\n\n    if (angle < 0) {\n      angle += 360\n    }\n\n    const left = 135 - overlap <= angle && angle < 225 + overlap\n    const up   = 225 - overlap <= angle && angle < 315 + overlap\n\n    const right = !left && (315 - overlap <= angle || angle <  45 + overlap)\n    const down  = !up   &&   45 - overlap <= angle && angle < 135 + overlap\n\n    return {\n      up,\n      down,\n      left,\n      right,\n      angle,\n      speed: interaction.prevEvent.speed,\n      velocity: {\n        x: interaction.prevEvent.velocityX,\n        y: interaction.prevEvent.velocityY,\n      },\n    }\n  }\n\n  preventDefault () {}\n\n  /**\n   * Don't call listeners on the remaining targets\n   */\n  stopImmediatePropagation () {\n    this.immediatePropagationStopped = this.propagationStopped = true\n  }\n\n  /**\n   * Don't call any other listeners (even on the current target)\n   */\n  stopPropagation () {\n    this.propagationStopped = true\n  }\n}\n\n// getters and setters defined here to support typescript 3.6 and below which\n// don't support getter and setters in .d.ts files\nObject.defineProperties(InteractEvent.prototype, {\n  pageX: { get () { return this.page.x }, set (value) { this.page.x = value } },\n  pageY: { get () { return this.page.y }, set (value) { this.page.y = value } },\n\n  clientX: { get () { return this.client.x }, set (value) { this.client.x = value } },\n  clientY: { get () { return this.client.y }, set (value) { this.client.y = value } },\n\n  dx: { get () { return this.delta.x }, set (value) { this.delta.x = value } },\n  dy: { get () { return this.delta.y }, set (value) { this.delta.y = value } },\n\n  velocityX: { get () { return this.velocity.x }, set (value) { this.velocity.x = value } },\n  velocityY: { get () { return this.velocity.y }, set (value) { this.velocity.y = value } },\n\n})\n","import * as Interact from '@interactjs/types/index'\n\nexport class PointerInfo {\n  id: number\n  pointer: Interact.PointerType\n  event: Interact.PointerEventType\n  downTime: number\n  downTarget: Interact.EventTarget\n\n  constructor (\n    id: number,\n    pointer: Interact.PointerType,\n    event: Interact.PointerEventType,\n    downTime: number,\n    downTarget: Interact.EventTarget,\n  ) {\n    this.id = id\n    this.pointer = pointer\n    this.event = event\n    this.downTime = downTime\n    this.downTarget = downTarget\n  }\n}\n","import * as Interact from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport extend from '@interactjs/utils/extend'\nimport hypot from '@interactjs/utils/hypot'\nimport { warnOnce, copyAction } from '@interactjs/utils/misc'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport { InteractEvent, EventPhase } from './InteractEvent'\nimport { Interactable } from './Interactable'\nimport { PointerInfo } from './PointerInfo'\nimport { ActionName } from './scope'\n\nexport interface ActionProps<T extends ActionName = Interact.ActionName> {\n  name: T\n  axis?: 'x' | 'y' | 'xy'\n  edges?: Interact.EdgeOptions\n}\n\nexport interface StartAction extends ActionProps {\n  name: ActionName\n}\n\nexport enum _ProxyValues {\n  interactable = '',\n  element = '',\n  prepared = '',\n  pointerIsDown = '',\n  pointerWasMoved = '',\n  _proxy = ''\n}\n\nexport enum _ProxyMethods {\n  start = '',\n  move = '',\n  end = '',\n  stop = '',\n  interacting = ''\n}\n\nexport type PointerArgProps<T extends {} = {}> = {\n  pointer: Interact.PointerType\n  event: Interact.PointerEventType\n  eventTarget: Interact.EventTarget\n  pointerIndex: number\n  pointerInfo: PointerInfo\n  interaction: Interaction\n} & T\n\nexport interface DoPhaseArg<T extends ActionName, P extends EventPhase> {\n  event: Interact.PointerEventType\n  phase: EventPhase\n  interaction: Interaction<T>\n  iEvent: InteractEvent<T, P>\n  preEnd?: boolean\n  type?: string\n}\n\nexport type DoAnyPhaseArg = DoPhaseArg<ActionName, EventPhase>\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:new': { interaction: Interaction }\n    'interactions:down': PointerArgProps<{\n      type: 'down'\n    }>\n    'interactions:move': PointerArgProps<{\n      type: 'move'\n      dx: number\n      dy: number\n      duplicate: boolean\n    }>\n    'interactions:up': PointerArgProps<{\n      type: 'up'\n      curEventTarget: EventTarget\n    }>\n    'interactions:cancel': SignalArgs['interactions:up'] & {\n      type: 'cancel'\n      curEventTarget: EventTarget\n    }\n    'interactions:update-pointer': PointerArgProps<{\n      down: boolean\n    }>\n    'interactions:remove-pointer': PointerArgProps\n    'interactions:blur': { interaction: Interaction, event: Event, type: 'blur' }\n    'interactions:before-action-start': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-start': DoAnyPhaseArg\n    'interactions:after-action-start': DoAnyPhaseArg\n    'interactions:before-action-move': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-move': DoAnyPhaseArg\n    'interactions:after-action-move': DoAnyPhaseArg\n    'interactions:before-action-end': Omit<DoAnyPhaseArg, 'iEvent'>\n    'interactions:action-end': DoAnyPhaseArg\n    'interactions:after-action-end': DoAnyPhaseArg\n    'interactions:stop': { interaction: Interaction }\n  }\n}\n\nexport type InteractionProxy<T extends ActionName = ActionName> = Pick<\nInteraction<T>,\nkeyof typeof _ProxyValues | keyof typeof _ProxyMethods\n>\n\nlet idCounter = 0\n\nexport class Interaction<T extends ActionName = ActionName> {\n  // current interactable being interacted with\n  interactable: Interactable = null\n\n  // the target element of the interactable\n  element: Interact.Element = null\n  rect: Interact.FullRect\n  _rects?: {\n    start: Interact.FullRect\n    corrected: Interact.FullRect\n    previous: Interact.FullRect\n    delta: Interact.FullRect\n  }\n  edges: Interact.EdgeOptions\n\n  _scopeFire: Interact.Scope['fire']\n\n  // action that's ready to be fired on next move event\n  prepared: ActionProps<T> = {\n    name : null,\n    axis : null,\n    edges: null,\n  }\n\n  pointerType: string\n\n  // keep track of added pointers\n  pointers: PointerInfo[] = []\n\n  // pointerdown/mousedown/touchstart event\n  downEvent: Interact.PointerEventType = null\n\n  downPointer: Interact.PointerType = {} as Interact.PointerType\n\n  _latestPointer: {\n    pointer: Interact.PointerType\n    event: Interact.PointerEventType\n    eventTarget: Node\n  } = {\n    pointer: null,\n    event: null,\n    eventTarget: null,\n  }\n\n  // previous action event\n  prevEvent: InteractEvent<T, EventPhase> = null\n\n  pointerIsDown = false\n  pointerWasMoved = false\n  _interacting = false\n  _ending = false\n  _stopped = true\n  _proxy: InteractionProxy<T> = null\n\n  simulation = null\n\n  /** @internal */ get pointerMoveTolerance () {\n    return 1\n  }\n\n  /**\n   * @alias Interaction.prototype.move\n   */\n  doMove = warnOnce(\n    function (this: Interaction, signalArg: any) {\n      this.move(signalArg)\n    },\n    'The interaction.doMove() method has been renamed to interaction.move()')\n\n  coords: Interact.CoordsSet = {\n    // Starting InteractEvent pointer coordinates\n    start: pointerUtils.newCoords(),\n    // Previous native pointer move event coordinates\n    prev: pointerUtils.newCoords(),\n    // current native pointer move event coordinates\n    cur: pointerUtils.newCoords(),\n    // Change in coordinates and time of the pointer\n    delta: pointerUtils.newCoords(),\n    // pointer velocity\n    velocity: pointerUtils.newCoords(),\n  }\n\n  readonly _id: number = idCounter++\n\n  /** */\n  constructor ({ pointerType, scopeFire }: {\n    pointerType?: string\n    scopeFire: Interact.Scope['fire']\n  }) {\n    this._scopeFire = scopeFire\n    this.pointerType = pointerType\n\n    const that = this\n\n    this._proxy = {} as InteractionProxy<T>\n\n    for (const key in _ProxyValues) {\n      Object.defineProperty(this._proxy, key, {\n        get () { return that[key] },\n      })\n    }\n\n    for (const key in _ProxyMethods) {\n      Object.defineProperty(this._proxy, key, {\n        value: (...args: any[]) => that[key](...args),\n      })\n    }\n\n    this._scopeFire('interactions:new', { interaction: this })\n  }\n\n  pointerDown (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget) {\n    const pointerIndex = this.updatePointer(pointer, event, eventTarget, true)\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:down', {\n      pointer,\n      event,\n      eventTarget,\n      pointerIndex,\n      pointerInfo,\n      type: 'down',\n      interaction: this,\n    })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable({\n   *     // disable the default drag start by down->move\n   *     manualStart: true\n   *   })\n   *   // start dragging after the user holds the pointer down\n   *   .on('hold', function (event) {\n   *     var interaction = event.interaction\n   *\n   *     if (!interaction.interacting()) {\n   *       interaction.start({ name: 'drag' },\n   *                         event.interactable,\n   *                         event.currentTarget)\n   *     }\n   * })\n   * ```\n   *\n   * Start an action with the given Interactable and Element as tartgets. The\n   * action must be enabled for the target Interactable and an appropriate\n   * number of pointers must be held down - 1 for drag/resize, 2 for gesture.\n   *\n   * Use it with `interactable.<action>able({ manualStart: false })` to always\n   * [start actions manually](https://github.com/taye/interact.js/issues/114)\n   *\n   * @param {object} action   The action to be performed - drag, resize, etc.\n   * @param {Interactable} target  The Interactable to target\n   * @param {Element} element The DOM Element to target\n   * @return {object} interact\n   */\n  start (action: StartAction, interactable: Interactable, element: Interact.Element) {\n    if (this.interacting() ||\n        !this.pointerIsDown ||\n        this.pointers.length < (action.name === 'gesture' ? 2 : 1) ||\n        !interactable.options[action.name].enabled) {\n      return false\n    }\n\n    copyAction(this.prepared, action)\n\n    this.interactable = interactable\n    this.element      = element\n    this.rect         = interactable.getRect(element)\n    this.edges        = this.prepared.edges\n      ? extend({}, this.prepared.edges)\n      : { left: true, right: true, top: true, bottom: true }\n    this._stopped     = false\n    this._interacting = this._doPhase({\n      interaction: this,\n      event: this.downEvent,\n      phase: 'start',\n    }) && !this._stopped\n\n    return this._interacting\n  }\n\n  pointerMove (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget) {\n    if (!this.simulation && !(this.modification && this.modification.endResult)) {\n      this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const duplicateMove = (this.coords.cur.page.x === this.coords.prev.page.x &&\n                           this.coords.cur.page.y === this.coords.prev.page.y &&\n                           this.coords.cur.client.x === this.coords.prev.client.x &&\n                           this.coords.cur.client.y === this.coords.prev.client.y)\n\n    let dx: number\n    let dy: number\n\n    // register movement greater than pointerMoveTolerance\n    if (this.pointerIsDown && !this.pointerWasMoved) {\n      dx = this.coords.cur.client.x - this.coords.start.client.x\n      dy = this.coords.cur.client.y - this.coords.start.client.y\n\n      this.pointerWasMoved = hypot(dx, dy) > this.pointerMoveTolerance\n    }\n\n    const pointerIndex = this.getPointerIndex(pointer)\n    const signalArg = {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      type: 'move' as const,\n      eventTarget,\n      dx,\n      dy,\n      duplicate: duplicateMove,\n      interaction: this,\n    }\n\n    if (!duplicateMove) {\n      // set pointer coordinate, time changes and velocity\n      pointerUtils.setCoordVelocity(this.coords.velocity, this.coords.delta)\n    }\n\n    this._scopeFire('interactions:move', signalArg)\n\n    if (!duplicateMove && !this.simulation) {\n      // if interacting, fire an 'action-move' signal etc\n      if (this.interacting()) {\n        signalArg.type = null\n        this.move(signalArg)\n      }\n\n      if (this.pointerWasMoved) {\n        pointerUtils.copyCoords(this.coords.prev, this.coords.cur)\n      }\n    }\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('dragmove', function (event) {\n   *     if (someCondition) {\n   *       // change the snap settings\n   *       event.interactable.draggable({ snap: { targets: [] }})\n   *       // fire another move event with re-calculated snap\n   *       event.interaction.move()\n   *     }\n   *   })\n   * ```\n   *\n   * Force a move of the current action at the same coordinates. Useful if\n   * snap/restrict has been changed and you want a movement with the new\n   * settings.\n   */\n  move (signalArg?: any) {\n    if (!signalArg || !signalArg.event) {\n      pointerUtils.setZeroCoords(this.coords.delta)\n    }\n\n    signalArg = extend({\n      pointer: this._latestPointer.pointer,\n      event: this._latestPointer.event,\n      eventTarget: this._latestPointer.eventTarget,\n      interaction: this,\n    }, signalArg || {})\n\n    signalArg.phase = 'move'\n\n    this._doPhase(signalArg)\n  }\n\n  // End interact move events and stop auto-scroll unless simulation is running\n  pointerUp (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget, curEventTarget: Interact.EventTarget) {\n    let pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) {\n      pointerIndex = this.updatePointer(pointer, event, eventTarget, false)\n    }\n\n    const type = /cancel$/i.test(event.type) ? 'cancel' : 'up'\n\n    this._scopeFire(`interactions:${type}` as 'interactions:up' | 'interactions:cancel', {\n      pointer,\n      pointerIndex,\n      pointerInfo: this.pointers[pointerIndex],\n      event,\n      eventTarget,\n      type: type as any,\n      curEventTarget,\n      interaction: this,\n    })\n\n    if (!this.simulation) {\n      this.end(event)\n    }\n\n    this.pointerIsDown = false\n    this.removePointer(pointer, event)\n  }\n\n  documentBlur (event: Event) {\n    this.end(event as any)\n    this._scopeFire('interactions:blur', { event, type: 'blur', interaction: this })\n  }\n\n  /**\n   * ```js\n   * interact(target)\n   *   .draggable(true)\n   *   .on('move', function (event) {\n   *     if (event.pageX > 1000) {\n   *       // end the current action\n   *       event.interaction.end()\n   *       // stop all further listeners from being called\n   *       event.stopImmediatePropagation()\n   *     }\n   *   })\n   * ```\n   *\n   * @param {PointerEvent} [event]\n   */\n  end (event?: Interact.PointerEventType) {\n    this._ending = true\n    event = event || this._latestPointer.event\n    let endPhaseResult: boolean\n\n    if (this.interacting()) {\n      endPhaseResult = this._doPhase({\n        event,\n        interaction: this,\n        phase: 'end',\n      })\n    }\n\n    this._ending = false\n\n    if (endPhaseResult === true) {\n      this.stop()\n    }\n  }\n\n  currentAction () {\n    return this._interacting ? this.prepared.name : null\n  }\n\n  interacting () {\n    return this._interacting\n  }\n\n  /** */\n  stop () {\n    this._scopeFire('interactions:stop', { interaction: this })\n\n    this.interactable = this.element = null\n\n    this._interacting = false\n    this._stopped = true\n    this.prepared.name = this.prevEvent = null\n  }\n\n  getPointerIndex (pointer: Interact.PointerType) {\n    const pointerId = pointerUtils.getPointerId(pointer)\n\n    // mouse and pen interactions may have only one pointer\n    return (this.pointerType === 'mouse' || this.pointerType === 'pen')\n      ? this.pointers.length - 1\n      : arr.findIndex(this.pointers, curPointer => curPointer.id === pointerId)\n  }\n\n  getPointerInfo (pointer: any) {\n    return this.pointers[this.getPointerIndex(pointer)]\n  }\n\n  updatePointer (pointer: Interact.PointerType, event: Interact.PointerEventType, eventTarget: Interact.EventTarget, down?: boolean) {\n    const id = pointerUtils.getPointerId(pointer)\n    let pointerIndex = this.getPointerIndex(pointer)\n    let pointerInfo = this.pointers[pointerIndex]\n\n    down = down === false\n      ? false\n      : down || /(down|start)$/i.test(event.type)\n\n    if (!pointerInfo) {\n      pointerInfo = new PointerInfo(\n        id,\n        pointer,\n        event,\n        null,\n        null,\n      )\n\n      pointerIndex = this.pointers.length\n      this.pointers.push(pointerInfo)\n    }\n    else {\n      pointerInfo.pointer = pointer\n    }\n\n    pointerUtils.setCoords(this.coords.cur, this.pointers.map(p => p.pointer), this._now())\n    pointerUtils.setCoordDeltas(this.coords.delta, this.coords.prev, this.coords.cur)\n\n    if (down) {\n      this.pointerIsDown = true\n\n      pointerInfo.downTime = this.coords.cur.timeStamp\n      pointerInfo.downTarget = eventTarget\n      pointerUtils.pointerExtend(this.downPointer, pointer)\n\n      if (!this.interacting()) {\n        pointerUtils.copyCoords(this.coords.start, this.coords.cur)\n        pointerUtils.copyCoords(this.coords.prev, this.coords.cur)\n\n        this.downEvent = event\n        this.pointerWasMoved = false\n      }\n    }\n\n    this._updateLatestPointer(pointer, event, eventTarget)\n\n    this._scopeFire('interactions:update-pointer', {\n      pointer,\n      event,\n      eventTarget,\n      down,\n      pointerInfo,\n      pointerIndex,\n      interaction: this,\n    })\n\n    return pointerIndex\n  }\n\n  removePointer (pointer: Interact.PointerType, event: Interact.PointerEventType) {\n    const pointerIndex = this.getPointerIndex(pointer)\n\n    if (pointerIndex === -1) { return }\n\n    const pointerInfo = this.pointers[pointerIndex]\n\n    this._scopeFire('interactions:remove-pointer', {\n      pointer,\n      event,\n      eventTarget: null,\n      pointerIndex,\n      pointerInfo,\n      interaction: this,\n    })\n\n    this.pointers.splice(pointerIndex, 1)\n  }\n\n  _updateLatestPointer (pointer, event, eventTarget) {\n    this._latestPointer.pointer = pointer\n    this._latestPointer.event = event\n    this._latestPointer.eventTarget = eventTarget\n  }\n\n  destroy () {\n    this._latestPointer.pointer = null\n    this._latestPointer.event = null\n    this._latestPointer.eventTarget = null\n  }\n\n  _createPreparedEvent<P extends EventPhase> (event: Interact.PointerEventType, phase: P, preEnd?: boolean, type?: string) {\n    return new InteractEvent<T, P>(this, event, this.prepared.name, phase, this.element, preEnd, type)\n  }\n\n  _fireEvent<P extends EventPhase> (iEvent: InteractEvent<T, P>) {\n    this.interactable.fire(iEvent)\n\n    if (!this.prevEvent || iEvent.timeStamp >= this.prevEvent.timeStamp) {\n      this.prevEvent = iEvent\n    }\n  }\n\n  _doPhase<P extends EventPhase> (signalArg: Omit<DoPhaseArg<T, P>, 'iEvent'> & { iEvent?: InteractEvent<T, P> }) {\n    const { event, phase, preEnd, type } = signalArg\n    const { rect } = this\n\n    if (rect && phase === 'move') {\n      // update the rect changes due to pointer move\n      rectUtils.addEdges(this.edges, rect, this.coords.delta[this.interactable.options.deltaSource])\n\n      rect.width = rect.right - rect.left\n      rect.height = rect.bottom - rect.top\n    }\n\n    const beforeResult = this._scopeFire(`interactions:before-action-${phase}` as any, signalArg)\n\n    if (beforeResult === false) {\n      return false\n    }\n\n    const iEvent = signalArg.iEvent = this._createPreparedEvent(event, phase, preEnd, type)\n\n    this._scopeFire(`interactions:action-${phase}` as any, signalArg)\n\n    if (phase === 'start') { this.prevEvent = iEvent }\n\n    this._fireEvent(iEvent)\n\n    this._scopeFire(`interactions:after-action-${phase}` as any, signalArg)\n\n    return true\n  }\n\n  _now () { return Date.now() }\n}\n\nexport default Interaction\nexport { PointerInfo }\n","import { _ProxyMethods } from '@interactjs/core/Interaction'\nimport * as Interact from '@interactjs/types/index'\nimport * as rectUtils from '@interactjs/utils/rect'\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    offsetBy?: typeof offsetBy\n    offset: {\n      total: Interact.Point\n      pending: Interact.Point\n    }\n  }\n\n  // eslint-disable-next-line no-shadow\n  enum _ProxyMethods {\n    // eslint-disable-next-line no-shadow\n    offsetBy = ''\n  }\n}\n\n(_ProxyMethods as any).offsetBy = ''\n\nexport function addTotal (interaction: Interact.Interaction) {\n  if (!interaction.pointerIsDown) { return }\n\n  addToCoords(interaction.coords.cur, interaction.offset.total)\n\n  interaction.offset.pending.x = 0\n  interaction.offset.pending.y = 0\n}\n\nfunction beforeAction ({ interaction }: { interaction: Interact.Interaction }) {\n  applyPending(interaction)\n}\n\nfunction beforeEnd ({ interaction }: { interaction: Interact.Interaction }): boolean | void {\n  const hadPending = applyPending(interaction)\n\n  if (!hadPending) { return }\n\n  interaction.move({ offset: true })\n  interaction.end()\n\n  return false\n}\n\nfunction end ({ interaction }: { interaction: Interact.Interaction }) {\n  interaction.offset.total.x = 0\n  interaction.offset.total.y = 0\n  interaction.offset.pending.x = 0\n  interaction.offset.pending.y = 0\n}\n\nexport function applyPending (interaction: Interact.Interaction) {\n  if (!hasPending(interaction)) {\n    return false\n  }\n\n  const { pending } = interaction.offset\n\n  addToCoords(interaction.coords.cur, pending)\n  addToCoords(interaction.coords.delta, pending)\n  rectUtils.addEdges(interaction.edges, interaction.rect, pending)\n\n  pending.x = 0\n  pending.y = 0\n\n  return true\n}\n\nfunction offsetBy (this: Interact.Interaction, { x, y }: Interact.Point) {\n  this.offset.pending.x += x\n  this.offset.pending.y += y\n\n  this.offset.total.x += x\n  this.offset.total.y += y\n}\n\nfunction addToCoords ({ page, client }, { x, y }: Interact.Point) {\n  page.x += x\n  page.y += y\n  client.x += x\n  client.y += y\n}\n\nfunction hasPending (interaction) {\n  return !!(interaction.offset.pending.x || interaction.offset.pending.y)\n}\n\nconst offset: Interact.Plugin = {\n  id: 'offset',\n  before: ['modifiers'],\n  install (scope) {\n    scope.Interaction.prototype.offsetBy = offsetBy\n  },\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.offset = {\n        total: { x: 0, y: 0 },\n        pending: { x: 0, y: 0 },\n      }\n    },\n    'interactions:update-pointer': ({ interaction }) => addTotal(interaction),\n    'interactions:before-action-start': beforeAction,\n    'interactions:before-action-move': beforeAction,\n    'interactions:before-action-end': beforeEnd,\n    'interactions:stop': end,\n  },\n}\n\nexport default offset\n","import Modification from '@interactjs/modifiers/Modification'\nimport * as modifiers from '@interactjs/modifiers/base'\nimport offset from '@interactjs/offset/plugin'\nimport * as Interact from '@interactjs/types/index'\nimport * as dom from '@interactjs/utils/domUtils'\nimport hypot from '@interactjs/utils/hypot'\nimport is from '@interactjs/utils/is'\nimport { copyCoords } from '@interactjs/utils/pointerUtils'\nimport raf from '@interactjs/utils/raf'\n\ndeclare module '@interactjs/core/InteractEvent' {\n  // eslint-disable-next-line no-shadow\n  interface PhaseMap {\n    resume?: true\n    inertiastart?: true\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    inertia?: InertiaState\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface PerActionDefaults {\n    inertia?: {\n      enabled?: boolean\n      resistance?: number        // the lambda in exponential decay\n      minSpeed?: number          // target speed must be above this for inertia to start\n      endSpeed?: number          // the speed at which inertia is slow enough to stop\n      allowResume?: true         // allow resuming an action in inertia phase\n      smoothEndDuration?: number // animate to snap/restrict endOnly if there's no inertia\n    }\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:before-action-inertiastart': Omit<Interact.DoPhaseArg<Interact.ActionName, 'inertiastart'>, 'iEvent'>\n    'interactions:action-inertiastart': Interact.DoPhaseArg<Interact.ActionName, 'inertiastart'>\n    'interactions:after-action-inertiastart': Interact.DoPhaseArg<Interact.ActionName, 'inertiastart'>\n    'interactions:before-action-resume': Omit<Interact.DoPhaseArg<Interact.ActionName, 'resume'>, 'iEvent'>\n    'interactions:action-resume': Interact.DoPhaseArg<Interact.ActionName, 'resume'>\n    'interactions:after-action-resume': Interact.DoPhaseArg<Interact.ActionName, 'resume'>\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  const {\n    defaults,\n  } = scope\n\n  scope.usePlugin(offset)\n  scope.usePlugin(modifiers.default)\n  scope.actions.phases.inertiastart = true\n  scope.actions.phases.resume = true\n\n  defaults.perAction.inertia = {\n    enabled          : false,\n    resistance       : 10,    // the lambda in exponential decay\n    minSpeed         : 100,   // target speed must be above this for inertia to start\n    endSpeed         : 10,    // the speed at which inertia is slow enough to stop\n    allowResume      : true,  // allow resuming an action in inertia phase\n    smoothEndDuration: 300,   // animate to snap/restrict endOnly if there's no inertia\n  }\n}\n\nexport class InertiaState {\n  active = false\n  isModified = false\n  smoothEnd = false\n  allowResume = false\n\n  modification: Modification = null\n  modifierCount = 0\n  modifierArg: modifiers.ModifierArg = null\n\n  startCoords: Interact.Point = null\n  t0 = 0\n  v0 = 0\n\n  te = 0\n  targetOffset: Interact.Point = null\n  modifiedOffset: Interact.Point = null\n  currentOffset: Interact.Point = null\n\n  lambda_v0? = 0 // eslint-disable-line camelcase\n  one_ve_v0? = 0 // eslint-disable-line camelcase\n  timeout: number = null\n  readonly interaction: Interact.Interaction\n\n  constructor (interaction: Interact.Interaction) {\n    this.interaction = interaction\n  }\n\n  start (event: Interact.PointerEventType) {\n    const { interaction } = this\n    const options = getOptions(interaction)\n\n    if (!options || !options.enabled) {\n      return false\n    }\n\n    const { client: velocityClient } = interaction.coords.velocity\n    const pointerSpeed = hypot(velocityClient.x, velocityClient.y)\n    const modification = this.modification || (this.modification = new Modification(interaction))\n\n    modification.copyFrom(interaction.modification)\n\n    this.t0 = interaction._now()\n    this.allowResume = options.allowResume\n    this.v0 = pointerSpeed\n    this.currentOffset = { x: 0, y: 0 }\n    this.startCoords = interaction.coords.cur.page\n\n    this.modifierArg = {\n      interaction,\n      interactable: interaction.interactable,\n      element: interaction.element,\n      rect: interaction.rect,\n      edges: interaction.edges,\n      pageCoords: this.startCoords,\n      preEnd: true,\n      phase: 'inertiastart',\n    }\n\n    const thrown = (\n      (this.t0 - interaction.coords.cur.timeStamp) < 50 &&\n      pointerSpeed > options.minSpeed &&\n      pointerSpeed > options.endSpeed\n    )\n\n    if (thrown) {\n      this.startInertia()\n    } else {\n      modification.result = modification.setAll(this.modifierArg)\n\n      if (!modification.result.changed) {\n        return false\n      }\n\n      this.startSmoothEnd()\n    }\n\n    // force modification change\n    interaction.modification.result.rect = null\n\n    // bring inertiastart event to the target coords\n    interaction.offsetBy(this.targetOffset)\n    interaction._doPhase({\n      interaction,\n      event,\n      phase: 'inertiastart',\n    })\n    interaction.offsetBy({ x: -this.targetOffset.x, y: -this.targetOffset.y })\n    // force modification change\n    interaction.modification.result.rect = null\n\n    this.active = true\n    interaction.simulation = this\n\n    return true\n  }\n\n  startInertia () {\n    const startVelocity = this.interaction.coords.velocity.client\n    const options = getOptions(this.interaction)\n    const lambda = options.resistance\n    const inertiaDur = -Math.log(options.endSpeed / this.v0) / lambda\n\n    this.targetOffset = {\n      x: (startVelocity.x - inertiaDur) / lambda,\n      y: (startVelocity.y - inertiaDur) / lambda,\n    }\n\n    this.te = inertiaDur\n    this.lambda_v0 = lambda / this.v0\n    this.one_ve_v0 = 1 - options.endSpeed / this.v0\n\n    const { modification, modifierArg } = this\n\n    modifierArg.pageCoords = {\n      x: this.startCoords.x + this.targetOffset.x,\n      y: this.startCoords.y + this.targetOffset.y,\n    }\n\n    modification.result = modification.setAll(modifierArg)\n\n    if (modification.result.changed) {\n      this.isModified = true\n      this.modifiedOffset = {\n        x: this.targetOffset.x + modification.result.delta.x,\n        y: this.targetOffset.y + modification.result.delta.y,\n      }\n    }\n\n    this.timeout = raf.request(() => this.inertiaTick())\n  }\n\n  startSmoothEnd () {\n    this.smoothEnd = true\n    this.isModified = true\n    this.targetOffset = {\n      x: this.modification.result.delta.x,\n      y: this.modification.result.delta.y,\n    }\n\n    this.timeout = raf.request(() => this.smoothEndTick())\n  }\n\n  inertiaTick () {\n    const { interaction } = this\n    const options = getOptions(interaction)\n    const lambda = options.resistance\n    const t = (interaction._now() - this.t0) / 1000\n\n    if (t < this.te) {\n      const progress =  1 - (Math.exp(-lambda * t) - this.lambda_v0) / this.one_ve_v0\n      let newOffset: Interact.Point\n\n      if (this.isModified) {\n        newOffset = getQuadraticCurvePoint(\n          0, 0,\n          this.targetOffset.x, this.targetOffset.y,\n          this.modifiedOffset.x, this.modifiedOffset.y,\n          progress,\n        )\n      }\n      else {\n        newOffset = {\n          x: this.targetOffset.x * progress,\n          y: this.targetOffset.y * progress,\n        }\n      }\n\n      const delta = { x: newOffset.x - this.currentOffset.x, y: newOffset.y - this.currentOffset.y }\n\n      this.currentOffset.x += delta.x\n      this.currentOffset.y += delta.y\n\n      interaction.offsetBy(delta)\n      interaction.move()\n\n      this.timeout = raf.request(() => this.inertiaTick())\n    }\n    else {\n      interaction.offsetBy({\n        x: this.modifiedOffset.x - this.currentOffset.x,\n        y: this.modifiedOffset.y - this.currentOffset.y,\n      })\n\n      this.end()\n    }\n  }\n\n  smoothEndTick () {\n    const { interaction } = this\n    const t = interaction._now() - this.t0\n    const { smoothEndDuration: duration } = getOptions(interaction)\n\n    if (t < duration) {\n      const newOffset = {\n        x: easeOutQuad(t, 0, this.targetOffset.x, duration),\n        y: easeOutQuad(t, 0, this.targetOffset.y, duration),\n      }\n      const delta = {\n        x: newOffset.x - this.currentOffset.x,\n        y: newOffset.y - this.currentOffset.y,\n      }\n\n      this.currentOffset.x += delta.x\n      this.currentOffset.y += delta.y\n\n      interaction.offsetBy(delta)\n      interaction.move({ skipModifiers: this.modifierCount })\n\n      this.timeout = raf.request(() => this.smoothEndTick())\n    }\n    else {\n      interaction.offsetBy({\n        x: this.targetOffset.x - this.currentOffset.x,\n        y: this.targetOffset.y - this.currentOffset.y,\n      })\n\n      this.end()\n    }\n  }\n\n  resume ({ pointer, event, eventTarget }: Interact.SignalArgs['interactions:down']) {\n    const { interaction } = this\n\n    // undo inertia changes to interaction coords\n    interaction.offsetBy({\n      x: -this.currentOffset.x,\n      y: -this.currentOffset.y,\n    })\n\n    // update pointer at pointer down position\n    interaction.updatePointer(pointer, event, eventTarget, true)\n\n    // fire resume signals and event\n    interaction._doPhase({\n      interaction,\n      event,\n      phase: 'resume',\n    })\n    copyCoords(interaction.coords.prev, interaction.coords.cur)\n\n    this.stop()\n  }\n\n  end () {\n    this.interaction.move()\n    this.interaction.end()\n    this.stop()\n  }\n\n  stop () {\n    this.active = this.smoothEnd = false\n    this.interaction.simulation = null\n    raf.cancel(this.timeout)\n  }\n}\n\nfunction start ({ interaction, event }: Interact.DoPhaseArg<Interact.ActionName, 'end'>) {\n  if (!interaction._interacting || interaction.simulation) {\n    return null\n  }\n\n  const started = interaction.inertia.start(event)\n\n  // prevent action end if inertia or smoothEnd\n  return started ? false : null\n}\n\n// Check if the down event hits the current inertia target\n// control should be return to the user\nfunction resume (arg: Interact.SignalArgs['interactions:down']) {\n  const { interaction, eventTarget } = arg\n  const state = interaction.inertia\n\n  if (!state.active) { return }\n\n  let element = eventTarget as Node\n\n  // climb up the DOM tree from the event target\n  while (is.element(element)) {\n    // if interaction element is the current inertia target element\n    if (element === interaction.element) {\n      state.resume(arg)\n      break\n    }\n\n    element = dom.parentNode(element)\n  }\n}\n\nfunction stop ({ interaction }: { interaction: Interact.Interaction }) {\n  const state = interaction.inertia\n\n  if (state.active) {\n    state.stop()\n  }\n}\n\nfunction getOptions ({ interactable, prepared }: Interact.Interaction) {\n  return interactable &&\n    interactable.options &&\n    prepared.name &&\n    interactable.options[prepared.name].inertia\n}\n\nconst inertia: Interact.Plugin = {\n  id: 'inertia',\n  before: ['modifiers'],\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.inertia = new InertiaState(interaction)\n    },\n\n    'interactions:before-action-end': start,\n    'interactions:down': resume,\n    'interactions:stop': stop,\n\n    'interactions:before-action-resume': arg => {\n      const { modification } = arg.interaction\n\n      modification.stop(arg)\n      modification.start(arg, arg.interaction.coords.cur.page)\n      modification.applyToInteraction(arg)\n    },\n\n    'interactions:before-action-inertiastart': arg => arg.interaction.modification.setAndApply(arg),\n    'interactions:action-resume': modifiers.addEventModifiers,\n    'interactions:action-inertiastart': modifiers.addEventModifiers,\n    'interactions:after-action-inertiastart': arg => arg.interaction.modification.restoreInteractionCoords(arg),\n    'interactions:after-action-resume': arg => arg.interaction.modification.restoreInteractionCoords(arg),\n  },\n}\n\n// http://stackoverflow.com/a/5634528/2280888\nfunction _getQBezierValue (t: number, p1: number, p2: number, p3: number) {\n  const iT = 1 - t\n  return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3\n}\n\nfunction getQuadraticCurvePoint (\n  startX: number, startY: number, cpX: number, cpY: number, endX: number, endY: number, position: number) {\n  return {\n    x:  _getQBezierValue(position, startX, cpX, endX),\n    y:  _getQBezierValue(position, startY, cpY, endY),\n  }\n}\n\n// http://gizma.com/easing/\nfunction easeOutQuad (t: number, b: number, c: number, d: number) {\n  t /= d\n  return -c * t * (t - 2) + b\n}\n\nexport default inertia\n","import * as Interact from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport extend from '@interactjs/utils/extend'\nimport normalize, { NormalizedListeners } from '@interactjs/utils/normalizeListeners'\n\nfunction fireUntilImmediateStopped<\n  T extends Interact.ActionName,\n  P extends Interact.EventPhase,\n> (event: Interact.InteractEvent<T, P>, listeners: Interact.Listener[]) {\n  for (const listener of listeners) {\n    if (event.immediatePropagationStopped) { break }\n\n    listener(event)\n  }\n}\n\nexport class Eventable {\n  options: any\n  types: NormalizedListeners = {}\n  propagationStopped = false\n  immediatePropagationStopped = false\n  global: any\n\n  constructor (options?: { [index: string]: any }) {\n    this.options = extend({}, options || {})\n  }\n\n  fire (event: any) {\n    let listeners: Interact.Listener[]\n    const global = this.global\n\n    // Interactable#on() listeners\n    // tslint:disable no-conditional-assignment\n    if ((listeners = this.types[event.type])) {\n      fireUntilImmediateStopped(event, listeners)\n    }\n\n    // interact.on() listeners\n    if (!event.propagationStopped && global && (listeners = global[event.type]))  {\n      fireUntilImmediateStopped(event, listeners)\n    }\n  }\n\n  on (type: string, listener: Interact.ListenersArg) {\n    const listeners = normalize(type, listener)\n\n    for (type in listeners) {\n      this.types[type] = arr.merge(this.types[type] || [], listeners[type])\n    }\n  }\n\n  off (type: string, listener: Interact.ListenersArg) {\n    const listeners = normalize(type, listener)\n\n    for (type in listeners) {\n      const eventList = this.types[type]\n\n      if (!eventList || !eventList.length) { continue }\n\n      for (const subListener of listeners[type]) {\n        const index = eventList.indexOf(subListener)\n\n        if (index !== -1) {\n          eventList.splice(index, 1)\n        }\n      }\n    }\n  }\n\n  getRect (_element: Interact.Element): Interact.Rect {\n    return null\n  }\n}\n","import * as Interact from '@interactjs/types/index'\n\nexport default function isNonNativeEvent (type: string, actions: Interact.Actions) {\n  if (actions.phaselessTypes[type]) { return true }\n\n  for (const name in actions.map) {\n    if (type.indexOf(name) === 0 && type.substr(name.length) in actions.phases) {\n      return true\n    }\n  }\n\n  return false\n}\n","/* eslint-disable no-dupe-class-members */\nimport * as Interact from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport { getElementRect, matchesUpTo, nodeContains, trySelector } from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport normalizeListeners from '@interactjs/utils/normalizeListeners'\nimport { getWindow } from '@interactjs/utils/window'\n\nimport { Eventable } from './Eventable'\nimport { ActionDefaults, Defaults, Options } from './defaultOptions'\nimport isNonNativeEvent from './isNonNativeEvent'\n\ntype IgnoreValue = string | Interact.Element | boolean\ntype DeltaSource = 'page' | 'client'\n\n/** */\nexport class Interactable implements Partial<Eventable> {\n  /** @internal */ get _defaults (): Defaults {\n    return {\n      base: {},\n      perAction: {},\n      actions: {} as ActionDefaults,\n    }\n  }\n\n  readonly options!: Required<Options>\n  readonly _actions: Interact.Actions\n  readonly target: Interact.Target\n  readonly events = new Eventable()\n  readonly _context: Interact.Context\n  readonly _win: Window\n  readonly _doc: Document\n  readonly _scopeEvents: Interact.Scope['events']\n\n  /** @internal */ _rectChecker?: typeof Interactable.prototype.getRect\n\n  /** */\n  constructor (target: Interact.Target, options: any, defaultContext: Document | Interact.Element, scopeEvents: Interact.Scope['events']) {\n    this._actions = options.actions\n    this.target   = target\n    this._context = options.context || defaultContext\n    this._win     = getWindow(trySelector(target) ? this._context : target)\n    this._doc     = this._win.document\n    this._scopeEvents = scopeEvents\n\n    this.set(options)\n  }\n\n  setOnEvents (actionName: Interact.ActionName, phases: NonNullable<any>) {\n    if (is.func(phases.onstart)) { this.on(`${actionName}start`, phases.onstart) }\n    if (is.func(phases.onmove)) { this.on(`${actionName}move`, phases.onmove) }\n    if (is.func(phases.onend)) { this.on(`${actionName}end`, phases.onend) }\n    if (is.func(phases.oninertiastart)) { this.on(`${actionName}inertiastart`, phases.oninertiastart) }\n\n    return this\n  }\n\n  updatePerActionListeners (actionName: Interact.ActionName, prev: Interact.Listeners, cur: Interact.Listeners) {\n    if (is.array(prev) || is.object(prev)) {\n      this.off(actionName, prev)\n    }\n\n    if (is.array(cur) || is.object(cur)) {\n      this.on(actionName, cur)\n    }\n  }\n\n  setPerAction (actionName: Interact.ActionName, options: Interact.OrBoolean<Options>) {\n    const defaults = this._defaults\n\n    // for all the default per-action options\n    for (const optionName_ in options) {\n      const optionName = optionName_ as keyof Interact.PerActionDefaults\n      const actionOptions = this.options[actionName]\n      const optionValue: any = options[optionName]\n\n      // remove old event listeners and add new ones\n      if (optionName === 'listeners') {\n        this.updatePerActionListeners(actionName, actionOptions.listeners, optionValue as Interact.Listeners)\n      }\n\n      // if the option value is an array\n      if (is.array<any>(optionValue)) {\n        (actionOptions[optionName] as any) = arr.from(optionValue)\n      }\n      // if the option value is an object\n      else if (is.plainObject(optionValue)) {\n        // copy the object\n        (actionOptions[optionName] as any) = extend(\n          actionOptions[optionName] || {} as any,\n          clone(optionValue))\n\n        // set anabled field to true if it exists in the defaults\n        if (is.object(defaults.perAction[optionName]) && 'enabled' in (defaults.perAction[optionName] as any)) {\n          (actionOptions[optionName] as any).enabled = optionValue.enabled !== false\n        }\n      }\n      // if the option value is a boolean and the default is an object\n      else if (is.bool(optionValue) && is.object(defaults.perAction[optionName])) {\n        (actionOptions[optionName] as any).enabled = optionValue\n      }\n      // if it's anything else, do a plain assignment\n      else {\n        (actionOptions[optionName] as any) = optionValue\n      }\n    }\n  }\n\n  /**\n   * The default function to get an Interactables bounding rect. Can be\n   * overridden using {@link Interactable.rectChecker}.\n   *\n   * @param {Element} [element] The element to measure.\n   * @return {Interact.Rect} The object's bounding rectangle.\n   */\n  getRect (element: Interact.Element) {\n    element = element || (is.element(this.target)\n      ? this.target\n      : null)\n\n    if (is.string(this.target)) {\n      element = element || this._context.querySelector(this.target)\n    }\n\n    return getElementRect(element)\n  }\n\n  /**\n   * Returns or sets the function used to calculate the interactable's\n   * element's rectangle\n   *\n   * @param {function} [checker] A function which returns this Interactable's\n   * bounding rectangle. See {@link Interactable.getRect}\n   * @return {function | object} The checker function or this Interactable\n   */\n  rectChecker (): (element: Interact.Element) => any | null\n  rectChecker (checker: (element: Interact.Element) => any): this\n  rectChecker (checker?: (element: Interact.Element) => any) {\n    if (is.func(checker)) {\n      this._rectChecker = checker\n\n      this.getRect = element => {\n        const rect = extend({}, this._rectChecker(element))\n\n        if (!('width' in rect)) {\n          rect.width = rect.right - rect.left\n          rect.height = rect.bottom - rect.top\n        }\n\n        return rect\n      }\n\n      return this\n    }\n\n    if (checker === null) {\n      delete this.getRect\n      delete this._rectChecker\n\n      return this\n    }\n\n    return this.getRect\n  }\n\n  _backCompatOption (optionName: keyof Interact.Options, newValue: any) {\n    if (trySelector(newValue) || is.object(newValue)) {\n      (this.options[optionName] as any) = newValue\n\n      for (const action in this._actions.map) {\n        (this.options[action][optionName] as any) = newValue\n      }\n\n      return this\n    }\n\n    return this.options[optionName]\n  }\n\n  /**\n   * Gets or sets the origin of the Interactable's element.  The x and y\n   * of the origin will be subtracted from action event coordinates.\n   *\n   * @param {Element | object | string} [origin] An HTML or SVG Element whose\n   * rect will be used, an object eg. { x: 0, y: 0 } or string 'parent', 'self'\n   * or any CSS selector\n   *\n   * @return {object} The current origin or this Interactable\n   */\n  origin (newValue: any) {\n    return this._backCompatOption('origin', newValue)\n  }\n\n  /**\n   * Returns or sets the mouse coordinate types used to calculate the\n   * movement of the pointer.\n   *\n   * @param {string} [newValue] Use 'client' if you will be scrolling while\n   * interacting; Use 'page' if you want autoScroll to work\n   * @return {string | object} The current deltaSource or this Interactable\n   */\n  deltaSource (): DeltaSource\n  deltaSource (newValue: DeltaSource): this\n  deltaSource (newValue?: DeltaSource) {\n    if (newValue === 'page' || newValue === 'client') {\n      this.options.deltaSource = newValue\n\n      return this\n    }\n\n    return this.options.deltaSource\n  }\n\n  /**\n   * Gets the selector context Node of the Interactable. The default is\n   * `window.document`.\n   *\n   * @return {Node} The context Node of this Interactable\n   */\n  context () {\n    return this._context\n  }\n\n  inContext (element: Document | Node) {\n    return (this._context === element.ownerDocument ||\n            nodeContains(this._context, element))\n  }\n\n  testIgnoreAllow (\n    this: Interactable,\n    options: { ignoreFrom?: IgnoreValue, allowFrom?: IgnoreValue },\n    targetNode: Node,\n    eventTarget: Interact.EventTarget,\n  ) {\n    return (!this.testIgnore(options.ignoreFrom, targetNode, eventTarget) &&\n            this.testAllow(options.allowFrom, targetNode, eventTarget))\n  }\n\n  testAllow (\n    this: Interactable,\n    allowFrom: IgnoreValue,\n    targetNode: Node,\n    element: Interact.EventTarget,\n  ) {\n    if (!allowFrom) { return true }\n\n    if (!is.element(element)) { return false }\n\n    if (is.string(allowFrom)) {\n      return matchesUpTo(element, allowFrom, targetNode)\n    }\n    else if (is.element(allowFrom)) {\n      return nodeContains(allowFrom, element)\n    }\n\n    return false\n  }\n\n  testIgnore (\n    this: Interactable,\n    ignoreFrom: IgnoreValue,\n    targetNode: Node,\n    element: Interact.EventTarget,\n  ) {\n    if (!ignoreFrom || !is.element(element)) { return false }\n\n    if (is.string(ignoreFrom)) {\n      return matchesUpTo(element, ignoreFrom, targetNode)\n    }\n    else if (is.element(ignoreFrom)) {\n      return nodeContains(ignoreFrom, element)\n    }\n\n    return false\n  }\n\n  /**\n   * Calls listeners for the given InteractEvent type bound globally\n   * and directly to this Interactable\n   *\n   * @param {InteractEvent} iEvent The InteractEvent object to be fired on this\n   * Interactable\n   * @return {Interactable} this Interactable\n   */\n  fire (iEvent: object) {\n    this.events.fire(iEvent)\n\n    return this\n  }\n\n  _onOff (method: 'on' | 'off', typeArg: Interact.EventTypes, listenerArg?: Interact.ListenersArg | null, options?: any) {\n    if (is.object(typeArg) && !is.array(typeArg)) {\n      options = listenerArg\n      listenerArg = null\n    }\n\n    const addRemove = method === 'on' ? 'add' : 'remove'\n    const listeners = normalizeListeners(typeArg, listenerArg)\n\n    for (let type in listeners) {\n      if (type === 'wheel') { type = browser.wheelEvent }\n\n      for (const listener of listeners[type]) {\n        // if it is an action event type\n        if (isNonNativeEvent(type, this._actions)) {\n          this.events[method](type, listener)\n        }\n        // delegated event\n        else if (is.string(this.target)) {\n          this._scopeEvents[`${addRemove}Delegate` as 'addDelegate' | 'removeDelegate'](this.target, this._context, type, listener, options)\n        }\n        // remove listener from this Interactable's element\n        else {\n          this._scopeEvents[addRemove](this.target, type, listener, options)\n        }\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Binds a listener for an InteractEvent, pointerEvent or DOM event.\n   *\n   * @param {string | array | object} types The types of events to listen\n   * for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * addEventListener\n   * @return {Interactable} This Interactable\n   */\n  on (types: Interact.EventTypes, listener?: Interact.ListenersArg, options?: any) {\n    return this._onOff('on', types, listener, options)\n  }\n\n  /**\n   * Removes an InteractEvent, pointerEvent or DOM event listener.\n   *\n   * @param {string | array | object} types The types of events that were\n   * listened for\n   * @param {function | array | object} [listener] The event listener function(s)\n   * @param {object | boolean} [options] options object or useCapture flag for\n   * removeEventListener\n   * @return {Interactable} This Interactable\n   */\n  off (types: string | string[] | Interact.EventTypes, listener?: Interact.ListenersArg, options?: any) {\n    return this._onOff('off', types, listener, options)\n  }\n\n  /**\n   * Reset the options of this Interactable\n   *\n   * @param {object} options The new settings to apply\n   * @return {object} This Interactable\n   */\n  set (options: Interact.OptionsArg) {\n    const defaults = this._defaults\n\n    if (!is.object(options)) {\n      options = {}\n    }\n\n    (this.options as Required<Options>) = clone(defaults.base) as Required<Options>\n\n    for (const actionName_ in this._actions.methodDict) {\n      const actionName = actionName_ as Interact.ActionName\n      const methodName = this._actions.methodDict[actionName]\n\n      this.options[actionName] = {}\n      this.setPerAction(actionName, extend(extend({}, defaults.perAction), defaults.actions[actionName]))\n\n      this[methodName](options[actionName])\n    }\n\n    for (const setting in options) {\n      if (is.func(this[setting])) {\n        this[setting](options[setting])\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * Remove this interactable from the list of interactables and remove it's\n   * action capabilities and event listeners\n   */\n  unset () {\n    if (is.string(this.target)) {\n      // remove delegated events\n      for (const type in this._scopeEvents.delegatedEvents) {\n        const delegated = this._scopeEvents.delegatedEvents[type]\n\n        for (let i = delegated.length - 1; i >= 0; i--) {\n          const { selector, context, listeners } = delegated[i]\n\n          if (selector === this.target && context === this._context) {\n            delegated.splice(i, 1)\n          }\n\n          for (let l = listeners.length - 1; l >= 0; l--) {\n            this._scopeEvents.removeDelegate(this.target, this._context, type, listeners[l][0], listeners[l][1])\n          }\n        }\n      }\n    }\n    else {\n      this._scopeEvents.remove(this.target as Node, 'all')\n    }\n  }\n}\n","import { Interactable } from '@interactjs/core/Interactable'\nimport * as Interact from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactable:new': {\n      interactable: Interact.Interactable\n      target: Interact.Target\n      options: Interact.OptionsArg\n      win: Window\n    }\n  }\n}\n\ninterface InteractableScopeProp {\n  context: Document | Interact.Element\n  interactable: Interact.Interactable\n}\n\nexport class InteractableSet {\n  // all set interactables\n  list: Interact.Interactable[] = []\n\n  selectorMap: {\n    [selector: string]: InteractableScopeProp[]\n  } = {}\n\n  scope: Interact.Scope\n\n  constructor (scope: Interact.Scope) {\n    this.scope = scope\n    scope.addListeners({\n      'interactable:unset': ({ interactable }) => {\n        const { target, _context: context } = interactable\n        const targetMappings: InteractableScopeProp[] = is.string(target)\n          ? this.selectorMap[target]\n          : (target as any)[this.scope.id]\n\n        const targetIndex = targetMappings.findIndex(m => m.context === context)\n        if (targetMappings[targetIndex]) {\n        // Destroying mappingInfo's context and interactable\n          targetMappings[targetIndex].context = null\n          targetMappings[targetIndex].interactable = null\n        }\n        targetMappings.splice(targetIndex, 1)\n      },\n    })\n  }\n\n  new (target: Interact.Target, options?: any): Interactable {\n    options = extend(options || {}, {\n      actions: this.scope.actions,\n    })\n    const interactable = new this.scope.Interactable(target, options, this.scope.document, this.scope.events)\n    const mappingInfo = { context: interactable._context, interactable }\n\n    this.scope.addDocument(interactable._doc)\n    this.list.push(interactable)\n\n    if (is.string(target)) {\n      if (!this.selectorMap[target]) { this.selectorMap[target] = [] }\n      this.selectorMap[target].push(mappingInfo)\n    } else {\n      if (!((interactable.target as any)[this.scope.id])) {\n        Object.defineProperty(target, this.scope.id, {\n          value: [],\n          configurable: true,\n        })\n      }\n\n      (target as any)[this.scope.id].push(mappingInfo)\n    }\n\n    this.scope.fire('interactable:new', {\n      target,\n      options,\n      interactable,\n      win: this.scope._win,\n    })\n\n    return interactable\n  }\n\n  get (target: Interact.Target, options?: Interact.Options) {\n    const context = (options && options.context) || this.scope.document\n    const isSelector = is.string(target)\n    const targetMappings: InteractableScopeProp[] = isSelector\n      ? this.selectorMap[target as string]\n      : (target as any)[this.scope.id]\n\n    if (!targetMappings) { return null }\n\n    const found = arr.find(\n      targetMappings,\n      m => m.context === context &&\n        (isSelector || m.interactable.inContext(target as any)))\n\n    return found && found.interactable\n  }\n\n  forEachMatch<T> (node: Node, callback: (interactable: Interact.Interactable) => T) {\n    for (const interactable of this.list) {\n      let ret: void | T\n\n      if ((is.string(interactable.target)\n      // target is a selector and the element matches\n        ? (is.element(node) && domUtils.matchesSelector(node, interactable.target))\n        // target is the element\n        : node === interactable.target) &&\n        // the element is in context\n        (interactable.inContext(node))) {\n        ret = callback(interactable)\n      }\n\n      if (ret !== undefined) {\n        return ret\n      }\n    }\n  }\n}\n","import * as Interact from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport pExtend from '@interactjs/utils/pointerExtend'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    events: ReturnType<typeof install>\n  }\n}\n\ntype Listener = (event: Event | FakeEvent) => any\n\nfunction install (scope: Interact.Scope) {\n  const targets: Array<{\n    eventTarget: EventTarget\n    events: { [type: string]: Listener[] }\n  }> = []\n\n  const delegatedEvents: {\n    [type: string]: Array<{\n      selector: string\n      context: Node\n      listeners: Array<[Listener, { capture: boolean, passive: boolean }]>\n    }>\n  } = {}\n  const documents: Document[] = []\n\n  const eventsMethods = {\n    add,\n    remove,\n\n    addDelegate,\n    removeDelegate,\n\n    delegateListener,\n    delegateUseCapture,\n    delegatedEvents,\n    documents,\n\n    targets,\n\n    supportsOptions: false,\n    supportsPassive: false,\n  }\n\n  // check if browser supports passive events and options arg\n  scope.document.createElement('div').addEventListener('test', null, {\n    get capture () { return (eventsMethods.supportsOptions = true) },\n    get passive () { return (eventsMethods.supportsPassive = true) },\n  })\n\n  scope.events = eventsMethods\n\n  function add (eventTarget: EventTarget, type: string, listener: Listener, optionalArg?: boolean | any) {\n    const options = getOptions(optionalArg)\n    let target = arr.find(targets, t => t.eventTarget === eventTarget)\n\n    if (!target) {\n      target = {\n        eventTarget,\n        events: {},\n      }\n\n      targets.push(target)\n    }\n\n    if (!target.events[type]) {\n      target.events[type] = []\n    }\n\n    if (eventTarget.addEventListener && !arr.contains(target.events[type], listener)) {\n      eventTarget.addEventListener(type, listener as any, eventsMethods.supportsOptions ? options : options.capture)\n      target.events[type].push(listener)\n    }\n  }\n\n  function remove (eventTarget: EventTarget, type: string, listener?: 'all' | Listener, optionalArg?: boolean | any) {\n    const options = getOptions(optionalArg)\n    const targetIndex = arr.findIndex(targets, t => t.eventTarget === eventTarget)\n    const target = targets[targetIndex]\n\n    if (!target || !target.events) {\n      return\n    }\n\n    if (type === 'all') {\n      for (type in target.events) {\n        if (target.events.hasOwnProperty(type)) {\n          remove(eventTarget, type, 'all')\n        }\n      }\n      return\n    }\n\n    let typeIsEmpty = false\n    const typeListeners = target.events[type]\n\n    if (typeListeners) {\n      if (listener === 'all') {\n        for (let i = typeListeners.length - 1; i >= 0; i--) {\n          remove(eventTarget, type, typeListeners[i], options)\n        }\n        return\n      }\n      else {\n        for (let i = 0; i < typeListeners.length; i++) {\n          if (typeListeners[i] === listener) {\n            eventTarget.removeEventListener(type, listener as any, eventsMethods.supportsOptions ? options : options.capture)\n            typeListeners.splice(i, 1)\n\n            if (typeListeners.length === 0) {\n              delete target.events[type]\n              typeIsEmpty = true\n            }\n\n            break\n          }\n        }\n      }\n    }\n\n    if (typeIsEmpty && !Object.keys(target.events).length) {\n      targets.splice(targetIndex, 1)\n    }\n  }\n\n  function addDelegate (selector: string, context: Node, type: string, listener: Listener, optionalArg?: any) {\n    const options = getOptions(optionalArg)\n    if (!delegatedEvents[type]) {\n      delegatedEvents[type] = []\n\n      // add delegate listener functions\n      for (const doc of documents) {\n        add(doc, type, delegateListener)\n        add(doc, type, delegateUseCapture, true)\n      }\n    }\n\n    const delegates = delegatedEvents[type]\n    let delegate = arr.find(delegates, d => d.selector === selector && d.context === context)\n\n    if (!delegate) {\n      delegate = { selector, context, listeners: [] }\n      delegates.push(delegate)\n    }\n\n    delegate.listeners.push([listener, options])\n  }\n\n  function removeDelegate (\n    selector: string,\n    context: Document | Interact.Element,\n    type: string,\n    listener?: Listener,\n    optionalArg?: any,\n  ) {\n    const options = getOptions(optionalArg)\n    const delegates = delegatedEvents[type]\n    let matchFound = false\n    let index: number\n\n    if (!delegates) { return }\n\n    // count from last index of delegated to 0\n    for (index = delegates.length - 1; index >= 0; index--) {\n      const cur = delegates[index]\n      // look for matching selector and context Node\n      if (cur.selector === selector && cur.context === context) {\n        const { listeners } = cur\n\n        // each item of the listeners array is an array: [function, capture, passive]\n        for (let i = listeners.length - 1; i >= 0; i--) {\n          const [fn, { capture, passive }] = listeners[i]\n\n          // check if the listener functions and capture and passive flags match\n          if (fn === listener && capture === options.capture && passive === options.passive) {\n            // remove the listener from the array of listeners\n            listeners.splice(i, 1)\n\n            // if all listeners for this target have been removed\n            // remove the target from the delegates array\n            if (!listeners.length) {\n              delegates.splice(index, 1)\n\n              // remove delegate function from context\n              remove(context, type, delegateListener)\n              remove(context, type, delegateUseCapture, true)\n            }\n\n            // only remove one listener\n            matchFound = true\n            break\n          }\n        }\n\n        if (matchFound) { break }\n      }\n    }\n  }\n\n  // bound to the interactable context when a DOM event\n  // listener is added to a selector interactable\n  function delegateListener (event: Event, optionalArg?: any) {\n    const options = getOptions(optionalArg)\n    const fakeEvent = new FakeEvent(event)\n    const delegates = delegatedEvents[event.type]\n    const [eventTarget] = (pointerUtils.getEventTargets(event))\n    let element: Node = eventTarget\n\n    // climb up document tree looking for selector matches\n    while (is.element(element)) {\n      for (let i = 0; i < delegates.length; i++) {\n        const cur = delegates[i]\n        const { selector, context } = cur\n\n        if (domUtils.matchesSelector(element, selector) &&\n            domUtils.nodeContains(context, eventTarget) &&\n            domUtils.nodeContains(context, element)) {\n          const { listeners } = cur\n\n          fakeEvent.currentTarget = element\n\n          for (const [fn, { capture, passive }] of listeners) {\n            if (capture === options.capture && passive === options.passive) {\n              fn(fakeEvent)\n            }\n          }\n        }\n      }\n\n      element = domUtils.parentNode(element)\n    }\n  }\n\n  function delegateUseCapture (event: Event) {\n    return delegateListener.call(this, event, true)\n  }\n\n  // for type inferrence\n  return eventsMethods\n}\n\nexport class FakeEvent implements Partial<Event> {\n  currentTarget: EventTarget\n  originalEvent: Event\n\n  constructor (originalEvent: Event) {\n    this.originalEvent = originalEvent\n    // duplicate the event so that currentTarget can be changed\n    pExtend(this, originalEvent)\n  }\n\n  preventOriginalDefault () {\n    this.originalEvent.preventDefault()\n  }\n\n  stopPropagation () {\n    this.originalEvent.stopPropagation()\n  }\n\n  stopImmediatePropagation () {\n    this.originalEvent.stopImmediatePropagation()\n  }\n}\n\nfunction getOptions (param: { [index: string]: any } | boolean): { capture: boolean, passive: boolean } {\n  if (!is.object(param)) { return { capture: !!param, passive: false } }\n\n  const options = extend({}, param) as any\n\n  options.capture = !!param.capture\n  options.passive = !!param.passive\n\n  return options\n}\n\nexport default {\n  id: 'events',\n  install,\n}\n","/** @module interact */\nimport * as Interact from '@interactjs/types/index'\nimport browser from '@interactjs/utils/browser'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport is from '@interactjs/utils/is'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport { Interactable } from './Interactable'\nimport { Options } from './defaultOptions'\nimport isNonNativeEvent from './isNonNativeEvent'\n\nexport interface InteractStatic {\n  (target: Interact.Target, options?: Options): Interactable\n  getPointerAverage: typeof pointerUtils.pointerAverage\n  getTouchBBox: typeof pointerUtils.touchBBox\n  getTouchDistance: typeof pointerUtils.touchDistance\n  getTouchAngle: typeof pointerUtils.touchAngle\n  getElementRect: typeof domUtils.getElementRect\n  getElementClientRect: typeof domUtils.getElementClientRect\n  matchesSelector: typeof domUtils.matchesSelector\n  closest: typeof domUtils.closest\n  /** @internal */ globalEvents: any\n  version: string\n  /** @internal */ scope: Interact.Scope\n  use(plugin: Interact.Plugin, options?: {\n    [key: string]: any\n  }): any\n  isSet(target: Interact.Element, options?: any): boolean\n  on(type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?: object): any\n  off(type: Interact.EventTypes, listener: any, options?: object): any\n  debug(): any\n  supportsTouch(): boolean\n  supportsPointerEvent(): boolean\n  stop(): any\n  pointerMoveTolerance(newValue?: number): any\n  addDocument(doc: Document, options?: object): void\n  removeDocument(doc: Document): void\n}\n\nexport function createInteractStatic (scope: Interact.Scope): Interact.InteractStatic {\n  /**\n   * ```js\n   * interact('#draggable').draggable(true)\n   *\n   * var rectables = interact('rect')\n   * rectables\n   *   .gesturable(true)\n   *   .on('gesturemove', function (event) {\n   *       // ...\n   *   })\n   * ```\n   *\n   * The methods of this variable can be used to set elements as interactables\n   * and also to change various default settings.\n   *\n   * Calling it as a function and passing an element or a valid CSS selector\n   * string returns an Interactable object which has various methods to configure\n   * it.\n   *\n   * @global\n   *\n   * @param {Element | string} target The HTML or SVG Element to interact with\n   * or CSS selector\n   * @return {Interactable}\n   */\n  const interact = ((target, options) => {\n    let interactable = scope.interactables.get(target, options)\n\n    if (!interactable) {\n      interactable = scope.interactables.new(target, options)\n      interactable.events.global = interact.globalEvents\n    }\n\n    return interactable\n  }) as InteractStatic\n\n  // expose the functions used to calculate multi-touch properties\n  interact.getPointerAverage = pointerUtils.pointerAverage\n  interact.getTouchBBox = pointerUtils.touchBBox\n  interact.getTouchDistance = pointerUtils.touchDistance\n  interact.getTouchAngle = pointerUtils.touchAngle\n\n  interact.getElementRect = domUtils.getElementRect\n  interact.getElementClientRect = domUtils.getElementClientRect\n  interact.matchesSelector = domUtils.matchesSelector\n  interact.closest = domUtils.closest\n\n  interact.globalEvents = {} as any\n\n  // eslint-disable-next-line no-undef\n  interact.version = process.env.npm_package_version\n  interact.scope = scope\n  /**\n  * Use a plugin\n  *\n  * @alias module:interact.use\n  *\n  * @param {Object} plugin\n  * @param {function} plugin.install\n  * @return {Interact.InteractStatic}\n   */\n  interact.use = function (plugin, options) {\n    this.scope.usePlugin(plugin, options)\n\n    return this\n  }\n\n  /**\n   * Check if an element or selector has been set with the {@link interact}\n   * function\n   *\n   * @alias module:interact.isSet\n   *\n   * @param {Element} element The Element being searched for\n   * @return {boolean} Indicates if the element or CSS selector was previously\n   * passed to interact\n   */\n  interact.isSet = function (target, options) {\n    return !!this.scope.interactables.get(target, options && options.context)\n  }\n\n  /**\n   * Add a global listener for an InteractEvent or adds a DOM event to `document`\n   *\n   * @alias module:interact.on\n   *\n   * @param {string | array | object} type The types of events to listen for\n   * @param {function} listener The function event (s)\n   * @param {object | boolean} [options] object or useCapture flag for\n   * addEventListener\n   * @return {object} interact\n   */\n  interact.on = function (type: string | Interact.EventTypes, listener: Interact.ListenersArg, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of (type as any[])) {\n        this.on(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.on(prop, (type as any)[prop], listener)\n      }\n\n      return this\n    }\n\n    // if it is an InteractEvent type, add listener to globalEvents\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      // if this type of event was never bound\n      if (!this.globalEvents[type]) {\n        this.globalEvents[type] = [listener]\n      }\n      else {\n        this.globalEvents[type].push(listener)\n      }\n    }\n    // If non InteractEvent type, addEventListener to document\n    else {\n      this.scope.events.add(this.scope.document, type, listener as Interact.Listener, { options })\n    }\n\n    return this\n  }\n\n  /**\n   * Removes a global InteractEvent listener or DOM event from `document`\n   *\n   * @alias module:interact.off\n   *\n   * @param {string | array | object} type The types of events that were listened\n   * for\n   * @param {function} listener The listener function to be removed\n   * @param {object | boolean} options [options] object or useCapture flag for\n   * removeEventListener\n   * @return {object} interact\n   */\n  interact.off = function (type: Interact.EventTypes, listener: any, options?: object) {\n    if (is.string(type) && type.search(' ') !== -1) {\n      type = type.trim().split(/ +/)\n    }\n\n    if (is.array(type)) {\n      for (const eventType of type) {\n        this.off(eventType, listener, options)\n      }\n\n      return this\n    }\n\n    if (is.object(type)) {\n      for (const prop in type) {\n        this.off(prop, type[prop], listener)\n      }\n\n      return this\n    }\n\n    if (isNonNativeEvent(type, this.scope.actions)) {\n      let index: number\n\n      if (type in this.globalEvents &&\n            (index = this.globalEvents[type].indexOf(listener)) !== -1) {\n        this.globalEvents[type].splice(index, 1)\n      }\n    }\n    else {\n      this.scope.events.remove(this.scope.document, type, listener, options)\n    }\n\n    return this\n  }\n\n  interact.debug = function () {\n    return this.scope\n  }\n\n  /**\n   * @alias module:interact.supportsTouch\n   *\n   * @return {boolean} Whether or not the browser supports touch input\n   */\n  interact.supportsTouch = function () {\n    return browser.supportsTouch\n  }\n\n  /**\n   * @alias module:interact.supportsPointerEvent\n   *\n   * @return {boolean} Whether or not the browser supports PointerEvents\n   */\n  interact.supportsPointerEvent = function () {\n    return browser.supportsPointerEvent\n  }\n\n  /**\n   * Cancels all interactions (end events are not fired)\n   *\n   * @alias module:interact.stop\n   *\n   * @return {object} interact\n   */\n  interact.stop = function () {\n    for (const interaction of this.scope.interactions.list) {\n      interaction.stop()\n    }\n\n    return this\n  }\n\n  /**\n   * Returns or sets the distance the pointer must be moved before an action\n   * sequence occurs. This also affects tolerance for tap events.\n   *\n   * @alias module:interact.pointerMoveTolerance\n   *\n   * @param {number} [newValue] The movement from the start position must be greater than this value\n   * @return {interact | number}\n   */\n  interact.pointerMoveTolerance = function (newValue?: number) {\n    if (is.number(newValue)) {\n      this.scope.interactions.pointerMoveTolerance = newValue\n\n      return this\n    }\n\n    return this.scope.interactions.pointerMoveTolerance\n  }\n\n  interact.addDocument = function (doc: Document, options?: object) {\n    this.scope.addDocument(doc, options)\n  }\n\n  interact.removeDocument = function (doc: Document) {\n    this.scope.removeDocument(doc)\n  }\n\n  return interact as any\n}\n","import * as Interact from '@interactjs/types/index'\nimport * as dom from '@interactjs/utils/domUtils'\n\nexport interface SearchDetails {\n  pointer: Interact.PointerType\n  pointerId: number\n  pointerType: string\n  eventType: string\n  eventTarget: Interact.EventTarget\n  curEventTarget: Interact.EventTarget\n  scope: Interact.Scope\n}\n\nconst finder = {\n  methodOrder: ['simulationResume', 'mouseOrPen', 'hasPointer', 'idle'] as const,\n\n  search (details: SearchDetails) {\n    for (const method of finder.methodOrder) {\n      const interaction = finder[method](details)\n\n      if (interaction) {\n        return interaction\n      }\n    }\n\n    return null\n  },\n\n  // try to resume simulation with a new pointer\n  simulationResume ({ pointerType, eventType, eventTarget, scope }: SearchDetails) {\n    if (!/down|start/i.test(eventType)) {\n      return null\n    }\n\n    for (const interaction of scope.interactions.list) {\n      let element = eventTarget as Node\n\n      if (interaction.simulation && interaction.simulation.allowResume &&\n          (interaction.pointerType === pointerType)) {\n        while (element) {\n          // if the element is the interaction element\n          if (element === interaction.element) {\n            return interaction\n          }\n          element = dom.parentNode(element)\n        }\n      }\n    }\n\n    return null\n  },\n\n  // if it's a mouse or pen interaction\n  mouseOrPen ({ pointerId, pointerType, eventType, scope }: SearchDetails) {\n    if (pointerType !== 'mouse' && pointerType !== 'pen') {\n      return null\n    }\n\n    let firstNonActive\n\n    for (const interaction of scope.interactions.list) {\n      if (interaction.pointerType === pointerType) {\n        // if it's a down event, skip interactions with running simulations\n        if (interaction.simulation && !hasPointerId(interaction, pointerId)) { continue }\n\n        // if the interaction is active, return it immediately\n        if (interaction.interacting()) {\n          return interaction\n        }\n        // otherwise save it and look for another active interaction\n        else if (!firstNonActive) {\n          firstNonActive = interaction\n        }\n      }\n    }\n\n    // if no active mouse interaction was found use the first inactive mouse\n    // interaction\n    if (firstNonActive) {\n      return firstNonActive\n    }\n\n    // find any mouse or pen interaction.\n    // ignore the interaction if the eventType is a *down, and a simulation\n    // is active\n    for (const interaction of scope.interactions.list) {\n      if (interaction.pointerType === pointerType && !(/down/i.test(eventType) && interaction.simulation)) {\n        return interaction\n      }\n    }\n\n    return null\n  },\n\n  // get interaction that has this pointer\n  hasPointer ({ pointerId, scope }: SearchDetails) {\n    for (const interaction of scope.interactions.list) {\n      if (hasPointerId(interaction, pointerId)) {\n        return interaction\n      }\n    }\n\n    return null\n  },\n\n  // get first idle interaction with a matching pointerType\n  idle ({ pointerType, scope }: SearchDetails) {\n    for (const interaction of scope.interactions.list) {\n      // if there's already a pointer held down\n      if (interaction.pointers.length === 1) {\n        const target = interaction.interactable\n        // don't add this pointer if there is a target interactable and it\n        // isn't gesturable\n        if (target && !(target.options.gesture && target.options.gesture.enabled)) {\n          continue\n        }\n      }\n      // maximum of 2 pointers per interaction\n      else if (interaction.pointers.length >= 2) {\n        continue\n      }\n\n      if (!interaction.interacting() && (pointerType === interaction.pointerType)) {\n        return interaction\n      }\n    }\n\n    return null\n  },\n}\n\nfunction hasPointerId (interaction: Interact.Interaction, pointerId: number) {\n  return interaction.pointers.some(({ id }) => id === pointerId)\n}\n\nexport default finder\n","import * as Interact from '@interactjs/types/index'\nimport browser from '@interactjs/utils/browser'\nimport domObjects from '@interactjs/utils/domObjects'\nimport { nodeContains } from '@interactjs/utils/domUtils'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport InteractionBase from './Interaction'\nimport interactablePreventDefault from './interactablePreventDefault'\nimport finder, { SearchDetails } from './interactionFinder'\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    Interaction: typeof InteractionBase\n    interactions: {\n      new: <T extends ActionName> (options: any) => InteractionBase<T>\n      list: InteractionBase[]\n      listeners: { [type: string]: Interact.Listener }\n      docEvents: Array<{ type: string, listener: Interact.Listener }>\n      pointerMoveTolerance: number\n    }\n    prevTouchTime: number\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'interactions:find': {\n      interaction: InteractionBase\n      searchDetails: SearchDetails\n    }\n  }\n}\n\nconst methodNames = [\n  'pointerDown', 'pointerMove', 'pointerUp',\n  'updatePointer', 'removePointer', 'windowBlur',\n]\n\nfunction install (scope: Interact.Scope) {\n  const listeners = {} as any\n\n  for (const method of methodNames) {\n    listeners[method] = doOnInteractions(method, scope)\n  }\n\n  const pEventTypes = browser.pEventTypes\n  let docEvents: typeof scope.interactions.docEvents\n\n  if (domObjects.PointerEvent) {\n    docEvents = [\n      { type: pEventTypes.down,   listener: releasePointersOnRemovedEls },\n      { type: pEventTypes.down,   listener: listeners.pointerDown },\n      { type: pEventTypes.move,   listener: listeners.pointerMove },\n      { type: pEventTypes.up,     listener: listeners.pointerUp },\n      { type: pEventTypes.cancel, listener: listeners.pointerUp },\n    ]\n  }\n  else {\n    docEvents = [\n      { type: 'mousedown', listener: listeners.pointerDown },\n      { type: 'mousemove', listener: listeners.pointerMove },\n      { type: 'mouseup', listener: listeners.pointerUp },\n\n      { type: 'touchstart', listener: releasePointersOnRemovedEls },\n      { type: 'touchstart', listener: listeners.pointerDown },\n      { type: 'touchmove', listener: listeners.pointerMove },\n      { type: 'touchend', listener: listeners.pointerUp },\n      { type: 'touchcancel', listener: listeners.pointerUp },\n    ]\n  }\n\n  docEvents.push({\n    type: 'blur',\n    listener (event) {\n      for (const interaction of scope.interactions.list) {\n        interaction.documentBlur(event)\n      }\n    },\n  })\n\n  // for ignoring browser's simulated mouse events\n  scope.prevTouchTime = 0\n\n  scope.Interaction = class <T extends Interact.ActionName> extends InteractionBase<T> {\n    get pointerMoveTolerance () {\n      return scope.interactions.pointerMoveTolerance\n    }\n\n    set pointerMoveTolerance (value) {\n      scope.interactions.pointerMoveTolerance = value\n    }\n\n    _now () { return scope.now() }\n  }\n\n  scope.interactions = {\n    // all active and idle interactions\n    list: [],\n    new<T extends Interact.ActionName> (options: { pointerType?: string, scopeFire?: Interact.Scope['fire'] }) {\n      options.scopeFire = (name, arg) => scope.fire(name, arg)\n\n      const interaction = new scope.Interaction<T>(options as Required<typeof options>)\n\n      scope.interactions.list.push(interaction)\n      return interaction\n    },\n    listeners,\n    docEvents,\n    pointerMoveTolerance: 1,\n  }\n\n  function releasePointersOnRemovedEls () {\n    // for all inactive touch interactions with pointers down\n    for (const interaction of scope.interactions.list) {\n      if (!interaction.pointerIsDown ||\n        interaction.pointerType !== 'touch' ||\n        interaction._interacting) {\n        continue\n      }\n\n      // if a pointer is down on an element that is no longer in the DOM tree\n      for (const pointer of interaction.pointers) {\n        if (!scope.documents.some(({ doc }) => nodeContains(doc, pointer.downTarget))) {\n          // remove the pointer from the interaction\n          interaction.removePointer(pointer.pointer, pointer.event)\n        }\n      }\n    }\n  }\n\n  scope.usePlugin(interactablePreventDefault)\n}\n\nfunction doOnInteractions (method, scope) {\n  return function (event) {\n    const interactions = scope.interactions.list\n\n    const pointerType = pointerUtils.getPointerType(event)\n    const [eventTarget, curEventTarget] = pointerUtils.getEventTargets(event)\n    const matches = [] // [ [pointer, interaction], ...]\n\n    if (/^touch/.test(event.type)) {\n      scope.prevTouchTime = scope.now()\n\n      for (const changedTouch of event.changedTouches) {\n        const pointer = changedTouch\n        const pointerId = pointerUtils.getPointerId(pointer)\n        const searchDetails: SearchDetails = {\n          pointer,\n          pointerId,\n          pointerType,\n          eventType: event.type,\n          eventTarget,\n          curEventTarget,\n          scope,\n        }\n        const interaction = getInteraction(searchDetails)\n\n        matches.push([\n          searchDetails.pointer,\n          searchDetails.eventTarget,\n          searchDetails.curEventTarget,\n          interaction,\n        ])\n      }\n    }\n    else {\n      let invalidPointer = false\n\n      if (!browser.supportsPointerEvent && /mouse/.test(event.type)) {\n        // ignore mouse events while touch interactions are active\n        for (let i = 0; i < interactions.length && !invalidPointer; i++) {\n          invalidPointer = interactions[i].pointerType !== 'mouse' && interactions[i].pointerIsDown\n        }\n\n        // try to ignore mouse events that are simulated by the browser\n        // after a touch event\n        invalidPointer = invalidPointer ||\n          (scope.now() - scope.prevTouchTime < 500) ||\n          // on iOS and Firefox Mobile, MouseEvent.timeStamp is zero if simulated\n          event.timeStamp === 0\n      }\n\n      if (!invalidPointer) {\n        const searchDetails = {\n          pointer: event,\n          pointerId: pointerUtils.getPointerId(event),\n          pointerType,\n          eventType: event.type,\n          curEventTarget,\n          eventTarget,\n          scope,\n        }\n\n        const interaction = getInteraction(searchDetails)\n\n        matches.push([\n          searchDetails.pointer,\n          searchDetails.eventTarget,\n          searchDetails.curEventTarget,\n          interaction,\n        ])\n      }\n    }\n\n    // eslint-disable-next-line no-shadow\n    for (const [pointer, eventTarget, curEventTarget, interaction] of matches) {\n      interaction[method](pointer, event, eventTarget, curEventTarget)\n    }\n  }\n}\n\nfunction getInteraction (searchDetails: SearchDetails) {\n  const { pointerType, scope } = searchDetails\n\n  const foundInteraction = finder.search(searchDetails)\n  const signalArg = { interaction: foundInteraction, searchDetails }\n\n  scope.fire('interactions:find', signalArg)\n\n  return signalArg.interaction || scope.interactions.new({ pointerType })\n}\n\nfunction onDocSignal<T extends 'scope:add-document' | 'scope:remove-document'> ({ doc, scope, options }: Interact.SignalArgs[T], eventMethodName: 'add' | 'remove') {\n  const { interactions: { docEvents }, events } = scope\n  const eventMethod = events[eventMethodName]\n\n  if (scope.browser.isIOS && !options.events) {\n    options.events = { passive: false }\n  }\n\n  // delegate event listener\n  for (const eventType in events.delegatedEvents) {\n    eventMethod(doc, eventType, events.delegateListener)\n    eventMethod(doc, eventType, events.delegateUseCapture, true)\n  }\n\n  const eventOptions = options && options.events\n\n  for (const { type, listener } of docEvents) {\n    eventMethod(doc, type, listener, eventOptions)\n  }\n}\n\nconst interactions: Interact.Plugin = {\n  id: 'core/interactions',\n  install,\n  listeners: {\n    'scope:add-document': arg => onDocSignal(arg, 'add'),\n    'scope:remove-document': arg => onDocSignal(arg, 'remove'),\n    'interactable:unset': ({ interactable }, scope) => {\n      // Stop and destroy related interactions when an Interactable is unset\n      for (let i = scope.interactions.list.length - 1; i >= 0; i--) {\n        const interaction = scope.interactions.list[i]\n\n        if (interaction.interactable !== interactable) { continue }\n\n        interaction.stop()\n        scope.fire('interactions:destroy', { interaction })\n        interaction.destroy()\n\n        if (scope.interactions.list.length > 2) {\n          scope.interactions.list.splice(i, 1)\n        }\n      }\n    },\n  },\n  onDocSignal,\n  doOnInteractions,\n  methodNames,\n}\n\nexport default interactions\n","import * as Interact from '@interactjs/types/index'\nimport browser from '@interactjs/utils/browser'\nimport clone from '@interactjs/utils/clone'\nimport domObjects from '@interactjs/utils/domObjects'\nimport extend from '@interactjs/utils/extend'\nimport raf from '@interactjs/utils/raf'\nimport win from '@interactjs/utils/window'\n\nimport { Eventable } from './Eventable'\nimport { InteractEvent, PhaseMap } from './InteractEvent'\nimport { Interactable as InteractableBase } from './Interactable'\nimport { InteractableSet } from './InteractableSet'\nimport { defaults } from './defaultOptions'\nimport events from './events'\nimport { createInteractStatic } from './interactStatic'\nimport interactions from './interactions'\n\nexport interface SignalArgs {\n  'scope:add-document': DocSignalArg\n  'scope:remove-document': DocSignalArg\n  'interactable:unset': { interactable: InteractableBase }\n  'interactable:set': { interactable: InteractableBase, options: Interact.OptionsArg }\n  'interactions:destroy': { interaction: Interact.Interaction }\n}\n\nexport type ListenerName = keyof SignalArgs\n\nexport type ListenerMap = {\n  [P in ListenerName]?: (arg: SignalArgs[P], scope: Scope, signalName: P) => void | boolean\n}\n\ninterface DocSignalArg {\n  doc: Document\n  window: Window\n  scope: Scope\n  options?: { [index: string]: any }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface ActionMap { // tslint:disable-line no-empty-interface\n}\n\nexport type ActionName = keyof ActionMap\n\nexport interface Actions {\n  map: ActionMap\n  phases: PhaseMap\n  methodDict: { [P in ActionName]?: string }\n  phaselessTypes: { [type: string]: true }\n}\n\n/**\n * plugin typedef\n * @typedef Plugin\n */\nexport interface Plugin {\n  [key: string]: any\n  id?: string\n  listeners?: ListenerMap\n  before?: string[]\n  install? (scope: Scope, options?: any): void\n}\n\nexport class Scope {\n  id = `__interact_scope_${Math.floor(Math.random() * 100)}`\n  isInitialized = false\n  listenerMaps: Array<{\n    map: ListenerMap\n    id: string\n  }> = []\n\n  browser = browser\n  defaults = clone(defaults) as typeof defaults\n  Eventable = Eventable\n  actions: Actions = {\n    map: {},\n    phases: {\n      start: true,\n      move: true,\n      end: true,\n    },\n    methodDict: {},\n    phaselessTypes: {},\n  }\n\n  interactStatic = createInteractStatic(this)\n  InteractEvent = InteractEvent\n  Interactable: typeof InteractableBase\n  interactables = new InteractableSet(this)\n\n  // main window\n  _win!: Window\n\n  // main document\n  document!: Document\n\n  // main window\n  window!: Window\n\n  // all documents being listened to\n  documents: Array<{ doc: Document, options: any }> = []\n\n  _plugins: {\n    list: Plugin[]\n    map: { [id: string]: Plugin }\n  } = {\n    list: [],\n    map: {},\n  }\n\n  constructor () {\n    const scope = this\n\n    this.Interactable = class extends InteractableBase {\n      get _defaults () { return scope.defaults }\n\n      set <T extends InteractableBase> (this: T, options: Interact.OptionsArg) {\n        super.set(options)\n\n        scope.fire('interactable:set', {\n          options,\n          interactable: this,\n        })\n\n        return this\n      }\n\n      unset (this: InteractableBase) {\n        super.unset()\n        scope.interactables.list.splice(scope.interactables.list.indexOf(this), 1)\n\n        scope.fire('interactable:unset', { interactable: this })\n      }\n    }\n  }\n\n  addListeners (map: ListenerMap, id?: string) {\n    this.listenerMaps.push({ id, map })\n  }\n\n  fire<T extends ListenerName> (name: T, arg: SignalArgs[T]): void | false {\n    for (const { map: { [name]: listener } } of this.listenerMaps) {\n      if (!!listener && listener(arg as any, this, name as never) === false) {\n        return false\n      }\n    }\n  }\n\n  onWindowUnload = (event: BeforeUnloadEvent) => this.removeDocument(event.target as Document)\n\n  init (window: Window) {\n    return this.isInitialized\n      ? this\n      : initScope(this, window)\n  }\n\n  pluginIsInstalled (plugin: Plugin) {\n    return this._plugins.map[plugin.id] || this._plugins.list.indexOf(plugin) !== -1\n  }\n\n  usePlugin (plugin: Plugin, options?: { [key: string]: any }) {\n    if (!this.isInitialized) {\n      return this\n    }\n\n    if (this.pluginIsInstalled(plugin)) {\n      return this\n    }\n\n    if (plugin.id) { this._plugins.map[plugin.id] = plugin }\n    this._plugins.list.push(plugin)\n\n    if (plugin.install) {\n      plugin.install(this, options)\n    }\n\n    if (plugin.listeners && plugin.before) {\n      let index = 0\n      const len = this.listenerMaps.length\n      const before = plugin.before.reduce((acc, id) => {\n        acc[id] = true\n        acc[pluginIdRoot(id)] = true\n        return acc\n      }, {})\n\n      for (; index < len; index++) {\n        const otherId = this.listenerMaps[index].id\n\n        if (before[otherId] || before[pluginIdRoot(otherId)]) { break }\n      }\n\n      this.listenerMaps.splice(index, 0, { id: plugin.id, map: plugin.listeners })\n    }\n    else if (plugin.listeners) {\n      this.listenerMaps.push({ id: plugin.id, map: plugin.listeners })\n    }\n\n    return this\n  }\n\n  addDocument (doc: Document, options?: any): void | false {\n    // do nothing if document is already known\n    if (this.getDocIndex(doc) !== -1) { return false }\n\n    const window = win.getWindow(doc)\n\n    options = options ? extend({}, options) : {}\n\n    this.documents.push({ doc, options })\n    this.events.documents.push(doc)\n\n    // don't add an unload event for the main document\n    // so that the page may be cached in browser history\n    if (doc !== this.document) {\n      this.events.add(window, 'unload', this.onWindowUnload)\n    }\n\n    this.fire('scope:add-document', { doc, window, scope: this, options })\n  }\n\n  removeDocument (doc: Document) {\n    const index = this.getDocIndex(doc)\n\n    const window = win.getWindow(doc)\n    const options = this.documents[index].options\n\n    this.events.remove(window, 'unload', this.onWindowUnload)\n\n    this.documents.splice(index, 1)\n    this.events.documents.splice(index, 1)\n\n    this.fire('scope:remove-document', { doc, window, scope: this, options })\n  }\n\n  getDocIndex (doc: Document) {\n    for (let i = 0; i < this.documents.length; i++) {\n      if (this.documents[i].doc === doc) {\n        return i\n      }\n    }\n\n    return -1\n  }\n\n  getDocOptions (doc: Document) {\n    const docIndex = this.getDocIndex(doc)\n\n    return docIndex === -1 ? null : this.documents[docIndex].options\n  }\n\n  now () {\n    return ((this.window as any).Date as typeof Date || Date).now()\n  }\n}\n\nexport function initScope (scope: Scope, window: Window) {\n  scope.isInitialized = true\n  win.init(window)\n  domObjects.init(window)\n  browser.init(window)\n  raf.init(window)\n\n  scope.window = window\n  scope.document = window.document\n\n  scope.usePlugin(interactions)\n  scope.usePlugin(events)\n\n  return scope\n}\n\nfunction pluginIdRoot (id: string) {\n  return id && id.replace(/\\/.*$/, '')\n}\n","import { Scope } from '@interactjs/core/scope'\n\nconst scope = new Scope()\n\nconst interact: import('@interactjs/core/interactStatic').InteractStatic = scope.interactStatic\n\nexport default interact\n\nexport const init = (win: Window) => scope.init(win)\n\nif (typeof window === 'object' && !!window) {\n  init(window)\n}\n","export default () => {}\n","export default () => {}\n","import * as Interact from '@interactjs/types/index'\n\nexport type GridOptions = (Partial<Interact.Rect> | Interact.Point) & {\n  range?: number\n  limits?: Interact.Rect\n  offset?: Interact.Point\n}\n\nexport default (grid: GridOptions) => {\n  const coordFields = ([\n    ['x', 'y'],\n    ['left', 'top'],\n    ['right', 'bottom'],\n    ['width', 'height'],\n  ] as const).filter(([xField, yField]) => xField in grid || yField in grid)\n\n  const gridFunc: Interact.SnapFunction & {\n    grid: typeof grid\n    coordFields: typeof coordFields\n  } = (x, y) => {\n    const {\n      range,\n      limits = {\n        left  : -Infinity,\n        right :  Infinity,\n        top   : -Infinity,\n        bottom:  Infinity,\n      },\n      offset = { x: 0, y: 0 },\n    } = grid\n\n    const result: Interact.SnapTarget & {\n      grid: typeof grid\n    } = { range, grid, x: null as number, y: null as number }\n\n    for (const [xField, yField] of coordFields) {\n      const gridx = Math.round((x - offset.x) / (grid as any)[xField])\n      const gridy = Math.round((y - offset.y) / (grid as any)[yField])\n\n      result[xField] = Math.max(limits.left, Math.min(limits.right, gridx * (grid as any)[xField] + offset.x))\n      result[yField] = Math.max(limits.top, Math.min(limits.bottom, gridy * (grid as any)[yField] + offset.y))\n    }\n\n    return result\n  }\n\n  gridFunc.grid = grid\n  gridFunc.coordFields = coordFields\n\n  return gridFunc\n}\n","export { default as edgeTarget } from './edgeTarget'\nexport { default as elements } from './elements'\nexport { default as grid } from './grid'\n","import * as Interact from '@interactjs/types/index'\nimport extend from '@interactjs/utils/extend'\n\nimport * as allSnappers from './all'\n\ndeclare module '@interactjs/core/interactStatic' {\n  export interface InteractStatic {\n    snappers: typeof allSnappers\n    createSnapGrid: typeof allSnappers.grid\n  }\n}\n\nconst snappersPlugin: Interact.Plugin = {\n  id: 'snappers',\n  install (scope) {\n    const { interactStatic: interact } = scope\n\n    interact.snappers = extend(interact.snappers || {}, allSnappers)\n    interact.createSnapGrid = interact.snappers.grid\n  },\n}\n\nexport default snappersPlugin\n","/**\n * @module modifiers/aspectRatio\n *\n * @description\n * This module forces elements to be resized with a specified dx/dy ratio.\n *\n * @example\n * interact(target).resizable({\n *   modifiers: [\n *     interact.modifiers.snapSize({\n *       targets: [ interact.createSnapGrid({ x: 20, y: 20 }) ],\n *     }),\n *     interact.aspectRatio({ ratio: 'preserve' }),\n *   ],\n * });\n */\n\nimport * as Interact from '@interactjs/types/index'\nimport extend from '@interactjs/utils/extend'\nimport { addEdges } from '@interactjs/utils/rect'\n\nimport Modification from './Modification'\nimport { Modifier, ModifierModule, ModifierState, makeModifier } from './base'\n\nexport interface AspectRatioOptions {\n  ratio?: number | 'preserve'\n  equalDelta?: boolean\n  modifiers?: Modifier[]\n  enabled?: boolean\n}\n\nexport type AspectRatioState = ModifierState<AspectRatioOptions, {\n  startCoords: Interact.Point\n  startRect: Interact.Rect\n  linkedEdges: Interact.EdgeOptions\n  ratio: number\n  equalDelta: boolean\n  xIsPrimaryAxis: boolean\n  edgeSign: 1 | -1\n  subModification: Modification\n}>\n\nconst aspectRatio: ModifierModule<AspectRatioOptions, AspectRatioState> = {\n  start (arg) {\n    const { state, rect, edges: originalEdges, pageCoords: coords } = arg\n    let { ratio } = state.options\n    const { equalDelta, modifiers } = state.options\n\n    if (ratio === 'preserve') {\n      ratio = rect.width / rect.height\n    }\n\n    state.startCoords = extend({}, coords)\n    state.startRect = extend({}, rect)\n    state.ratio = ratio\n    state.equalDelta = equalDelta\n\n    const linkedEdges = state.linkedEdges = {\n      top   : originalEdges.top    || (originalEdges.left   && !originalEdges.bottom),\n      left  : originalEdges.left   || (originalEdges.top    && !originalEdges.right),\n      bottom: originalEdges.bottom || (originalEdges.right  && !originalEdges.top),\n      right : originalEdges.right  || (originalEdges.bottom && !originalEdges.left),\n    }\n\n    state.xIsPrimaryAxis = !!(originalEdges.left || originalEdges.right)\n\n    if (state.equalDelta) {\n      state.edgeSign = (linkedEdges.left ? 1 : -1) * (linkedEdges.top ? 1 : -1) as 1 | -1\n    }\n    else {\n      const negativeSecondaryEdge = state.xIsPrimaryAxis ? linkedEdges.top : linkedEdges.left\n      state.edgeSign = negativeSecondaryEdge ? -1 : 1\n    }\n\n    extend(arg.edges, linkedEdges)\n\n    if (!modifiers || !modifiers.length) { return }\n\n    const subModification = new Modification(arg.interaction)\n\n    subModification.copyFrom(arg.interaction.modification)\n    subModification.prepareStates(modifiers)\n\n    state.subModification = subModification\n    subModification.startAll({ ...arg })\n  },\n\n  set (arg) {\n    const { state, rect, coords } = arg\n    const initialCoords = extend({}, coords)\n    const aspectMethod = state.equalDelta ? setEqualDelta : setRatio\n\n    aspectMethod(state, state.xIsPrimaryAxis, coords, rect)\n\n    if (!state.subModification) { return null }\n\n    const correctedRect = extend({}, rect)\n\n    addEdges(state.linkedEdges, correctedRect, { x: coords.x - initialCoords.x, y: coords.y - initialCoords.y })\n\n    const result = state.subModification.setAll({\n      ...arg,\n      rect: correctedRect,\n      edges: state.linkedEdges,\n      pageCoords: coords,\n      prevCoords: coords,\n      prevRect: correctedRect,\n    })\n\n    const { delta } = result\n\n    if (result.changed) {\n      const xIsCriticalAxis = Math.abs(delta.x) > Math.abs(delta.y)\n\n      // do aspect modification again with critical edge axis as primary\n      aspectMethod(state, xIsCriticalAxis, result.coords, result.rect)\n      extend(coords, result.coords)\n    }\n\n    return result.eventProps\n  },\n\n  defaults: {\n    ratio: 'preserve',\n    equalDelta: false,\n    modifiers: [],\n    enabled: false,\n  },\n}\n\nfunction setEqualDelta ({ startCoords, edgeSign }: AspectRatioState, xIsPrimaryAxis: boolean, coords: Interact.Point) {\n  if (xIsPrimaryAxis) {\n    coords.y = startCoords.y + (coords.x - startCoords.x) * edgeSign\n  }\n  else {\n    coords.x = startCoords.x + (coords.y - startCoords.y) * edgeSign\n  }\n}\n\nfunction setRatio ({ startRect, startCoords, ratio, edgeSign }: AspectRatioState, xIsPrimaryAxis: boolean, coords: Interact.Point, rect: Interact.Rect) {\n  if (xIsPrimaryAxis) {\n    const newHeight = rect.width / ratio\n\n    coords.y = startCoords.y + (newHeight - startRect.height) * edgeSign\n  }\n  else {\n    const newWidth = rect.height * ratio\n\n    coords.x = startCoords.x + (newWidth - startRect.width) * edgeSign\n  }\n}\n\nexport default makeModifier(aspectRatio, 'aspectRatio')\nexport { aspectRatio }\n","import { ModifierFunction } from './base'\n\nconst noop = (() => {\n}) as unknown as ModifierFunction<any, any, 'noop'>\n\nnoop._defaults = {}\n\nexport default noop\n","export { default } from './noop'\n","import * as Interact from '@interactjs/types/index'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport { makeModifier, ModifierArg, ModifierModule, ModifierState } from '../base'\n\nexport interface RestrictOptions {\n  // where to drag over\n  restriction: Interact.RectResolvable<[number, number, Interact.Interaction]>\n  // what part of self is allowed to drag over\n  elementRect: Interact.Rect\n  offset: Interact.Rect\n  // restrict just before the end drag\n  endOnly: boolean\n  enabled?: boolean\n}\n\nexport type RestrictState = ModifierState<RestrictOptions, {\n  offset: Interact.Rect\n}>\n\nfunction start ({ rect, startOffset, state, interaction, pageCoords }: ModifierArg<RestrictState>) {\n  const { options } = state\n  const { elementRect } = options\n  const offset: Interact.Rect = extend({\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  }, options.offset || {})\n\n  if (rect && elementRect) {\n    const restriction = getRestrictionRect(options.restriction, interaction, pageCoords)\n\n    if (restriction) {\n      const widthDiff = (restriction.right - restriction.left) - rect.width\n      const heightDiff = (restriction.bottom - restriction.top) - rect.height\n\n      if (widthDiff < 0) {\n        offset.left += widthDiff\n        offset.right += widthDiff\n      }\n      if (heightDiff < 0) {\n        offset.top += heightDiff\n        offset.bottom += heightDiff\n      }\n    }\n\n    offset.left += startOffset.left - (rect.width  * elementRect.left)\n    offset.top  += startOffset.top  - (rect.height * elementRect.top)\n\n    offset.right  += startOffset.right  - (rect.width  * (1 - elementRect.right))\n    offset.bottom += startOffset.bottom - (rect.height * (1 - elementRect.bottom))\n  }\n\n  state.offset = offset\n}\n\nfunction set ({ coords, interaction, state }: ModifierArg<RestrictState>) {\n  const { options, offset } = state\n\n  const restriction = getRestrictionRect(options.restriction, interaction, coords)\n\n  if (!restriction) { return }\n\n  const rect = rectUtils.xywhToTlbr(restriction)\n\n  coords.x = Math.max(Math.min(rect.right  - offset.right, coords.x), rect.left + offset.left)\n  coords.y = Math.max(Math.min(rect.bottom - offset.bottom, coords.y), rect.top  + offset.top)\n}\n\nexport function getRestrictionRect (\n  value: Interact.RectResolvable<[number, number, Interact.Interaction]>,\n  interaction: Interact.Interaction,\n  coords?: Interact.Point,\n) {\n  if (is.func(value)) {\n    return rectUtils.resolveRectLike(value, interaction.interactable, interaction.element, [coords.x, coords.y, interaction])\n  } else {\n    return rectUtils.resolveRectLike(value, interaction.interactable, interaction.element)\n  }\n}\n\nconst defaults: RestrictOptions = {\n  restriction: null,\n  elementRect: null,\n  offset: null,\n  endOnly: false,\n  enabled: false,\n}\n\nconst restrict: ModifierModule<RestrictOptions, RestrictState> = {\n  start,\n  set,\n  defaults,\n}\n\nexport default makeModifier(restrict, 'restrict')\nexport { restrict }\n","// This module adds the options.resize.restrictEdges setting which sets min and\n// max for the top, left, bottom and right edges of the target being resized.\n//\n// interact(target).resize({\n//   edges: { top: true, left: true },\n//   restrictEdges: {\n//     inner: { top: 200, left: 200, right: 400, bottom: 400 },\n//     outer: { top:   0, left:   0, right: 600, bottom: 600 },\n//   },\n// })\n\nimport * as Interact from '@interactjs/types/index'\nimport extend from '@interactjs/utils/extend'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport { makeModifier, ModifierArg, ModifierState } from '../base'\n\nimport { getRestrictionRect, RestrictOptions } from './pointer'\n\nexport interface RestrictEdgesOptions {\n  inner: RestrictOptions['restriction']\n  outer: RestrictOptions['restriction']\n  offset?: RestrictOptions['offset']\n  endOnly: boolean\n  enabled?: boolean\n}\n\nexport type RestrictEdgesState = ModifierState<RestrictEdgesOptions, {\n  inner: Interact.Rect\n  outer: Interact.Rect\n  offset: RestrictEdgesOptions['offset']\n}>\n\nconst noInner = { top: +Infinity, left: +Infinity, bottom: -Infinity, right: -Infinity }\nconst noOuter = { top: -Infinity, left: -Infinity, bottom: +Infinity, right: +Infinity }\n\nfunction start ({ interaction, startOffset, state }: ModifierArg<RestrictEdgesState>) {\n  const { options } = state\n  let offset\n\n  if (options) {\n    const offsetRect = getRestrictionRect(options.offset, interaction, interaction.coords.start.page)\n\n    offset = rectUtils.rectToXY(offsetRect)\n  }\n\n  offset = offset || { x: 0, y: 0 }\n\n  state.offset = {\n    top:    offset.y + startOffset.top,\n    left:   offset.x + startOffset.left,\n    bottom: offset.y - startOffset.bottom,\n    right:  offset.x - startOffset.right,\n  }\n}\n\nfunction set ({ coords, edges, interaction, state }: ModifierArg<RestrictEdgesState>) {\n  const { offset, options } = state\n\n  if (!edges) {\n    return\n  }\n\n  const page = extend({}, coords)\n  const inner = getRestrictionRect(options.inner, interaction, page) || {} as Interact.Rect\n  const outer = getRestrictionRect(options.outer, interaction, page) || {} as Interact.Rect\n\n  fixRect(inner, noInner)\n  fixRect(outer, noOuter)\n\n  if (edges.top) {\n    coords.y = Math.min(Math.max(outer.top    + offset.top,    page.y), inner.top    + offset.top)\n  }\n  else if (edges.bottom) {\n    coords.y = Math.max(Math.min(outer.bottom + offset.bottom, page.y), inner.bottom + offset.bottom)\n  }\n  if (edges.left) {\n    coords.x = Math.min(Math.max(outer.left   + offset.left,   page.x), inner.left   + offset.left)\n  }\n  else if (edges.right) {\n    coords.x = Math.max(Math.min(outer.right  + offset.right,  page.x), inner.right  + offset.right)\n  }\n}\n\nfunction fixRect (rect, defaults) {\n  for (const edge of ['top', 'left', 'bottom', 'right']) {\n    if (!(edge in rect)) {\n      rect[edge] = defaults[edge]\n    }\n  }\n\n  return rect\n}\n\nconst defaults: RestrictEdgesOptions = {\n  inner: null,\n  outer: null,\n  offset: null,\n  endOnly: false,\n  enabled: false,\n}\n\nconst restrictEdges = {\n  noInner,\n  noOuter,\n  start,\n  set,\n  defaults,\n}\n\nexport default makeModifier(restrictEdges, 'restrictEdges')\nexport { restrictEdges }\n","import extend from '@interactjs/utils/extend'\n\nimport { makeModifier } from '../base'\n\nimport { restrict } from './pointer'\n\nconst defaults = extend({\n  get elementRect () {\n    return { top: 0, left: 0, bottom: 1, right: 1 }\n  },\n  set elementRect (_) {},\n}, restrict.defaults)\n\nconst restrictRect = {\n  start: restrict.start,\n  set: restrict.set,\n  defaults,\n}\n\nexport default makeModifier(restrictRect, 'restrictRect')\nexport { restrictRect }\n","import * as Interact from '@interactjs/types/index'\nimport extend from '@interactjs/utils/extend'\nimport * as rectUtils from '@interactjs/utils/rect'\n\nimport { makeModifier, ModifierArg, ModifierState } from '../base'\n\nimport { restrictEdges, RestrictEdgesState } from './edges'\nimport { getRestrictionRect, RestrictOptions } from './pointer'\n\nconst noMin = { width: -Infinity, height: -Infinity }\nconst noMax = { width: +Infinity, height: +Infinity }\n\nexport interface RestrictSizeOptions {\n  min?: Interact.Size | Interact.Point | RestrictOptions['restriction']\n  max?: Interact.Size | Interact.Point | RestrictOptions['restriction']\n  endOnly: boolean\n  enabled?: boolean\n}\n\nfunction start (arg: ModifierArg<RestrictEdgesState>) {\n  return restrictEdges.start(arg)\n}\n\nexport type RestrictSizeState =\n  RestrictEdgesState & ModifierState<RestrictSizeOptions & { inner: Interact.Rect, outer: Interact.Rect }, {\n    min: Interact.Rect\n    max: Interact.Rect\n  }>\n\nfunction set (arg: ModifierArg<RestrictSizeState>) {\n  const { interaction, state, rect, edges } = arg\n  const { options } = state\n\n  if (!edges) {\n    return\n  }\n\n  const minSize = rectUtils.tlbrToXywh(getRestrictionRect(options.min as any, interaction, arg.coords)) || noMin\n  const maxSize = rectUtils.tlbrToXywh(getRestrictionRect(options.max as any, interaction, arg.coords)) || noMax\n\n  state.options = {\n    endOnly: options.endOnly,\n    inner: extend({}, restrictEdges.noInner),\n    outer: extend({}, restrictEdges.noOuter),\n  }\n\n  if (edges.top) {\n    state.options.inner.top = rect.bottom - minSize.height\n    state.options.outer.top = rect.bottom - maxSize.height\n  }\n  else if (edges.bottom) {\n    state.options.inner.bottom = rect.top + minSize.height\n    state.options.outer.bottom = rect.top + maxSize.height\n  }\n  if (edges.left) {\n    state.options.inner.left = rect.right - minSize.width\n    state.options.outer.left = rect.right - maxSize.width\n  }\n  else if (edges.right) {\n    state.options.inner.right = rect.left + minSize.width\n    state.options.outer.right = rect.left + maxSize.width\n  }\n\n  restrictEdges.set(arg)\n\n  state.options = options\n}\n\nconst defaults: RestrictSizeOptions = {\n  min: null,\n  max: null,\n  endOnly: false,\n  enabled: false,\n}\n\nconst restrictSize = {\n  start,\n  set,\n  defaults,\n}\n\nexport default makeModifier(restrictSize, 'restrictSize')\nexport { restrictSize }\n","export { default } from './noop'\n","import * as Interact from '@interactjs/types/index'\nimport extend from '@interactjs/utils/extend'\nimport getOriginXY from '@interactjs/utils/getOriginXY'\nimport hypot from '@interactjs/utils/hypot'\nimport is from '@interactjs/utils/is'\nimport { resolveRectLike, rectToXY } from '@interactjs/utils/rect'\n\nimport { makeModifier, ModifierArg, ModifierState } from '../base'\n\nexport interface Offset {\n  x: number\n  y: number\n  index: number\n  relativePoint?: Interact.Point\n}\n\nexport interface SnapPosition {\n  x?: number\n  y?: number\n  range?: number\n  offset?: Offset\n  [index: string]: any\n}\n\nexport type SnapFunction = (\n  x: number,\n  y: number,\n  interaction: Interact.InteractionProxy,\n  offset: Offset,\n  index: number\n) => SnapPosition\nexport type SnapTarget = SnapPosition | SnapFunction\nexport interface SnapOptions {\n  targets: SnapTarget[]\n  // target range\n  range: number\n  // self points for snapping. [0,0] = top left, [1,1] = bottom right\n  relativePoints: Interact.Point[]\n  // startCoords = offset snapping from drag start page position\n  offset: Interact.Point | Interact.RectResolvable<[Interact.Interaction]> | 'startCoords'\n  offsetWithOrigin?: boolean\n  origin: Interact.RectResolvable<[Interact.Element]> | Interact.Point\n  endOnly?: boolean\n  enabled?: boolean\n}\n\nexport type SnapState = ModifierState<SnapOptions, {\n  offsets?: Offset[]\n  closest?: any\n  targetFields?: string[][]\n}>\n\nfunction start (arg: ModifierArg<SnapState>) {\n  const { interaction, interactable, element, rect, state, startOffset } = arg\n  const { options } = state\n  const origin = options.offsetWithOrigin\n    ? getOrigin(arg)\n    : { x: 0, y: 0 }\n\n  let snapOffset: Interact.Point\n\n  if (options.offset === 'startCoords') {\n    snapOffset = {\n      x: interaction.coords.start.page.x,\n      y: interaction.coords.start.page.y,\n    }\n  }\n  else  {\n    const offsetRect = resolveRectLike(options.offset as any, interactable, element, [interaction])\n\n    snapOffset = rectToXY(offsetRect) || { x: 0, y: 0 }\n    snapOffset.x += origin.x\n    snapOffset.y += origin.y\n  }\n\n  const { relativePoints } = options\n\n  state.offsets = rect && relativePoints && relativePoints.length\n    ?  relativePoints.map((relativePoint, index) => ({\n      index,\n      relativePoint,\n      x: startOffset.left - (rect.width  * relativePoint.x) + snapOffset.x,\n      y: startOffset.top  - (rect.height * relativePoint.y) + snapOffset.y,\n    }))\n    : [extend({\n      index: 0,\n      relativePoint: null,\n    }, snapOffset)]\n}\n\nfunction set (arg: ModifierArg<SnapState>) {\n  const { interaction, coords, state } = arg\n  const { options, offsets } = state\n\n  const origin = getOriginXY(interaction.interactable, interaction.element, interaction.prepared.name)\n  const page = extend({}, coords)\n  const targets = []\n\n  if (!options.offsetWithOrigin) {\n    page.x -= origin.x\n    page.y -= origin.y\n  }\n\n  for (const offset of offsets) {\n    const relativeX = page.x - offset.x\n    const relativeY = page.y - offset.y\n\n    for (let index = 0, len = options.targets.length; index < len; index++) {\n      const snapTarget = options.targets[index]\n      let target: SnapPosition\n\n      if (is.func(snapTarget)) {\n        target = snapTarget(relativeX, relativeY, interaction._proxy, offset, index)\n      }\n      else {\n        target = snapTarget\n      }\n\n      if (!target) { continue }\n\n      targets.push({\n        x: (is.number(target.x) ? target.x : relativeX) + offset.x,\n        y: (is.number(target.y) ? target.y : relativeY) + offset.y,\n\n        range: is.number(target.range) ? target.range : options.range,\n        source: snapTarget,\n        index,\n        offset,\n      })\n    }\n  }\n\n  const closest = {\n    target: null,\n    inRange: false,\n    distance: 0,\n    range: 0,\n    delta: { x: 0, y: 0 },\n  }\n\n  for (const target of targets) {\n    const range = target.range\n    const dx = target.x - page.x\n    const dy = target.y - page.y\n    const distance = hypot(dx, dy)\n    let inRange = distance <= range\n\n    // Infinite targets count as being out of range\n    // compared to non infinite ones that are in range\n    if (range === Infinity && closest.inRange && closest.range !== Infinity) {\n      inRange = false\n    }\n\n    if (!closest.target || (inRange\n      // is the closest target in range?\n      ? (closest.inRange && range !== Infinity\n        // the pointer is relatively deeper in this target\n        ? distance / range < closest.distance / closest.range\n        // this target has Infinite range and the closest doesn't\n        : (range === Infinity && closest.range !== Infinity) ||\n          // OR this target is closer that the previous closest\n          distance < closest.distance)\n      // The other is not in range and the pointer is closer to this target\n      : (!closest.inRange && distance < closest.distance))) {\n      closest.target = target\n      closest.distance = distance\n      closest.range = range\n      closest.inRange = inRange\n      closest.delta.x = dx\n      closest.delta.y = dy\n    }\n  }\n\n  if (closest.inRange) {\n    coords.x = closest.target.x\n    coords.y = closest.target.y\n  }\n\n  state.closest = closest\n  return closest\n}\n\nfunction getOrigin (arg: Partial<ModifierArg<SnapState>>) {\n  const { element } = arg.interaction\n  const optionsOrigin = rectToXY(\n    resolveRectLike(arg.state.options.origin as any, null, null, [element]),\n  )\n  const origin = optionsOrigin || getOriginXY(\n    arg.interactable,\n    element,\n    arg.interaction.prepared.name,\n  )\n\n  return origin\n}\n\nconst defaults: SnapOptions = {\n  range  : Infinity,\n  targets: null,\n  offset: null,\n  offsetWithOrigin: true,\n  origin: null,\n  relativePoints: null,\n  endOnly: false,\n  enabled: false,\n}\nconst snap = {\n  start,\n  set,\n  defaults,\n}\n\nexport default makeModifier(snap, 'snap')\nexport { snap }\n","// This module allows snapping of the size of targets during resize\n// interactions.\n\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\n\nimport { makeModifier, ModifierArg } from '../base'\n\nimport { snap, SnapOptions, SnapState } from './pointer'\n\nexport type SnapSizeOptions = Pick<\nSnapOptions,\n'targets' | 'offset' | 'endOnly' | 'range' | 'enabled'\n>\n\nfunction start (arg: ModifierArg<SnapState>) {\n  const { state, edges } = arg\n  const { options } = state\n\n  if (!edges) { return null }\n\n  arg.state = {\n    options: {\n      targets: null,\n      relativePoints: [{\n        x: edges.left ? 0 : 1,\n        y: edges.top ? 0 : 1,\n      }],\n      offset: options.offset || 'self',\n      origin: { x: 0, y: 0 },\n      range: options.range,\n    },\n  }\n\n  state.targetFields = state.targetFields || [\n    ['width', 'height'],\n    ['x', 'y'],\n  ]\n\n  snap.start(arg)\n  state.offsets = arg.state.offsets\n\n  arg.state = state\n}\n\nfunction set (arg) {\n  const { interaction, state, coords } = arg\n  const { options, offsets } = state\n  const relative = {\n    x: coords.x - offsets[0].x,\n    y: coords.y - offsets[0].y,\n  }\n\n  state.options = extend({}, options)\n  state.options.targets = []\n\n  for (const snapTarget of (options.targets || [])) {\n    let target\n\n    if (is.func(snapTarget)) {\n      target = snapTarget(relative.x, relative.y, interaction)\n    }\n    else {\n      target = snapTarget\n    }\n\n    if (!target) { continue }\n\n    for (const [xField, yField] of state.targetFields) {\n      if (xField in target || yField in target) {\n        target.x = target[xField]\n        target.y = target[yField]\n\n        break\n      }\n    }\n\n    state.options.targets.push(target)\n  }\n\n  const returnValue = snap.set(arg)\n\n  state.options = options\n\n  return returnValue\n}\n\nconst defaults: SnapSizeOptions = {\n  range: Infinity,\n  targets: null,\n  offset: null,\n  endOnly: false,\n  enabled: false,\n}\n\nconst snapSize = {\n  start,\n  set,\n  defaults,\n}\n\nexport default makeModifier(snapSize, 'snapSize')\nexport { snapSize }\n","/**\n * @module modifiers/snapEdges\n *\n * @description\n * This module allows snapping of the edges of targets during resize\n * interactions.\n *\n * @example\n * interact(target).resizable({\n *   snapEdges: {\n *     targets: [interact.snappers.grid({ x: 100, y: 50 })],\n *   },\n * })\n *\n * interact(target).resizable({\n *   snapEdges: {\n *     targets: [\n *       interact.snappers.grid({\n *        top: 50,\n *        left: 50,\n *        bottom: 100,\n *        right: 100,\n *       }),\n *     ],\n *   },\n * })\n */\n\nimport clone from '@interactjs/utils/clone'\nimport extend from '@interactjs/utils/extend'\n\nimport { makeModifier, ModifierArg, ModifierModule } from '../base'\n\nimport { SnapOptions, SnapState } from './pointer'\nimport { snapSize } from './size'\n\nexport type SnapEdgesOptions = Pick<SnapOptions, 'targets' | 'range' | 'offset' | 'endOnly' | 'enabled'>\n\nfunction start (arg: ModifierArg<SnapState>) {\n  const { edges } = arg\n\n  if (!edges) { return null }\n\n  arg.state.targetFields = arg.state.targetFields || [\n    [edges.left ? 'left' : 'right', edges.top ? 'top' : 'bottom'],\n  ]\n\n  return snapSize.start(arg)\n}\n\nconst snapEdges: ModifierModule<SnapEdgesOptions, SnapState> = {\n  start,\n  set: snapSize.set,\n  defaults: extend(\n    clone(snapSize.defaults),\n    {\n      targets: null,\n      range: null,\n      offset: { x: 0, y: 0 },\n    } as const,\n  ),\n}\n\nexport default makeModifier(snapEdges, 'snapEdges')\nexport { snapEdges }\n","export { default } from './noop'\n","/* eslint-disable node/no-extraneous-import */\nimport aspectRatio from './aspectRatio'\nimport avoid from './avoid'\nimport restrictEdges from './restrict/edges'\nimport restrict from './restrict/pointer'\nimport restrictRect from './restrict/rect'\nimport restrictSize from './restrict/size'\nimport rubberband from './rubberband'\nimport snapEdges from './snap/edges'\nimport snap from './snap/pointer'\nimport snapSize from './snap/size'\nimport spring from './spring'\nimport transform from './transform'\n\nexport default {\n  aspectRatio,\n  restrictEdges,\n  restrict,\n  restrictRect,\n  restrictSize,\n  snapEdges,\n  snap,\n  snapSize,\n\n  spring,\n  avoid,\n  transform,\n  rubberband,\n}\n","import snappers from '@interactjs/snappers/plugin'\nimport * as Interact from '@interactjs/types/index'\n\nimport all from './all'\nimport base from './base'\n\ndeclare module '@interactjs/core/interactStatic' {\n  export interface InteractStatic {\n    modifiers: typeof all\n  }\n}\n\nconst modifiers: Interact.Plugin = {\n  id: 'modifiers',\n  install (scope) {\n    const { interactStatic: interact } = scope\n\n    scope.usePlugin(base)\n    scope.usePlugin(snappers)\n\n    interact.modifiers = all\n\n    // for backwrads compatibility\n    for (const type in all) {\n      const { _defaults, _methods } = all[type as keyof typeof all]\n\n      ;(_defaults as any)._methods = _methods\n      ;(scope.defaults.perAction as any)[type] = _defaults\n    }\n  },\n}\n\nexport default modifiers\n","import * as Interact from '@interactjs/types/index'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\n\nimport BaseEvent from '../core/BaseEvent'\n\nexport default class PointerEvent<T extends string = any> extends BaseEvent {\n  type: T\n  originalEvent: Interact.PointerEventType\n  pointerId: number\n  pointerType: string\n  double: boolean\n  pageX: number\n  pageY: number\n  clientX: number\n  clientY: number\n  dt: number\n  eventable: any\n  [key: string]: any\n\n  /** */\n  constructor (\n    type: T,\n    pointer: Interact.PointerType | PointerEvent<any>,\n    event: Interact.PointerEventType,\n    eventTarget: Interact.EventTarget,\n    interaction: Interact.Interaction,\n    timeStamp: number,\n  ) {\n    super(interaction)\n    pointerUtils.pointerExtend(this, event)\n\n    if (event !== pointer) {\n      pointerUtils.pointerExtend(this, pointer)\n    }\n\n    this.timeStamp     = timeStamp\n    this.originalEvent = event\n    this.type          = type\n    this.pointerId     = pointerUtils.getPointerId(pointer)\n    this.pointerType   = pointerUtils.getPointerType(pointer)\n    this.target        = eventTarget\n    this.currentTarget = null\n\n    if (type === 'tap') {\n      const pointerIndex = interaction.getPointerIndex(pointer)\n      this.dt = this.timeStamp - interaction.pointers[pointerIndex].downTime\n\n      const interval = this.timeStamp - interaction.tapTime\n\n      this.double = !!(interaction.prevTap &&\n        interaction.prevTap.type !== 'doubletap' &&\n        interaction.prevTap.target === this.target &&\n        interval < 500)\n    }\n    else if (type === 'doubletap') {\n      this.dt = (pointer as PointerEvent<'tap'>).timeStamp - interaction.tapTime\n    }\n  }\n\n  _subtractOrigin ({ x: originX, y: originY }: Interact.Point) {\n    this.pageX   -= originX\n    this.pageY   -= originY\n    this.clientX -= originX\n    this.clientY -= originY\n\n    return this\n  }\n\n  _addOrigin ({ x: originX, y: originY }: Interact.Point) {\n    this.pageX   += originX\n    this.pageY   += originY\n    this.clientX += originX\n    this.clientY += originY\n\n    return this\n  }\n\n  /**\n   * Prevent the default behaviour of the original Event\n   */\n  preventDefault () {\n    this.originalEvent.preventDefault()\n  }\n}\n\nexport { PointerEvent }\n","import { Eventable } from '@interactjs/core/Eventable'\nimport { Interaction } from '@interactjs/core/Interaction'\nimport { PerActionDefaults } from '@interactjs/core/defaultOptions'\nimport { Scope } from '@interactjs/core/scope'\nimport * as Interact from '@interactjs/types/index'\nimport * as domUtils from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport getOriginXY from '@interactjs/utils/getOriginXY'\n\nimport { PointerEvent } from './PointerEvent'\n\nexport type EventTargetList = Array<{\n  node: Node\n  eventable: Eventable\n  props: { [key: string]: any }\n}>\n\nexport interface PointerEventOptions extends PerActionDefaults {\n  enabled?: undefined // not used\n  holdDuration?: number\n  ignoreFrom?: any\n  allowFrom?: any\n  origin?: Interact.Point | string | Interact.Element\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface Scope {\n    pointerEvents: typeof pointerEvents\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    prevTap?: PointerEvent<string>\n    tapTime?: number\n  }\n}\n\ndeclare module '@interactjs/core/PointerInfo' {\n  interface PointerInfo {\n    hold?: {\n      duration: number\n      timeout: any\n    }\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    pointerEvents: Interact.Options\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface SignalArgs {\n    'pointerEvents:new': { pointerEvent: PointerEvent<any> }\n    'pointerEvents:fired': {\n      interaction: Interaction\n      pointer: Interact.PointerType | PointerEvent<any>\n      event: Interact.PointerEventType | PointerEvent<any>\n      eventTarget: Interact.EventTarget\n      pointerEvent: PointerEvent<any>\n      targets?: EventTargetList\n      type: string\n    }\n    'pointerEvents:collect-targets': {\n      interaction: Interaction\n      pointer: Interact.PointerType | PointerEvent<any>\n      event: Interact.PointerEventType | PointerEvent<any>\n      eventTarget: Interact.EventTarget\n      targets?: EventTargetList\n      type: string\n      path: Node[]\n      node: null\n    }\n  }\n}\n\nconst defaults: PointerEventOptions = {\n  holdDuration: 600,\n  ignoreFrom  : null,\n  allowFrom   : null,\n  origin      : { x: 0, y: 0 },\n}\n\nconst pointerEvents: Interact.Plugin = {\n  id: 'pointer-events/base',\n  before: ['inertia', 'modifiers', 'auto-start', 'actions'],\n  install,\n  listeners: {\n    'interactions:new': addInteractionProps,\n    'interactions:update-pointer': addHoldInfo,\n    'interactions:move': moveAndClearHold,\n    'interactions:down': (arg, scope) => {\n      downAndStartHold(arg, scope)\n      fire(arg, scope)\n    },\n    'interactions:up': (arg, scope) => {\n      clearHold(arg)\n      fire(arg, scope)\n      tapAfterUp(arg, scope)\n    },\n    'interactions:cancel': (arg, scope) => {\n      clearHold(arg)\n      fire(arg, scope)\n    },\n  },\n  PointerEvent,\n  fire,\n  collectEventTargets,\n  defaults,\n  types: {\n    down: true,\n    move: true,\n    up: true,\n    cancel: true,\n    tap: true,\n    doubletap: true,\n    hold: true,\n  } as { [type: string]: true },\n}\n\nfunction fire<T extends string> (\n  arg: {\n    pointer: Interact.PointerType | PointerEvent<any>\n    event: Interact.PointerEventType | PointerEvent<any>\n    eventTarget: Interact.EventTarget\n    interaction: Interaction\n    type: T\n    targets?: EventTargetList\n  },\n  scope: Interact.Scope,\n) {\n  const {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type,\n    targets = collectEventTargets(arg, scope),\n  } = arg\n\n  const pointerEvent = new PointerEvent(type, pointer, event, eventTarget, interaction, scope.now())\n\n  scope.fire('pointerEvents:new', { pointerEvent })\n\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    targets,\n    type,\n    pointerEvent,\n  }\n\n  for (let i = 0; i < targets.length; i++) {\n    const target = targets[i]\n\n    for (const prop in target.props || {}) {\n      (pointerEvent as any)[prop] = target.props[prop]\n    }\n\n    const origin = getOriginXY(target.eventable, target.node)\n\n    pointerEvent._subtractOrigin(origin)\n    pointerEvent.eventable = target.eventable\n    pointerEvent.currentTarget = target.node\n\n    target.eventable.fire(pointerEvent)\n\n    pointerEvent._addOrigin(origin)\n\n    if (pointerEvent.immediatePropagationStopped ||\n        (pointerEvent.propagationStopped &&\n            (i + 1) < targets.length && targets[i + 1].node !== pointerEvent.currentTarget)) {\n      break\n    }\n  }\n\n  scope.fire('pointerEvents:fired', signalArg)\n\n  if (type === 'tap') {\n    // if pointerEvent should make a double tap, create and fire a doubletap\n    // PointerEvent and use that as the prevTap\n    const prevTap = pointerEvent.double\n      ? fire({\n        interaction,\n        pointer,\n        event,\n        eventTarget,\n        type: 'doubletap',\n      }, scope)\n      : pointerEvent\n\n    interaction.prevTap = prevTap\n    interaction.tapTime = prevTap.timeStamp\n  }\n\n  return pointerEvent\n}\n\nfunction collectEventTargets<T extends string> ({ interaction, pointer, event, eventTarget, type }: {\n  interaction: Interaction\n  pointer: Interact.PointerType | PointerEvent<any>\n  event: Interact.PointerEventType | PointerEvent<any>\n  eventTarget: Interact.EventTarget\n  type: T\n}, scope: Interact.Scope) {\n  const pointerIndex = interaction.getPointerIndex(pointer)\n  const pointerInfo = interaction.pointers[pointerIndex]\n\n  // do not fire a tap event if the pointer was moved before being lifted\n  if (type === 'tap' && (interaction.pointerWasMoved ||\n      // or if the pointerup target is different to the pointerdown target\n      !(pointerInfo && pointerInfo.downTarget === eventTarget))) {\n    return []\n  }\n\n  const path = domUtils.getPath(eventTarget as Interact.Element | Document)\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type,\n    path,\n    targets: [] as EventTargetList,\n    node: null,\n  }\n\n  for (const node of path) {\n    signalArg.node = node\n\n    scope.fire('pointerEvents:collect-targets', signalArg)\n  }\n\n  if (type === 'hold') {\n    signalArg.targets = signalArg.targets.filter(target =>\n      target.eventable.options.holdDuration === interaction.pointers[pointerIndex].hold.duration)\n  }\n\n  return signalArg.targets\n}\n\nfunction addInteractionProps ({ interaction }) {\n  interaction.prevTap = null   // the most recent tap event on this interaction\n  interaction.tapTime = 0     // time of the most recent tap event\n}\n\nfunction addHoldInfo ({ down, pointerInfo }: Interact.SignalArgs['interactions:update-pointer']) {\n  if (!down && pointerInfo.hold) {\n    return\n  }\n\n  pointerInfo.hold = { duration: Infinity, timeout: null }\n}\n\nfunction clearHold ({ interaction, pointerIndex }) {\n  if (interaction.pointers[pointerIndex].hold) {\n    clearTimeout(interaction.pointers[pointerIndex].hold.timeout)\n  }\n}\n\nfunction moveAndClearHold (\n  { interaction, pointer, event, eventTarget, duplicate }: Interact.SignalArgs['interactions:move'],\n  scope: Interact.Scope,\n) {\n  const pointerIndex = interaction.getPointerIndex(pointer)\n\n  if (!duplicate && (!interaction.pointerIsDown || interaction.pointerWasMoved)) {\n    if (interaction.pointerIsDown) {\n      clearTimeout(interaction.pointers[pointerIndex].hold.timeout)\n    }\n\n    fire({\n      interaction,\n      pointer,\n      event,\n      eventTarget: eventTarget as Interact.Element,\n      type: 'move',\n    }, scope)\n  }\n}\n\nfunction downAndStartHold ({ interaction, pointer, event, eventTarget, pointerIndex }: Interact.SignalArgs['interactions:down'], scope: Interact.Scope) {\n  const timer = interaction.pointers[pointerIndex].hold\n  const path = domUtils.getPath(eventTarget as Interact.Element | Document)\n  const signalArg = {\n    interaction,\n    pointer,\n    event,\n    eventTarget,\n    type: 'hold',\n    targets: [] as EventTargetList,\n    path,\n    node: null,\n  }\n\n  for (const node of path) {\n    signalArg.node = node\n\n    scope.fire('pointerEvents:collect-targets', signalArg)\n  }\n\n  if (!signalArg.targets.length) { return }\n\n  let minDuration = Infinity\n\n  for (const target of signalArg.targets) {\n    const holdDuration = target.eventable.options.holdDuration\n\n    if (holdDuration < minDuration) {\n      minDuration = holdDuration\n    }\n  }\n\n  timer.duration = minDuration\n  timer.timeout = setTimeout(() => {\n    fire({\n      interaction,\n      eventTarget,\n      pointer,\n      event,\n      type: 'hold',\n    }, scope)\n  }, minDuration)\n}\n\nfunction tapAfterUp ({ interaction, pointer, event, eventTarget }: Interact.SignalArgs['interactions:up'], scope: Interact.Scope) {\n  if (!interaction.pointerWasMoved) {\n    fire({ interaction, eventTarget, pointer, event, type: 'tap' }, scope)\n  }\n}\n\nfunction install (scope: Scope) {\n  scope.pointerEvents = pointerEvents\n  scope.defaults.actions.pointerEvents = pointerEvents.defaults\n  extend(scope.actions.phaselessTypes, pointerEvents.types)\n}\n\nexport default pointerEvents\n","import { ListenerMap } from '@interactjs/core/scope'\nimport * as Interact from '@interactjs/types/index'\n\nimport PointerEvent from './PointerEvent'\nimport basePlugin from './base'\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    holdIntervalHandle?: any\n  }\n}\n\ndeclare module '@interactjs/pointer-events/PointerEvent' {\n  interface PointerEvent<T extends string = any> {\n    count?: number\n  }\n}\n\ndeclare module '@interactjs/pointer-events/base' {\n  interface PointerEventOptions {\n    holdRepeatInterval?: number\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  scope.usePlugin(basePlugin)\n\n  const {\n    pointerEvents,\n  } = scope\n\n  // don't repeat by default\n  pointerEvents.defaults.holdRepeatInterval = 0\n  pointerEvents.types.holdrepeat = scope.actions.phaselessTypes.holdrepeat = true\n}\n\nfunction onNew ({ pointerEvent }: { pointerEvent: PointerEvent<any> }) {\n  if (pointerEvent.type !== 'hold') { return }\n\n  pointerEvent.count = (pointerEvent.count || 0) + 1\n}\n\nfunction onFired (\n  { interaction, pointerEvent, eventTarget, targets }: Interact.SignalArgs['pointerEvents:fired'],\n  scope: Interact.Scope,\n) {\n  if (pointerEvent.type !== 'hold' || !targets.length) { return }\n\n  // get the repeat interval from the first eventable\n  const interval = targets[0].eventable.options.holdRepeatInterval\n\n  // don't repeat if the interval is 0 or less\n  if (interval <= 0) { return }\n\n  // set a timeout to fire the holdrepeat event\n  interaction.holdIntervalHandle = setTimeout(() => {\n    scope.pointerEvents.fire({\n      interaction,\n      eventTarget,\n      type: 'hold',\n      pointer: pointerEvent,\n      event: pointerEvent,\n    }, scope)\n  }, interval)\n}\n\nfunction endHoldRepeat ({ interaction }: { interaction: Interact.Interaction }) {\n  // set the interaction's holdStopTime property\n  // to stop further holdRepeat events\n  if (interaction.holdIntervalHandle) {\n    clearInterval(interaction.holdIntervalHandle)\n    interaction.holdIntervalHandle = null\n  }\n}\n\nconst holdRepeat: Interact.Plugin = {\n  id: 'pointer-events/holdRepeat',\n  install,\n  listeners: ['move', 'up', 'cancel', 'endall'].reduce(\n    (acc, enderTypes) => {\n      (acc as any)[`pointerEvents:${enderTypes}`] = endHoldRepeat\n      return acc\n    },\n    {\n      'pointerEvents:new': onNew,\n      'pointerEvents:fired': onFired,\n    } as ListenerMap,\n  ),\n}\n\nexport default holdRepeat\n","import * as Interact from '@interactjs/types/index'\nimport extend from '@interactjs/utils/extend'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    pointerEvents: typeof pointerEventsMethod\n    __backCompatOption: (optionName: string, newValue: any) => any\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  const { Interactable } = scope\n\n  Interactable.prototype.pointerEvents = pointerEventsMethod\n\n  const __backCompatOption = Interactable.prototype._backCompatOption\n\n  Interactable.prototype._backCompatOption = function (optionName, newValue) {\n    const ret = __backCompatOption.call(this, optionName, newValue)\n\n    if (ret === this) {\n      this.events.options[optionName] = newValue\n    }\n\n    return ret\n  }\n}\n\nfunction pointerEventsMethod (this: Interact.Interactable, options: any) {\n  extend(this.events.options, options)\n\n  return this\n}\n\nconst plugin: Interact.Plugin = {\n  id: 'pointer-events/interactableTargets',\n  install,\n  listeners: {\n    'pointerEvents:collect-targets': ({\n      targets,\n      node,\n      type,\n      eventTarget,\n    }, scope) => {\n      scope.interactables.forEachMatch(node, (interactable: Interact.Interactable) => {\n        const eventable = interactable.events\n        const options = eventable.options\n\n        if (\n          eventable.types[type] &&\n          eventable.types[type].length &&\n        interactable.testIgnoreAllow(options, node, eventTarget)) {\n          targets.push({\n            node,\n            eventable,\n            props: { interactable },\n          })\n        }\n      })\n    },\n\n    'interactable:new': ({ interactable }) => {\n      interactable.events.getRect = function (element: Interact.Element) {\n        return interactable.getRect(element)\n      }\n    },\n\n    'interactable:set': ({ interactable, options }, scope) => {\n      extend(interactable.events.options, scope.pointerEvents.defaults)\n      extend(interactable.events.options, options.pointerEvents || {})\n    },\n  },\n}\n\nexport default plugin\n","import * as Interact from '@interactjs/types/index'\n\nimport * as pointerEvents from './base'\nimport holdRepeat from './holdRepeat'\nimport interactableTargets from './interactableTargets'\n\nconst plugin: Interact.Plugin = {\n  id: 'pointer-events',\n  install (scope) {\n    scope.usePlugin(pointerEvents)\n    scope.usePlugin(holdRepeat)\n    scope.usePlugin(interactableTargets)\n  },\n}\n\nexport default plugin\n\nexport {\n  pointerEvents,\n  holdRepeat,\n  interactableTargets,\n}\n","import { Interactable } from '@interactjs/core/Interactable'\nimport { ActionProps, Interaction } from '@interactjs/core/Interaction'\nimport { Scope } from '@interactjs/core/scope'\nimport * as Interact from '@interactjs/types/index'\nimport * as arr from '@interactjs/utils/arr'\nimport extend from '@interactjs/utils/extend'\nimport is from '@interactjs/utils/is'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport { tlbrToXywh } from '@interactjs/utils/rect'\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    reflow: (action: ActionProps) => ReturnType<typeof reflow>\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    _reflowPromise: Promise<void>\n    _reflowResolve: () => void\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  // eslint-disable-next-line no-shadow\n  interface PhaseMap {\n    reflow?: true\n  }\n}\n\nexport function install (scope: Scope) {\n  const {\n    /** @lends Interactable */\n    // eslint-disable-next-line no-shadow\n    Interactable,\n  } = scope\n\n  scope.actions.phases.reflow = true\n\n  /**\n   * ```js\n   * const interactable = interact(target)\n   * const drag = { name: drag, axis: 'x' }\n   * const resize = { name: resize, edges: { left: true, bottom: true }\n   *\n   * interactable.reflow(drag)\n   * interactable.reflow(resize)\n   * ```\n   *\n   * Start an action sequence to re-apply modifiers, check drops, etc.\n   *\n   * @param { Object } action The action to begin\n   * @param { string } action.name The name of the action\n   * @returns { Promise } A promise that resolves to the `Interactable` when actions on all targets have ended\n   */\n  Interactable.prototype.reflow = function (action) {\n    return reflow(this, action, scope)\n  }\n}\n\nfunction reflow<T extends Interact.ActionName> (interactable: Interactable, action: ActionProps<T>, scope: Scope): Promise<Interactable> {\n  const elements = (is.string(interactable.target)\n    ? arr.from(interactable._context.querySelectorAll(interactable.target))\n    : [interactable.target]) as Interact.Element[]\n\n  // tslint:disable-next-line variable-name\n  const Promise = (scope.window as any).Promise\n  const promises: Array<Promise<null>> | null = Promise ? [] : null\n\n  for (const element of elements) {\n    const rect = interactable.getRect(element as HTMLElement | SVGElement)\n\n    if (!rect) { break }\n\n    const runningInteraction = arr.find(\n      scope.interactions.list,\n      (interaction: Interaction) => {\n        return interaction.interacting() &&\n          interaction.interactable === interactable &&\n          interaction.element === element &&\n          interaction.prepared.name === action.name\n      })\n    let reflowPromise: Promise<null>\n\n    if (runningInteraction) {\n      runningInteraction.move()\n\n      if (promises) {\n        reflowPromise = runningInteraction._reflowPromise || new Promise((resolve: any) => {\n          runningInteraction._reflowResolve = resolve\n        })\n      }\n    }\n    else {\n      const xywh = tlbrToXywh(rect)\n      const coords = {\n        page     : { x: xywh.x, y: xywh.y },\n        client   : { x: xywh.x, y: xywh.y },\n        timeStamp: scope.now(),\n      }\n\n      const event = pointerUtils.coordsToEvent(coords)\n      reflowPromise = startReflow<T>(scope, interactable, element, action, event)\n    }\n\n    if (promises) {\n      promises.push(reflowPromise)\n    }\n  }\n\n  return promises && Promise.all(promises).then(() => interactable)\n}\n\nfunction startReflow<T extends Interact.ActionName> (scope: Scope, interactable: Interactable, element: Interact.Element, action: ActionProps<T>, event: any) {\n  const interaction = scope.interactions.new({ pointerType: 'reflow' })\n  const signalArg = {\n    interaction,\n    event,\n    pointer: event,\n    eventTarget: element,\n    phase: 'reflow',\n  } as const\n\n  interaction.interactable = interactable\n  interaction.element = element\n  interaction.prepared = extend({}, action)\n  interaction.prevEvent = event\n  interaction.updatePointer(event, event, element, true)\n\n  interaction._doPhase(signalArg)\n\n  const Promise: PromiseConstructor = (scope.window as unknown as any).Promise\n  const reflowPromise = Promise\n    ? new Promise<null>(resolve => {\n      interaction._reflowResolve = resolve\n    })\n    : null\n\n  interaction._reflowPromise = reflowPromise\n  interaction.start(action, interactable, element)\n\n  if (interaction._interacting) {\n    interaction.move(signalArg)\n    interaction.end(event)\n  }\n  else {\n    interaction.stop()\n  }\n\n  interaction.removePointer(event, event)\n  interaction.pointerIsDown = false\n\n  return reflowPromise\n}\n\nexport default {\n  id: 'reflow',\n  install,\n  listeners: {\n    // remove completed reflow interactions\n    'interactions:stop': ({ interaction }, scope) => {\n      if (interaction.pointerType === 'reflow') {\n        if (interaction._reflowResolve) {\n          interaction._reflowResolve()\n        }\n\n        arr.remove(scope.interactions.list, interaction)\n      }\n    },\n  },\n} as Interact.Plugin\n","export default {}\n","export const exchange = {}\n","import actions from '@interactjs/actions/plugin'\nimport arrange from '@interactjs/arrange/plugin'\nimport autoScroll from '@interactjs/auto-scroll/plugin'\nimport autoStart from '@interactjs/auto-start/plugin'\nimport clone from '@interactjs/clone/plugin'\nimport interactablePreventDefault from '@interactjs/core/interactablePreventDefault'\nimport devTools from '@interactjs/dev-tools/plugin'\nimport feedback from '@interactjs/feedback/plugin'\nimport inertia from '@interactjs/inertia/plugin'\nimport interact from '@interactjs/interact'\nimport modifiers from '@interactjs/modifiers/plugin'\nimport multiTarget from '@interactjs/multi-target/plugin'\nimport offset from '@interactjs/offset/plugin'\nimport pointerEvents from '@interactjs/pointer-events/plugin'\nimport reactComponents from '@interactjs/react/plugin'\nimport reflow from '@interactjs/reflow/plugin'\nimport * as displace from '@interactjs/utils/displace'\nimport { exchange } from '@interactjs/utils/exchange'\nimport * as pointerUtils from '@interactjs/utils/pointerUtils'\nimport vueComponents from '@interactjs/vue/plugin'\n\ndeclare module '@interactjs/core/interactStatic' {\n  export interface InteractStatic {\n    __utils: {\n      exchange: typeof exchange\n      displace: typeof displace\n      pointer: typeof pointerUtils\n    }\n  }\n}\n\ninteract.use(multiTarget)\n\ninteract.use(interactablePreventDefault)\n\ninteract.use(offset)\n\n// interaction element cloning\ninteract.use(clone)\n\n// sortable and swappable\ninteract.use(arrange)\n\n// pointerEvents\ninteract.use(pointerEvents)\n\n// inertia\ninteract.use(inertia)\n\n// snap, resize, etc.\ninteract.use(modifiers)\n\n// autoStart, hold\ninteract.use(autoStart)\n\n// drag and drop, resize, gesture\ninteract.use(actions)\n\n// autoScroll\ninteract.use(autoScroll)\n\n// reflow\ninteract.use(reflow)\n\ninteract.use(feedback)\n\ninteract.use(vueComponents)\n\ninteract.use(reactComponents)\n\ninteract.__utils = {\n  exchange,\n  displace,\n  pointer: pointerUtils,\n}\n\n// eslint-disable-next-line no-undef\nif (process.env.NODE_ENV !== 'production') {\n  interact.use(devTools)\n}\n\nexport default interact\n\nif (typeof module === 'object' && !!module) {\n  try { module.exports = interact }\n  catch {}\n}\n\n(interact as any).default = interact\n","// eslint-disable-next-line import/no-extraneous-dependencies\nimport interact from '@interactjs/interactjs/index'\n\nexport default interact\n\nif (typeof module === 'object' && !!module) {\n  try { module.exports = interact }\n  catch {}\n}\n\n(interact as any).default = interact\n","\nreturn _$index_86;\n\n});\n"],"sourceRoot":"","file":"interact.js"}